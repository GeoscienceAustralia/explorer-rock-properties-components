{"version":3,"sources":["config.ts","zoom.ts","explorer-rock-properties-cesium-components.min.js","clusters.ts","control-panel.ts","cluster-inspector.ts","wms-inspector-state.ts","wms-inspector.ts"],"names":["rpComponents","config","config_1","RocksConfigService","$rootScope","this","prototype","setConfig","viewer","$broadcast","$inject","angular","module","factory","zoom","ZoomLevelService","rocksConfigService","_this","zoomLevels","defaultExtent","west","south","east","north","moveEndHandler","nextPosition","Cesium","Ellipsoid","WGS84","cartesianToCartographic","camera","position","previousPosition","height","getIndex","nextIndex","Math","abs","latitude","longitude","console","log","$on","Object","defineProperty","get","enumerable","configurable","i","length","setActive","active","moveEnd","addEventListener","removeEventListener","getViewExtent","offset","ellipsoid","pixelRatio","window","devicePixelRatio","c2","Cartesian2","leftTop","scene","pickEllipsoid","canvas","width","rightDown","toDegrees","clusterService","ClusterHeightWeighter","calculateWeighting","pow","ClusterService","$http","zoomLevelService","clusterChartService","loadingSpinnerService","clusterInspectorService","clusterFilterState","clusterRangeMeta","maxExtrudeHeight","clusterFilter","reCluster","clusterInstances","labelCollection","LabelCollection","getClusters","then","response","data","features","clusters","maxCorrection","maxCount","d3","max","d","properties","count","scale","linear","domain","range","clusterProps","computeClusterAttributes","push","buildClusterInstance","add","buildLabel","drawClusters","serviceUrl","rocksServiceUrl","toggleClusters","clustersCollection","show","setPickEnabled","PrimitiveCollection","primitives","above","value","limit","below","dx","dy","args","filterQuery","method","url","instances","removeAll","clusterPrimitive","Primitive","geometryInstances","appearance","PerInstanceColorAppearance","translucent","closed","setClusterPrimitive","cluster","GeometryInstance","geometry","CircleGeometry","center","Cartesian3","fromDegrees","coordinates","radius","vertexFormat","VERTEX_FORMAT","extrudedHeight","extrudeHeight","id","attributes","color","ColorGeometryInstanceAttribute","fromColor","text","toString","fillColor","Color","BLACK","outlineColor","RED","font","horizontalOrigin","HorizontalOrigin","CENTER","maxHeight","attrs","fromCssColorString","withAlpha","chartSpinnerService","controlPanel","RocksPanelCtrl","$scope","rocksPanelService","wmsInspectorService","targetPanel","event","setTargetPanel","RocksPanelService","wmsPointsService","clustersEnabled","pointsEnabled","init","togglePoints","controller","directive","templateUrl","controllerAs","clusterInspector","ClusterInspectorCtrl","PagingState","total","more","ClusterInspectorService","$timeout","inspectMode","listReady","maxListStep","useClusterPicking","pickHandler","ScreenSpaceEventHandler","pickHandlerAction","movement","pick","defined","hasOwnProperty","featureType","clearHighlighted","targetId","setHighlighted","targetPos","chartClusterQuery","listIndex","listClusterQuery","summarySpinner","document","getElementById","style","display","addSpinner","container","query","buildChart","ga","loadNextListStep","listSpinner","listFeatures","concat","totalFeatures","pagingState","enabled","setInputAction","ScreenSpaceEventType","LEFT_CLICK","removeInputAction","primitive","highlight","getGeometryInstanceAttributes","prevColor","toValue","wmsInspectorState","WmsInspectorState","view","wmsInspectorService_1","WmsInspectorCtrl","WmsInspectorService","assetsService","configService","gwsUtilService","rocksClipShipService","isLoading","URL_EXCLUDE","SURFACE_GEO","degrees","lat","cartographic","lon","isDrawing","inspectorEnabled","linked","key","isActive","targetGeom","cameraHeight","getReferenceFeatureClasses","rocksFeature","wmsUrl","geoserverWmsUrl","name","togglePointInspector","queryRocks","wmsLayerNames","layers","geoserverWmsLayerPrefix","queryFeature","feature","toggleLoading","targetUrl","targetLayers","indexOf","substring","queryString","success","featureInfo","error","status","headers","loadingSpinner"],"mappings":"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","file":"explorer-rock-properties-cesium-components.min.js","sourcesContent":["/// <reference path=\"../../typings/browser.d.ts\" />\r\n\r\nmodule rpComponents.config {\r\n\r\n    'use strict';\r\n\r\n    export interface IRocksConfigService {\r\n        config: any;\r\n        viewer: any;\r\n        setConfig(config: any, viewer: any): void;\r\n    }\r\n\r\n    export class RocksConfigService implements IRocksConfigService {\r\n\r\n        public config: any;\r\n        public viewer: any;\r\n\r\n        static $inject = [\r\n            \"$rootScope\"\r\n        ];\r\n        constructor(\r\n            public $rootScope: ng.IRootScopeService\r\n        ){}\r\n\r\n        setConfig(config: any, viewer: any): void {\r\n            this.config = config;\r\n            this.viewer = viewer;\r\n            this.$rootScope.$broadcast(\"rocks.config.ready\");\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.config', [])\r\n        .factory(\"rocksConfigService\", [\"$rootScope\",\r\n            (\r\n                $rootScope: ng.IRootScopeService\r\n            ) =>\r\n                new rpComponents.config.RocksConfigService($rootScope)]);\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n\r\ndeclare var Cesium: any;\r\n\r\n/**\r\n *\r\n * Handles the arbitrary 'zoom' levels/ranges that we will display different cluster granularities.\r\n *\r\n *\r\n */\r\nmodule rpComponents.zoom {\r\n\r\n    'use strict';\r\n\r\n    export interface IZoomLevelService {\r\n        viewer: any;\r\n        zoomLevels: any;\r\n        nextPosition: any;\r\n        previousPosition: any;\r\n        defaultExtent: any;\r\n        \r\n        nextIndex: number;\r\n\r\n        setActive(active:boolean): void;\r\n        moveEndHandler(): void;\r\n        getIndex(height: number): void;\r\n        getViewExtent(offset: number): any;\r\n    }\r\n\r\n    export class ZoomLevelService implements IZoomLevelService {\r\n\r\n        viewer: any;\r\n\r\n        zoomLevels: any = [\r\n            5000,\r\n            10000,\r\n            20000,\r\n            30000,\r\n            50000,\r\n            80000,\r\n            200000,\r\n            1000000,\r\n            1500000,\r\n            2000000,\r\n            4000000,\r\n            6500000,\r\n\r\n            // these's tiles are pretty broad\r\n            8500000,\r\n            10000000,\r\n            15000000,\r\n            100000000\r\n        ];\r\n        previousPosition: any;\r\n        nextPosition: any;\r\n        \r\n        defaultExtent: any = {\r\n            \"west\": 109,\r\n            \"south\": -45,\r\n            \"east\": 158,\r\n            \"north\": -8\r\n        };\r\n\r\n        static $inject = [\r\n            \"$rootScope\",\r\n            \"rocksConfigService\"\r\n        ];\r\n\r\n        constructor(\r\n            public $rootScope:ng.IRootScopeService,\r\n            public rocksConfigService: rpComponents.config.IRocksConfigService\r\n        ) {\r\n            this.$rootScope.$on('rocks.config.ready', () => {\r\n                this.viewer = this.rocksConfigService.viewer;\r\n            });\r\n        }\r\n        \r\n        public get nextIndex(): number {\r\n           return this.getIndex(this.nextPosition.height);\r\n        }\r\n        public moveEndHandler = () => {\r\n            this.nextPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.viewer.camera.position);\r\n            // changed indexes or exceed threshold for pan, trigger recluster\r\n            if((this.previousPosition.height > -1 && this.getIndex(this.previousPosition.height) != this.nextIndex) || \r\n               (Math.abs(this.nextPosition.latitude - this.previousPosition.latitude) > 0.01 / this.nextIndex ||\r\n                Math.abs(this.nextPosition.longitude - this.previousPosition.longitude) > 0.01 / this.nextIndex) ||\r\n                this.nextIndex == 16\r\n            ) {\r\n                this.$rootScope.$broadcast('rocks.clusters.update', this.nextIndex);\r\n            }\r\n\r\n            console.log(\"INDEX = \" + this.nextIndex + \" HEIGHT = \" + Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.viewer.camera.position).height);\r\n\r\n            this.previousPosition = this.nextPosition;\r\n        };\r\n\r\n        /**\r\n         *\r\n         * Get the lowest index the height fits into\r\n         *\r\n         * @param height\r\n         * @returns {number}\r\n         */\r\n        public getIndex(height: number){\r\n            for(var i = 0; i < this.zoomLevels.length; i++){\r\n                if(height < this.zoomLevels[i]){\r\n                    return this.zoomLevels.length - i;\r\n                }\r\n            }\r\n            return this.zoomLevels.length - 1;\r\n        }\r\n\r\n        public setActive(active:boolean) {\r\n            if(active) {\r\n                // TODO extent\r\n                this.nextPosition = this.previousPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.viewer.camera.position);\r\n                this.viewer.camera.moveEnd.addEventListener(this.moveEndHandler);\r\n            }\r\n            else {\r\n                this.viewer.camera.moveEnd.removeEventListener(this.moveEndHandler);\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * WKT? GeoJSON? - leave until approach is clearer.\r\n         * TODO this is here temporarily, more thought needed re managing the buffered extent currently handled by minimap.\r\n         *\r\n         * @param offset\r\n         * @returns {any}\r\n         */\r\n        public getViewExtent(offset: number){\r\n\r\n            var ellipsoid = Cesium.Ellipsoid.WGS84;\r\n            var pixelRatio = window.devicePixelRatio || 1;\r\n\r\n            var c2 = new Cesium.Cartesian2(-offset, -offset);\r\n            var leftTop = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\r\n\r\n            c2 = new Cesium.Cartesian2(\r\n                (this.viewer.scene.canvas.width / pixelRatio) + offset,\r\n                (this.viewer.scene.canvas.height / pixelRatio) + offset\r\n            );\r\n\r\n            var rightDown = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\r\n            if(leftTop != null && rightDown != null){\r\n\r\n                leftTop = ellipsoid.cartesianToCartographic(leftTop);\r\n                rightDown = ellipsoid.cartesianToCartographic(rightDown);\r\n\r\n                // sometimes at a certain camera pos/zoom, the canvas corners effectively disappear over\r\n                // the horizon and wrap around the globe, while still passing as a valid rectangle\r\n                if(leftTop.longitude > rightDown.longitude){\r\n                    return this.defaultExtent;\r\n                }\r\n\r\n                return {\r\n                    west: Cesium.Math.toDegrees(leftTop.longitude),\r\n                    south: Cesium.Math.toDegrees(rightDown.latitude),\r\n                    east: Cesium.Math.toDegrees(rightDown.longitude),\r\n                    north: Cesium.Math.toDegrees(leftTop.latitude)\r\n                };\r\n            }\r\n\r\n            // The sky is visible, fallback to default\r\n            else {\r\n                return this.defaultExtent;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.zoom', [])\r\n        .factory(\"zoomLevelService\", [\"$rootScope\", \"rocksConfigService\",\r\n            (\r\n                $rootScope:ng.IRootScopeService,\r\n                rocksConfigService: rpComponents.config.IRocksConfigService\r\n            ) => new rpComponents.zoom.ZoomLevelService($rootScope, rocksConfigService)]);\r\n\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var config;\n    (function (config_1) {\n        'use strict';\n        var RocksConfigService = (function () {\n            function RocksConfigService($rootScope) {\n                this.$rootScope = $rootScope;\n            }\n            RocksConfigService.prototype.setConfig = function (config, viewer) {\n                this.config = config;\n                this.viewer = viewer;\n                this.$rootScope.$broadcast(\"rocks.config.ready\");\n            };\n            RocksConfigService.$inject = [\n                \"$rootScope\"\n            ];\n            return RocksConfigService;\n        }());\n        config_1.RocksConfigService = RocksConfigService;\n        angular\n            .module('explorer.rockproperties.config', [])\n            .factory(\"rocksConfigService\", [\"$rootScope\",\n            function ($rootScope) {\n                return new rpComponents.config.RocksConfigService($rootScope);\n            }]);\n    })(config = rpComponents.config || (rpComponents.config = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n *\n * Handles the arbitrary 'zoom' levels/ranges that we will display different cluster granularities.\n *\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var zoom;\n    (function (zoom) {\n        'use strict';\n        var ZoomLevelService = (function () {\n            function ZoomLevelService($rootScope, rocksConfigService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.zoomLevels = [\n                    5000,\n                    10000,\n                    20000,\n                    30000,\n                    50000,\n                    80000,\n                    200000,\n                    1000000,\n                    1500000,\n                    2000000,\n                    4000000,\n                    6500000,\n                    // these's tiles are pretty broad\n                    8500000,\n                    10000000,\n                    15000000,\n                    100000000\n                ];\n                this.defaultExtent = {\n                    \"west\": 109,\n                    \"south\": -45,\n                    \"east\": 158,\n                    \"north\": -8\n                };\n                this.moveEndHandler = function () {\n                    _this.nextPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.position);\n                    // changed indexes or exceed threshold for pan, trigger recluster\n                    if ((_this.previousPosition.height > -1 && _this.getIndex(_this.previousPosition.height) != _this.nextIndex) ||\n                        (Math.abs(_this.nextPosition.latitude - _this.previousPosition.latitude) > 0.01 / _this.nextIndex ||\n                            Math.abs(_this.nextPosition.longitude - _this.previousPosition.longitude) > 0.01 / _this.nextIndex) ||\n                        _this.nextIndex == 16) {\n                        _this.$rootScope.$broadcast('rocks.clusters.update', _this.nextIndex);\n                    }\n                    console.log(\"INDEX = \" + _this.nextIndex + \" HEIGHT = \" + Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.position).height);\n                    _this.previousPosition = _this.nextPosition;\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.viewer = _this.rocksConfigService.viewer;\n                });\n            }\n            Object.defineProperty(ZoomLevelService.prototype, \"nextIndex\", {\n                get: function () {\n                    return this.getIndex(this.nextPosition.height);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             *\n             * Get the lowest index the height fits into\n             *\n             * @param height\n             * @returns {number}\n             */\n            ZoomLevelService.prototype.getIndex = function (height) {\n                for (var i = 0; i < this.zoomLevels.length; i++) {\n                    if (height < this.zoomLevels[i]) {\n                        return this.zoomLevels.length - i;\n                    }\n                }\n                return this.zoomLevels.length - 1;\n            };\n            ZoomLevelService.prototype.setActive = function (active) {\n                if (active) {\n                    // TODO extent\n                    this.nextPosition = this.previousPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.viewer.camera.position);\n                    this.viewer.camera.moveEnd.addEventListener(this.moveEndHandler);\n                }\n                else {\n                    this.viewer.camera.moveEnd.removeEventListener(this.moveEndHandler);\n                }\n            };\n            /**\n             *\n             * WKT? GeoJSON? - leave until approach is clearer.\n             * TODO this is here temporarily, more thought needed re managing the buffered extent currently handled by minimap.\n             *\n             * @param offset\n             * @returns {any}\n             */\n            ZoomLevelService.prototype.getViewExtent = function (offset) {\n                var ellipsoid = Cesium.Ellipsoid.WGS84;\n                var pixelRatio = window.devicePixelRatio || 1;\n                var c2 = new Cesium.Cartesian2(-offset, -offset);\n                var leftTop = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\n                c2 = new Cesium.Cartesian2((this.viewer.scene.canvas.width / pixelRatio) + offset, (this.viewer.scene.canvas.height / pixelRatio) + offset);\n                var rightDown = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\n                if (leftTop != null && rightDown != null) {\n                    leftTop = ellipsoid.cartesianToCartographic(leftTop);\n                    rightDown = ellipsoid.cartesianToCartographic(rightDown);\n                    // sometimes at a certain camera pos/zoom, the canvas corners effectively disappear over\n                    // the horizon and wrap around the globe, while still passing as a valid rectangle\n                    if (leftTop.longitude > rightDown.longitude) {\n                        return this.defaultExtent;\n                    }\n                    return {\n                        west: Cesium.Math.toDegrees(leftTop.longitude),\n                        south: Cesium.Math.toDegrees(rightDown.latitude),\n                        east: Cesium.Math.toDegrees(rightDown.longitude),\n                        north: Cesium.Math.toDegrees(leftTop.latitude)\n                    };\n                }\n                else {\n                    return this.defaultExtent;\n                }\n            };\n            ZoomLevelService.$inject = [\n                \"$rootScope\",\n                \"rocksConfigService\"\n            ];\n            return ZoomLevelService;\n        }());\n        zoom.ZoomLevelService = ZoomLevelService;\n        angular\n            .module('explorer.rockproperties.zoom', [])\n            .factory(\"zoomLevelService\", [\"$rootScope\", \"rocksConfigService\",\n            function ($rootScope, rocksConfigService) {\n                return new rpComponents.zoom.ZoomLevelService($rootScope, rocksConfigService);\n            }]);\n    })(zoom = rpComponents.zoom || (rpComponents.zoom = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"charts\" />\n/// <reference path=\"config\" />\n/// <reference path=\"cluster-filters\" />\n/// <reference path=\"cluster-inspector\" />\n/// <reference path=\"zoom\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterService;\n    (function (clusterService) {\n        'use strict';\n        var ClusterHeightWeighter = (function () {\n            function ClusterHeightWeighter() {\n            }\n            ClusterHeightWeighter.prototype.calculateWeighting = function (zoom) {\n                return Math.pow(1.43, zoom);\n            };\n            return ClusterHeightWeighter;\n        }());\n        clusterService.ClusterHeightWeighter = ClusterHeightWeighter;\n        var ClusterService = (function () {\n            function ClusterService($http, $rootScope, zoomLevelService, clusterChartService, loadingSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.zoomLevelService = zoomLevelService;\n                this.clusterChartService = clusterChartService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterInspectorService = clusterInspectorService;\n                this.clusterFilterState = clusterFilterState;\n                this.clusterRangeMeta = {\n                    maxExtrudeHeight: 6000000\n                };\n                this.clusterFilter = '';\n                /**\n                 *\n                 * We get a performance benefit when we use fewer\n                 * primitives/collections to draw multiple static geometries.\n                 *\n                 */\n                this.reCluster = function () {\n                    var clusterInstances = [];\n                    var labelCollection = new Cesium.LabelCollection();\n                    _this.getClusters().then(function (response) {\n                        if (response.data && response.data.features) {\n                            var clusters = response.data.features;\n                            // use d3 to build a scale for our extrude heights; we need to build a diff scale\n                            // for each zoom level, as we can't guarantee they'll start at the top and work down\n                            // (if we add persistence)\n                            var maxCorrection = new ClusterHeightWeighter().calculateWeighting(_this.zoomLevelService.nextIndex);\n                            _this.clusterRangeMeta.maxCount = d3.max(clusters, function (d) { return d.properties.count; });\n                            _this.clusterRangeMeta.scale = d3.scale.linear()\n                                .domain([0, _this.clusterRangeMeta.maxCount])\n                                .range([0, _this.clusterRangeMeta.maxExtrudeHeight / maxCorrection]);\n                            for (var i = 0; i < clusters.length; i++) {\n                                // tag id with type for pick handling\n                                clusters[i].properties['featureType'] = 'rockPropsCluster';\n                                var clusterProps = _this.computeClusterAttributes(clusters[i].properties.count);\n                                clusterInstances.push(_this.buildClusterInstance(clusters[i], clusterProps));\n                                labelCollection.add(_this.buildLabel(clusters[i], clusterProps)); // No lables for the short term\n                            }\n                            _this.drawClusters(clusterInstances, labelCollection);\n                        }\n                        else {\n                            console.log(\"got no clusters\");\n                            console.log(response);\n                        }\n                    });\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.viewer = _this.rocksConfigService.viewer;\n                    _this.serviceUrl = _this.rocksConfigService.config.rocksServiceUrl;\n                });\n                this.$rootScope.$on('rocks.clusters.update', function () {\n                    _this.reCluster();\n                });\n            }\n            ClusterService.prototype.toggleClusters = function () {\n                if (this.clustersCollection) {\n                    this.clustersCollection.show = !this.clustersCollection.show;\n                    this.zoomLevelService.setActive(this.clustersCollection.show);\n                    if (this.clustersCollection.show) {\n                        this.clusterInspectorService.setPickEnabled(true);\n                    }\n                    else {\n                        this.clusterInspectorService.setPickEnabled(false);\n                    }\n                    this.reCluster();\n                }\n                else {\n                    this.clustersCollection = new Cesium.PrimitiveCollection();\n                    this.viewer.scene.primitives.add(this.clustersCollection);\n                    this.zoomLevelService.setActive(true);\n                    this.reCluster();\n                    this.clusterInspectorService.setPickEnabled(true);\n                }\n                return this.clustersCollection.show;\n            };\n            /**\n             *\n             * TODO filters\n             *\n             * @returns {IHttpPromise<T>}\n             */\n            ClusterService.prototype.getClusters = function () {\n                var west = this.zoomLevelService.getViewExtent(100).west;\n                var east = this.zoomLevelService.getViewExtent(100).east;\n                var north = this.zoomLevelService.getViewExtent(100).north;\n                var south = this.zoomLevelService.getViewExtent(100).south;\n                var dx = (east - west) * .2;\n                var dy = (north - south) * .2;\n                // args\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&xmin=' + above(west - dx, -180) +\n                    '&xmax=' + below(east + dx, 180) +\n                    '&ymin=' + above(south - dy, -90) +\n                    '&ymax=' + below(north + dy, 90) +\n                    this.clusterFilterState.filterQuery;\n                console.log(\"summary query: \" + this.serviceUrl + args);\n                return this.$http({\n                    method: 'GET',\n                    // real service\n                    url: this.serviceUrl + 'summary' + args\n                });\n                function above(value, limit) {\n                    return value < limit ? limit : value;\n                }\n                function below(value, limit) {\n                    return value > limit ? limit : value;\n                }\n            };\n            ClusterService.prototype.drawClusters = function (instances, labelCollection) {\n                this.clustersCollection.removeAll();\n                this.clusterPrimitive = new Cesium.Primitive({\n                    geometryInstances: instances,\n                    appearance: new Cesium.PerInstanceColorAppearance({\n                        translucent: true,\n                        closed: true\n                    })\n                });\n                this.clusterInspectorService.setClusterPrimitive((this.clusterPrimitive));\n                this.clustersCollection.add(this.clusterPrimitive);\n                this.clustersCollection.add(labelCollection);\n            };\n            ClusterService.prototype.buildClusterInstance = function (cluster, clusterProps) {\n                return new Cesium.GeometryInstance({\n                    geometry: new Cesium.CircleGeometry({\n                        center: Cesium.Cartesian3.fromDegrees(cluster.geometry.coordinates[0], cluster.geometry.coordinates[1]),\n                        radius: clusterProps.radius,\n                        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,\n                        extrudedHeight: clusterProps.extrudeHeight\n                    }),\n                    id: cluster,\n                    attributes: {\n                        color: Cesium.ColorGeometryInstanceAttribute.fromColor(clusterProps.color)\n                    }\n                });\n            };\n            ClusterService.prototype.buildLabel = function (cluster, clusterProps) {\n                return {\n                    position: Cesium.Cartesian3.fromDegrees(cluster.geometry.coordinates[0], cluster.geometry.coordinates[1], clusterProps.extrudeHeight + clusterProps.radius + 30),\n                    text: cluster.properties.count.toString(),\n                    fillColor: Cesium.Color.BLACK,\n                    outlineColor: Cesium.Color.RED,\n                    // TODO review labelling\n                    font: (26 - (this.zoomLevelService.nextIndex * 0.2)) + 'px arial, sans-serif',\n                    horizontalOrigin: Cesium.HorizontalOrigin.CENTER,\n                    id: cluster\n                };\n            };\n            ClusterService.prototype.computeClusterAttributes = function (count) {\n                var radius = this.zoomLevelService.zoomLevels[this.zoomLevelService.zoomLevels.length - this.zoomLevelService.nextIndex] / 150;\n                var maxHeight = this.zoomLevelService.nextPosition.height * 0.6;\n                var extrudeHeight = this.clusterRangeMeta.scale(count) / Math.pow(this.zoomLevelService.nextIndex / 3, 1.15);\n                if (extrudeHeight > maxHeight) {\n                    extrudeHeight = maxHeight;\n                }\n                if (radius > maxHeight / 20) {\n                    console.log(\"To big!\");\n                    radius = maxHeight / 20;\n                }\n                var attrs = {\n                    // tweak these to scale cluster size/extrude on zoom\n                    radius: radius,\n                    extrudeHeight: extrudeHeight\n                };\n                if (count < 100) {\n                    attrs.color = Cesium.Color.fromCssColorString('#4781cd').withAlpha(0.5);\n                }\n                else if (count < 1000) {\n                    attrs.radius *= 1.3;\n                    attrs.color = Cesium.Color.fromCssColorString('#0fc70e').withAlpha(0.5);\n                }\n                else {\n                    attrs.radius *= 1.6;\n                    attrs.color = Cesium.Color.fromCssColorString('#ff0000').withAlpha(0.5);\n                }\n                return attrs;\n            };\n            ClusterService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"zoomLevelService\",\n                \"clusterChartService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterInspectorService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterService;\n        }());\n        clusterService.ClusterService = ClusterService;\n        angular\n            .module('explorer.rockproperties.clusters', [])\n            .factory(\"clusterService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"zoomLevelService\",\n            \"clusterChartService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterInspectorService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                return new rpComponents.clusterService.ClusterService($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState);\n            }]);\n    })(clusterService = rpComponents.clusterService || (rpComponents.clusterService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"clusters\" />\nvar rpComponents;\n(function (rpComponents) {\n    var controlPanel;\n    (function (controlPanel) {\n        'use strict';\n        var RocksPanelCtrl = (function () {\n            function RocksPanelCtrl($scope, rocksPanelService, wmsInspectorService) {\n                var _this = this;\n                this.$scope = $scope;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorService = wmsInspectorService;\n                this.targetPanel = '';\n                this.$scope.$on(\"rocks.accordion.update\", function (event, data) {\n                    _this.targetPanel = data;\n                });\n            }\n            RocksPanelCtrl.prototype.setTargetPanel = function (targetPanel) {\n                this.targetPanel = (this.targetPanel != targetPanel) ? targetPanel : \"\";\n            };\n            RocksPanelCtrl.$inject = [\"$scope\", \"rocksPanelService\", \"wmsInspectorService\"];\n            return RocksPanelCtrl;\n        }());\n        controlPanel.RocksPanelCtrl = RocksPanelCtrl;\n        var RocksPanelService = (function () {\n            function RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                this.$rootScope = $rootScope;\n                this.clusterService = clusterService;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksConfigService = rocksConfigService;\n                this.clustersEnabled = false;\n                this.pointsEnabled = false;\n            }\n            /**\n             *\n             * The entry point for the component.\n             *\n             * @param viewer\n             * @param clusterServiceUrl\n             * @param wmsServiceUrl\n             * @param pickEnabled\n             */\n            RocksPanelService.prototype.init = function (viewer, config) {\n                this.viewer = viewer;\n                this.rocksConfigService.setConfig(config, viewer);\n            };\n            RocksPanelService.prototype.toggleClusters = function () {\n                this.clustersEnabled = this.clusterService.toggleClusters();\n            };\n            RocksPanelService.prototype.togglePoints = function () {\n                this.pointsEnabled = this.wmsPointsService.togglePoints();\n            };\n            RocksPanelService.$inject = [\n                \"$rootScope\",\n                \"clusterService\",\n                \"wmsPointsService\",\n                \"rocksConfigService\"\n            ];\n            return RocksPanelService;\n        }());\n        controlPanel.RocksPanelService = RocksPanelService;\n        angular\n            .module('explorer.rockproperties.controlpanel', [])\n            .factory(\"rocksPanelService\", [\n            \"$rootScope\", \"clusterService\", \"wmsPointsService\", \"rocksConfigService\",\n            function ($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                return new rpComponents.controlPanel.RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksPanelCtrl\", RocksPanelCtrl)\n            .directive(\"rocksControlPanel\", function () {\n            return {\n                templateUrl: 'rockprops/control-panel.html',\n                controller: RocksPanelCtrl,\n                controllerAs: 'controlPanelVM'\n            };\n        });\n    })(controlPanel = rpComponents.controlPanel || (rpComponents.controlPanel = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"control-panel\" />\n/// <reference path=\"spinner\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterInspector;\n    (function (clusterInspector) {\n        'use strict';\n        var ClusterInspectorCtrl = (function () {\n            function ClusterInspectorCtrl($scope, clusterInspectorService, rocksPanelService) {\n                this.$scope = $scope;\n                this.clusterInspectorService = clusterInspectorService;\n                this.rocksPanelService = rocksPanelService;\n            }\n            ClusterInspectorCtrl.$inject = [\"$scope\", \"clusterInspectorService\", \"rocksPanelService\"];\n            return ClusterInspectorCtrl;\n        }());\n        clusterInspector.ClusterInspectorCtrl = ClusterInspectorCtrl;\n        var PagingState = (function () {\n            function PagingState(count, total) {\n                this.count = count;\n                this.total = total;\n            }\n            PagingState.prototype.more = function () {\n                return this.total > this.count;\n            };\n            return PagingState;\n        }());\n        clusterInspector.PagingState = PagingState;\n        var ClusterInspectorService = (function () {\n            function ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, loadingSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.$timeout = $timeout;\n                this.zoomLevelService = zoomLevelService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterChartService = clusterChartService;\n                this.clusterFilterState = clusterFilterState;\n                this.inspectMode = \"CHART\";\n                this.listReady = false;\n                // TODO decide reasonable step size when plugged into real service\n                this.maxListStep = 100;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            /**\n             *\n             \n             * @param viewer\n             * @param summaryService\n             * @param usePicking\n             */\n            ClusterInspectorService.prototype.init = function () {\n                var _this = this;\n                this.viewer = this.rocksConfigService.viewer;\n                this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\n                // setup our pick handler\n                if (this.rocksConfigService.config.useClusterPicking) {\n                    this.pickHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\n                    this.pickHandlerAction = function (movement) {\n                        var pick = _this.viewer.scene.pick(movement.position);\n                        if (Cesium.defined(pick) && Cesium.defined(pick.id) && pick.id.hasOwnProperty('properties') && pick.id.properties.featureType == 'rockPropsCluster') {\n                            _this.listReady = false;\n                            _this.clearHighlighted();\n                            _this.targetId = pick.id;\n                            _this.setHighlighted(_this.targetId, true);\n                            _this.targetPos = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.pickEllipsoid(movement.position));\n                            if (_this.inspectMode == \"CHART\") {\n                                _this.chartClusterQuery();\n                            }\n                            else {\n                                _this.listIndex = 0;\n                                _this.listClusterQuery();\n                            }\n                        }\n                    };\n                }\n            };\n            /**\n             *\n             * Gets a summary of cluster data to pass to chartService.\n             *\n             * @param cluster\n             */\n            ClusterInspectorService.prototype.chartClusterQuery = function () {\n                var _this = this;\n                //  spinner for summary chart load\n                if (this.summarySpinner) {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'block';\n                }\n                else {\n                    this.summarySpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-summary-chart-loading\",\n                        id: \"chart-spinner\"\n                    });\n                    this.summarySpinner();\n                }\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&x=' + Cesium.Math.toDegrees(this.targetPos.longitude) +\n                    '&y=' + Cesium.Math.toDegrees(this.targetPos.latitude) +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'query' + args;\n                console.log(\"query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.clusterChartService.buildChart(response.data);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector summary charts');\n            };\n            ClusterInspectorService.prototype.loadNextListStep = function () {\n                this.listIndex += this.maxListStep;\n                console.log(\"loadNextListStep \" + this.listIndex);\n                this.listClusterQuery();\n            };\n            ClusterInspectorService.prototype.listClusterQuery = function () {\n                var _this = this;\n                console.log(\"listClusterQuery\");\n                //  spinner for summary chart load\n                if (this.listSpinner) {\n                    document.getElementById(\"cluster-result-list-loading\").style.display = 'block';\n                }\n                else {\n                    this.listSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-result-list-loading\",\n                        id: \"cluster-result-list-spinner\"\n                    });\n                    this.listSpinner();\n                }\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&maxCount=' + this.maxListStep +\n                    '&startIndex=' + this.listIndex +\n                    '&x=' + Cesium.Math.toDegrees(this.targetPos.longitude) +\n                    '&y=' + Cesium.Math.toDegrees(this.targetPos.latitude) +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'features' + args;\n                console.log(\"features query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    // mock\n                    //url: this.serviceUrl + '/mock-feature-list.json'\n                    // real service\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.$timeout(function () {\n                            document.getElementById(\"cluster-result-list-loading\").style.display = 'none';\n                            _this.listReady = true;\n                            // step, merge features\n                            if (_this.listIndex != 0) {\n                                _this.listFeatures.features = _this.listFeatures.features.concat(response.data.features);\n                            }\n                            else {\n                                _this.listFeatures = response.data;\n                            }\n                            var morePages = _this.listFeatures.features.length < _this.listFeatures.totalFeatures;\n                            _this.pagingState = new PagingState(_this.listFeatures.features.length, _this.listFeatures.totalFeatures);\n                        }, 1000);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector feature list (startIndex: ' + this.listIndex + ')');\n            };\n            ClusterInspectorService.prototype.setPickEnabled = function (enabled) {\n                if (enabled) {\n                    this.pickHandler.setInputAction(this.pickHandlerAction, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n                }\n                else {\n                    this.pickHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n                }\n            };\n            ClusterInspectorService.prototype.setClusterPrimitive = function (primitive) {\n                this.clusterPrimitive = primitive;\n            };\n            ClusterInspectorService.prototype.setHighlighted = function (id, highlight) {\n                var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(id);\n                if (attributes && highlight) {\n                    attributes.prevColor = attributes.color;\n                    attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.fromCssColorString('#ff00ff').withAlpha(1));\n                }\n            };\n            ClusterInspectorService.prototype.clearHighlighted = function () {\n                if (this.targetId) {\n                    var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(this.targetId);\n                    if (attributes && attributes.hasOwnProperty('prevColor')) {\n                        attributes.color = attributes.prevColor;\n                    }\n                }\n            };\n            ClusterInspectorService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"$timeout\",\n                \"zoomLevelService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterChartService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterInspectorService;\n        }());\n        clusterInspector.ClusterInspectorService = ClusterInspectorService;\n        angular\n            .module('explorer.rockproperties.clusterinspector', [])\n            .controller(\"clusterInspectorCtrl\", ClusterInspectorCtrl)\n            .directive(\"rocksClusterInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-inspector.html',\n                controller: ClusterInspectorCtrl,\n                controllerAs: 'clusterInspectorVM'\n            };\n        })\n            .factory(\"clusterInspectorService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"$timeout\",\n            \"zoomLevelService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterChartService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                return new rpComponents.clusterInspector.ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState);\n            }]);\n    })(clusterInspector = rpComponents.clusterInspector || (rpComponents.clusterInspector = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorState;\n    (function (wmsInspectorState) {\n        'use strict';\n        /*\n            The WMS inspector panel can be in 1 of 3 view states:\n            1. INTRO - the default/home shows prompt\n            2. LAYERSELECT - user presented with layers to interrogate with GetFeatureInfo when\n            they have clicked a point on the map\n            3. FEATUREINFO - view to present raw html returned by GetFeatureInfo\n         */\n        var WmsInspectorState = (function () {\n            function WmsInspectorState() {\n                this.view = \"INTRO\";\n            }\n            return WmsInspectorState;\n        }());\n        wmsInspectorState.WmsInspectorState = WmsInspectorState;\n        angular\n            .module('explorer.rockproperties.inspectorstate', [])\n            .factory(\"wmsInspectorState\", [function () { return new rpComponents.wmsInspectorState.WmsInspectorState(); }]);\n    })(wmsInspectorState = rpComponents.wmsInspectorState || (rpComponents.wmsInspectorState = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"spinner\" />\n/// <reference path=\"clipship\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorService;\n    (function (wmsInspectorService_1) {\n        'use strict';\n        var WmsInspectorCtrl = (function () {\n            function WmsInspectorCtrl($scope, wmsInspectorState, wmsInspectorService) {\n                this.$scope = $scope;\n                this.wmsInspectorState = wmsInspectorState;\n                this.wmsInspectorService = wmsInspectorService;\n            }\n            WmsInspectorCtrl.$inject = [\"$scope\", \"wmsInspectorState\", \"wmsInspectorService\"];\n            return WmsInspectorCtrl;\n        }());\n        wmsInspectorService_1.WmsInspectorCtrl = WmsInspectorCtrl;\n        var WmsInspectorService = (function () {\n            function WmsInspectorService($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.$http = $http;\n                this.wmsInspectorState = wmsInspectorState;\n                this.assetsService = assetsService;\n                this.configService = configService;\n                this.rocksConfigService = rocksConfigService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.isLoading = false;\n                this.URL_EXCLUDE = \"?SERVICE=WMS&\";\n                this.SURFACE_GEO = \"GA_Surface_Geology_of_Australia\";\n                this.$inject = [\n                    \"$rootScope\",\n                    \"$http\",\n                    \"wmsInspectorState\",\n                    \"assetsService\",\n                    \"configService\",\n                    \"rocksConfigService\",\n                    \"loadingSpinnerService\",\n                    \"gwsUtilService\",\n                    \"rocksClipShipService\"\n                ];\n                // register listener for pointInspector\n                this.$rootScope.$on(\"viewer.click.left\", function (event, data) {\n                    data.degrees = {\n                        lat: Cesium.Math.toDegrees(data.cartographic.latitude),\n                        lon: Cesium.Math.toDegrees(data.cartographic.longitude)\n                    };\n                    // TODO should flasher for this so user knows why\n                    // (we don't want inspector interuppting clipship drawing)\n                    if (_this.rocksClipShipService.isDrawing) {\n                        return;\n                    }\n                    if (_this.inspectorEnabled && data.hasOwnProperty('cartographic')) {\n                        // make sure panel is visible\n                        _this.$rootScope.$broadcast(\"rocks.accordion.update\", \"wmsInspector\");\n                        _this.$rootScope.$broadcast(\"toolbar.toggle.update\", { linked: false, key: \"rocksClusters\", isActive: true });\n                        _this.wmsInspectorState.targetGeom = data;\n                        _this.wmsInspectorState.view = \"LAYERSELECT\";\n                        _this.wmsInspectorState.cameraHeight = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.rocksConfigService.viewer.camera.position).height;\n                    }\n                });\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    // load feature classes\n                    assetsService.getReferenceFeatureClasses().then(function (features) {\n                        _this.features = features;\n                    });\n                    // init rocks feature\n                    _this.rocksFeature = {\n                        wmsUrl: _this.rocksConfigService.config.geoserverWmsUrl,\n                        name: 'Rock Properties Layer'\n                    };\n                });\n            }\n            WmsInspectorService.prototype.togglePointInspector = function () {\n                this.inspectorEnabled != this.inspectorEnabled;\n            };\n            // TODO we should restrict the query to visible layers\n            WmsInspectorService.prototype.queryRocks = function () {\n                if (!this.rocksFeature.hasOwnProperty('layers') && this.gwsUtilService.wmsLayerNames) {\n                    this.rocksFeature.layers = [];\n                    for (var i = 0; i < this.gwsUtilService.wmsLayerNames.length; i++) {\n                        this.rocksFeature.layers.push(this.rocksConfigService.config.geoserverWmsLayerPrefix +\n                            this.gwsUtilService.wmsLayerNames[i]);\n                    }\n                }\n                this.queryFeature(this.rocksFeature);\n            };\n            WmsInspectorService.prototype.queryFeature = function (feature) {\n                var _this = this;\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'wms inspector query: ' + feature.name);\n                // set view\n                this.wmsInspectorState.view = \"FEATUREINFO\";\n                this.toggleLoading();\n                var targetUrl = feature.wmsUrl;\n                var targetLayers = feature.layers;\n                // clean any endpoints already containing '?'\n                if (targetUrl.indexOf(this.URL_EXCLUDE) > -1) {\n                    targetUrl = targetUrl.substring(0, (targetUrl.length - this.URL_EXCLUDE.length));\n                }\n                // surface geology has scale dependencies, so we need to check\n                // zoom (aka camera height) to ensure we query the correct layer\n                if (targetUrl.indexOf(this.SURFACE_GEO) > -1) {\n                    if (this.wmsInspectorState.cameraHeight <= 340000) {\n                        targetLayers = [targetLayers[0]];\n                    }\n                    else {\n                        targetLayers = [targetLayers[1]];\n                    }\n                }\n                var queryString = '?SERVICE=WMS' +\n                    '&REQUEST=GetFeatureInfo' +\n                    '&VERSION=1.1.1' +\n                    '&LAYERS=' + targetLayers +\n                    '&STYLES=' +\n                    '&SRS=EPSG%3A4326' +\n                    '&FORMAT=image%2Fpng' +\n                    // we use the click pos as the bottom left corner\n                    // and offset the top right by ~30 meters\n                    // (can be hard to click on a point if res is too fine)\n                    '&BBOX=' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon + 0.003) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat + 0.003) +\n                    '&QUERY_LAYERS=' + targetLayers +\n                    '&INFO_FORMAT=text%2Fhtml' +\n                    '&FEATURE_COUNT=100' +\n                    '&WIDTH=2' +\n                    '&HEIGHT=2' +\n                    '&X=1' +\n                    '&Y=1' +\n                    '&TRANSPARENT=true' +\n                    '&EXCEPTIONS=application%2Fvnd.ogc.se_xml';\n                // send the query\n                this.$http.get(targetUrl + queryString).success(function (data) {\n                    _this.featureInfo = data;\n                    _this.toggleLoading();\n                })\n                    .error(function (data, status, headers, config) {\n                    console.log(\"Couldn't load WMS GetFeatureInfo\");\n                    this.featureInfo = \"<h5>Couldn't load WMS GetFeatureInfo for this layer.</h5><p>You may not be able to access this function for some layers.</p>\";\n                    this.toggleLoading();\n                });\n            };\n            WmsInspectorService.prototype.toggleLoading = function () {\n                if (this.loadingSpinner) {\n                    this.isLoading = !this.isLoading;\n                }\n                else {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 60,\n                        height: 60,\n                        container: \"#rocks-inspector-loading\",\n                        id: \"rocks-inspector-spinner\"\n                    });\n                    this.loadingSpinner();\n                    this.isLoading = true;\n                }\n            };\n            return WmsInspectorService;\n        }());\n        wmsInspectorService_1.WmsInspectorService = WmsInspectorService;\n        angular\n            .module('explorer.rockproperties.inspector', [])\n            .factory(\"wmsInspectorService\", [\n            \"$rootScope\",\n            \"$http\",\n            \"wmsInspectorState\",\n            \"assetsService\",\n            \"configService\",\n            \"rocksConfigService\",\n            \"loadingSpinnerService\",\n            \"gwsUtilService\",\n            \"rocksClipShipService\",\n            function ($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                return new rpComponents.wmsInspectorService.WmsInspectorService($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService);\n            }])\n            .controller(\"wmsInspectorCtrl\", rpComponents.wmsInspectorService.WmsInspectorCtrl)\n            .directive(\"wmsInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/wms-inspector-panel.html',\n                controller: WmsInspectorCtrl,\n                controllerAs: 'wmsInspectorVM'\n            };\n        });\n    })(wmsInspectorService = rpComponents.wmsInspectorService || (rpComponents.wmsInspectorService = {}));\n})(rpComponents || (rpComponents = {}));\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n/// <reference path=\"charts\" />\r\n/// <reference path=\"config\" />\r\n/// <reference path=\"cluster-filters\" />\r\n/// <reference path=\"cluster-inspector\" />\r\n/// <reference path=\"zoom\" />\r\n\r\ndeclare var Cesium: any;\r\ndeclare var d3: any;\r\n\r\nmodule rpComponents.clusterService {\r\n\r\n    'use strict';\r\n\r\n    export interface IClusterService {\r\n\r\n        viewer: any;\r\n        serviceUrl: string;\r\n        clustersCollection: any;\r\n        clusterFilter: string;\r\n\r\n        toggleClusters(): boolean;\r\n        getClusters(filters?: string): any;\r\n        reCluster(filters?: string): void;\r\n        buildClusterInstance(cluster: any, props: any): any;\r\n        // buildLabel(cluster: any, props: any): any; // No labels at the moment\r\n        drawClusters(sphereInstances: any, labelCollection: any): void;\r\n    }\r\n\r\n    export interface IClusterHeightWeighter {\r\n        calculateWeighting(zoom: number): number;\r\n    }\r\n\r\n    export class ClusterHeightWeighter implements IClusterHeightWeighter {\r\n        calculateWeighting(zoom: number): number {\r\n            return Math.pow(1.43, zoom);\r\n        }\r\n    }\r\n\r\n    export class ClusterService implements IClusterService {\r\n\r\n        viewer: any;\r\n        serviceUrl: string;\r\n        clusterPrimitive: any;\r\n        clustersCollection: any;\r\n        clusterRangeMeta: any = {\r\n            maxExtrudeHeight: 6000000\r\n        };\r\n        clusterFilter: string = '';\r\n\r\n        static $inject = [\r\n            \"$http\",\r\n            \"$rootScope\",\r\n            \"zoomLevelService\",\r\n            \"clusterChartService\",\r\n            \"loadingSpinnerService\",\r\n            \"rocksConfigService\",\r\n            \"clusterInspectorService\",\r\n            \"clusterFilterState\"\r\n        ];\r\n\r\n        constructor(\r\n            public $http: ng.IHttpService,\r\n            public $rootScope: ng.IRootScopeService,\r\n            public zoomLevelService: rpComponents.zoom.IZoomLevelService,\r\n            public clusterChartService: rpComponents.chartService.IClusterChartService,\r\n            public loadingSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n            public rocksConfigService: rpComponents.config.IRocksConfigService,\r\n            public clusterInspectorService: rpComponents.clusterInspector.IClusterInspectorService,\r\n            public clusterFilterState: rpComponents.filters.IClusterFilterState\r\n\r\n        ) {\r\n            this.$rootScope.$on('rocks.config.ready', () => {\r\n                this.viewer = this.rocksConfigService.viewer;\r\n                this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\r\n            });\r\n\r\n            this.$rootScope.$on('rocks.clusters.update', () => {\r\n                this.reCluster();\r\n            });\r\n        }\r\n\r\n        toggleClusters(): boolean {\r\n\r\n            if(this.clustersCollection){\r\n\r\n                this.clustersCollection.show = !this.clustersCollection.show;\r\n                this.zoomLevelService.setActive(this.clustersCollection.show);\r\n\r\n                if(this.clustersCollection.show){\r\n                    this.clusterInspectorService.setPickEnabled(true);\r\n                }\r\n                else {\r\n                    this.clusterInspectorService.setPickEnabled(false);\r\n                }\r\n\r\n                this.reCluster();\r\n            }\r\n\r\n            // init clusters\r\n            else {\r\n                this.clustersCollection = new Cesium.PrimitiveCollection();\r\n                this.viewer.scene.primitives.add(this.clustersCollection);\r\n                this.zoomLevelService.setActive(true);\r\n                this.reCluster();\r\n                this.clusterInspectorService.setPickEnabled(true);\r\n            }\r\n\r\n            return this.clustersCollection.show;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * TODO filters\r\n         *\r\n         * @returns {IHttpPromise<T>}\r\n         */\r\n        public getClusters(): any {\r\n            var west = this.zoomLevelService.getViewExtent(100).west;\r\n            var east = this.zoomLevelService.getViewExtent(100).east;\r\n            var north = this.zoomLevelService.getViewExtent(100).north;\r\n            var south = this.zoomLevelService.getViewExtent(100).south;\r\n            var dx = (east - west) * .2;\r\n            var dy = (north - south) * .2;\r\n\r\n            // args\r\n            var args: string =\r\n                '?zoom='+this.zoomLevelService.nextIndex +\r\n                '&xmin='+ above(west - dx, -180) +\r\n                '&xmax='+ below(east + dx, 180) +\r\n                '&ymin='+ above(south - dy, -90) +\r\n                '&ymax='+ below(north + dy, 90) +\r\n                this.clusterFilterState.filterQuery;\r\n\r\n            console.log(\"summary query: \"+this.serviceUrl + args);\r\n\r\n            return this.$http({\r\n                method: 'GET',\r\n\r\n                // real service\r\n                url: this.serviceUrl + 'summary' + args\r\n            });\r\n            \r\n            function above(value:number, limit:number): number {\r\n                return value < limit? limit: value;\r\n            }\r\n            \r\n            function below(value:number, limit:number): number {\r\n                return value > limit? limit: value;\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * We get a performance benefit when we use fewer\r\n         * primitives/collections to draw multiple static geometries.\r\n         *\r\n         */\r\n        reCluster = (): void => {\r\n\r\n            var clusterInstances: any = [];\r\n            var labelCollection: any = new Cesium.LabelCollection();\r\n\r\n            this.getClusters().then((response: any) => {\r\n\r\n                if(response.data && response.data.features){\r\n                    var clusters: [any] = response.data.features;\r\n\r\n                    // use d3 to build a scale for our extrude heights; we need to build a diff scale\r\n                    // for each zoom level, as we can't guarantee they'll start at the top and work down\r\n                    // (if we add persistence)\r\n                    let maxCorrection = new ClusterHeightWeighter().calculateWeighting(this.zoomLevelService.nextIndex);\r\n                    this.clusterRangeMeta.maxCount = d3.max(clusters, (d: any) => { return d.properties.count; });\r\n                    this.clusterRangeMeta.scale = d3.scale.linear()\r\n                        .domain([0, this.clusterRangeMeta.maxCount])\r\n                        .range([0, this.clusterRangeMeta.maxExtrudeHeight / maxCorrection]);\r\n\r\n                    for(var i = 0; i < clusters.length; i++){\r\n\r\n                        // tag id with type for pick handling\r\n                        clusters[i].properties['featureType'] = 'rockPropsCluster';\r\n\r\n                        var clusterProps: any = this.computeClusterAttributes(clusters[i].properties.count);\r\n                        clusterInstances.push(this.buildClusterInstance(clusters[i], clusterProps));\r\n                        labelCollection.add(this.buildLabel(clusters[i], clusterProps)); // No lables for the short term\r\n                    }\r\n\r\n                    this.drawClusters(clusterInstances, labelCollection);\r\n                }\r\n                else {\r\n                    console.log(\"got no clusters\");\r\n                    console.log(response);\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n        drawClusters(instances: any, labelCollection: any): void {\r\n\r\n            this.clustersCollection.removeAll();\r\n            this.clusterPrimitive = new Cesium.Primitive({\r\n                geometryInstances : instances,\r\n                appearance : new Cesium.PerInstanceColorAppearance({\r\n                    translucent : true,\r\n                    closed : true\r\n                })\r\n            });\r\n\r\n            this.clusterInspectorService.setClusterPrimitive((this.clusterPrimitive));\r\n\r\n            this.clustersCollection.add(this.clusterPrimitive);\r\n            this.clustersCollection.add(labelCollection);\r\n        }\r\n\r\n        buildClusterInstance(cluster: any, clusterProps: any): any {\r\n\r\n            return new Cesium.GeometryInstance({\r\n                geometry : new Cesium.CircleGeometry({\r\n                    center : Cesium.Cartesian3.fromDegrees(\r\n                        cluster.geometry.coordinates[0],\r\n                        cluster.geometry.coordinates[1]\r\n                    ),\r\n                    radius : clusterProps.radius,\r\n                    vertexFormat : Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,\r\n                    extrudedHeight: clusterProps.extrudeHeight\r\n                }),\r\n                id : cluster,\r\n                attributes : {\r\n                    color : Cesium.ColorGeometryInstanceAttribute.fromColor(clusterProps.color)\r\n                }\r\n            });\r\n        }\r\n\r\n        buildLabel(cluster: any, clusterProps: any): any {\r\n\r\n            return {\r\n                position : Cesium.Cartesian3.fromDegrees(\r\n                    cluster.geometry.coordinates[0],\r\n                    cluster.geometry.coordinates[1],\r\n                    clusterProps.extrudeHeight + clusterProps.radius + 30\r\n                ),\r\n                text: cluster.properties.count.toString(),\r\n                fillColor: Cesium.Color.BLACK,\r\n                outlineColor: Cesium.Color.RED,\r\n                // TODO review labelling\r\n                font: (26 - (this.zoomLevelService.nextIndex * 0.2)) +'px arial, sans-serif',\r\n                horizontalOrigin: Cesium.HorizontalOrigin.CENTER,\r\n                id: cluster\r\n            };\r\n        }\r\n\r\n        computeClusterAttributes(count: number): any {\r\n\r\n            var radius: number = this.zoomLevelService.zoomLevels[this.zoomLevelService.zoomLevels.length - this.zoomLevelService.nextIndex] / 150;\r\n            var maxHeight = this.zoomLevelService.nextPosition.height * 0.6;\r\n            var extrudeHeight = this.clusterRangeMeta.scale(count) / Math.pow(this.zoomLevelService.nextIndex / 3, 1.15) ;\r\n            if(extrudeHeight > maxHeight) {\r\n               extrudeHeight = maxHeight; \r\n            }\r\n            \r\n            if(radius > maxHeight / 20) {\r\n               console.log(\"To big!\");\r\n               radius = maxHeight / 20;\r\n            }\r\n\r\n            var attrs: any = {\r\n                // tweak these to scale cluster size/extrude on zoom\r\n                radius: radius,\r\n                extrudeHeight: extrudeHeight\r\n            };\r\n            if(count < 100){\r\n                attrs.color = Cesium.Color.fromCssColorString('#4781cd').withAlpha(0.5);\r\n            }\r\n            else if(count < 1000){\r\n                attrs.radius *= 1.3;\r\n                attrs.color = Cesium.Color.fromCssColorString('#0fc70e').withAlpha(0.5);\r\n            }\r\n            else {\r\n                attrs.radius *= 1.6;\r\n                attrs.color = Cesium.Color.fromCssColorString('#ff0000').withAlpha(0.5);\r\n            }\r\n            return attrs;\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.clusters', [])\r\n        .factory(\"clusterService\", [\r\n            \"$http\",\r\n            \"$rootScope\",\r\n            \"zoomLevelService\",\r\n            \"clusterChartService\",\r\n            \"loadingSpinnerService\",\r\n            \"rocksConfigService\",\r\n            \"clusterInspectorService\",\r\n            \"clusterFilterState\",\r\n        (\r\n            $http: ng.IHttpService,\r\n            $rootScope: ng.IRootScopeService,\r\n            zoomLevelService: rpComponents.zoom.IZoomLevelService,\r\n            clusterChartService: rpComponents.chartService.IClusterChartService,\r\n            chartSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n            rocksConfigService: rpComponents.config.IRocksConfigService,\r\n            clusterInspectorService: rpComponents.clusterInspector.IClusterInspectorService,\r\n            clusterFilterState: rpComponents.filters.IClusterFilterState\r\n        ) =>\r\n        new rpComponents.clusterService.ClusterService(\r\n            $http,\r\n            $rootScope,\r\n            zoomLevelService,\r\n            clusterChartService,\r\n            chartSpinnerService,\r\n            rocksConfigService,\r\n            clusterInspectorService,\r\n            clusterFilterState\r\n        )]);\r\n\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n/// <reference path=\"clusters\" />\r\n\r\ndeclare var Cesium: any;\r\n\r\nmodule rpComponents.controlPanel {\r\n\r\n    'use strict';\r\n\r\n    export interface IRocksPanelCtrl {\r\n        targetPanel: string;\r\n        setTargetPanel(targetPanel: string): void;\r\n    }\r\n    export class RocksPanelCtrl implements IRocksPanelCtrl {\r\n\r\n        targetPanel: string = '';\r\n        static $inject = [\"$scope\", \"rocksPanelService\", \"wmsInspectorService\"];\r\n        constructor(\r\n            public $scope: ng.IScope,\r\n            public rocksPanelService: rpComponents.controlPanel.IRocksPanelService,\r\n            public wmsInspectorService: rpComponents.wmsInspectorService.IWmsInspectorService\r\n        ){\r\n            this.$scope.$on(\"rocks.accordion.update\", (event: any, data: any) => {\r\n                this.targetPanel = data;\r\n            });\r\n        }\r\n\r\n        setTargetPanel(targetPanel: string): void {\r\n            this.targetPanel = (this.targetPanel != targetPanel) ? targetPanel : \"\";\r\n        }\r\n    }\r\n\r\n    export interface IRocksPanelService {\r\n        viewer: any;\r\n        clustersEnabled: boolean;\r\n        pointsEnabled: boolean;\r\n        toggleClusters(): void;\r\n    }\r\n    export class RocksPanelService implements IRocksPanelService {\r\n\r\n        viewer: any;\r\n        clustersEnabled: boolean = false;\r\n        pointsEnabled: boolean = false;\r\n\r\n        static $inject = [\r\n            \"$rootScope\",\r\n            \"clusterService\",\r\n            \"wmsPointsService\",\r\n            \"rocksConfigService\"\r\n        ];\r\n        constructor(\r\n            public $rootScope: ng.IRootScopeService,\r\n            public clusterService: rpComponents.clusterService.IClusterService,\r\n            public wmsPointsService: rpComponents.pointsService.IWmsPointsService,\r\n            public rocksConfigService: rpComponents.config.IRocksConfigService\r\n        ){}\r\n\r\n        /**\r\n         *\r\n         * The entry point for the component.\r\n         *\r\n         * @param viewer\r\n         * @param clusterServiceUrl\r\n         * @param wmsServiceUrl\r\n         * @param pickEnabled\r\n         */\r\n        public init(viewer: any, config: any){\r\n            this.viewer = viewer;\r\n            this.rocksConfigService.setConfig(config, viewer);\r\n        }\r\n\r\n        public toggleClusters(): void {\r\n            this.clustersEnabled = this.clusterService.toggleClusters();\r\n        }\r\n\r\n        public togglePoints(): void {\r\n            this.pointsEnabled = this.wmsPointsService.togglePoints();\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.controlpanel', [])\r\n        .factory(\"rocksPanelService\", [\r\n            \"$rootScope\", \"clusterService\", \"wmsPointsService\", \"rocksConfigService\",\r\n            (\r\n                $rootScope: ng.IRootScopeService,\r\n                clusterService: rpComponents.clusterService.IClusterService,\r\n                wmsPointsService: rpComponents.pointsService.IWmsPointsService,\r\n                rocksConfigService: rpComponents.config.IRocksConfigService\r\n            ) =>\r\n                new rpComponents.controlPanel.RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService)\r\n        ])\r\n        .controller(\"rocksPanelCtrl\", RocksPanelCtrl)\r\n        .directive(\"rocksControlPanel\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'rockprops/control-panel.html',\r\n                controller:  RocksPanelCtrl,\r\n                controllerAs: 'controlPanelVM'\r\n            };\r\n        });\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n/// <reference path=\"control-panel\" />\r\n/// <reference path=\"spinner\" />\r\n\r\n\r\ndeclare var Cesium: any, ga: any;\r\n\r\nmodule rpComponents.clusterInspector {\r\n\r\n    'use strict';\r\n\r\n    export interface IClusterInspectorCtrl {}\r\n    export class ClusterInspectorCtrl implements IClusterInspectorCtrl {\r\n        static $inject = [\"$scope\", \"clusterInspectorService\", \"rocksPanelService\"];\r\n        constructor(\r\n            public $scope: ng.IScope,\r\n            public clusterInspectorService: rpComponents.clusterInspector.IClusterInspectorService,\r\n            public rocksPanelService: rpComponents.controlPanel.IRocksPanelService\r\n        ){}\r\n    }\r\n\r\n    export interface IClusterInspectorService {\r\n        inspectMode: string;\r\n        listReady: boolean;\r\n        listFeatures: any;\r\n        listIndex: number;\r\n        maxListStep: number;\r\n\r\n        setPickEnabled(enabled: boolean): void;\r\n        setClusterPrimitive(primitive: any): void;\r\n        loadNextListStep(): void;\r\n    }\r\n    \r\n    export interface IPagingState {\r\n        count: number;\r\n        total: number;\r\n        \r\n        more():boolean;\r\n    }\r\n    \r\n    export class PagingState implements IPagingState {\r\n        public count: number;\r\n        public total: number;\r\n        \r\n        constructor(\r\n            count: number,\r\n            total: number\r\n        ) {\r\n            this.count = count;\r\n            this.total = total;\r\n        }\r\n        \r\n        public more(): boolean {\r\n            return this.total > this.count;  \r\n        } \r\n    }\r\n    \r\n    export class ClusterInspectorService implements IClusterInspectorService {\r\n\r\n        public inspectMode: string = \"CHART\";\r\n        public listReady: boolean = false;\r\n        public listFeatures: any;\r\n        public listIndex: number;\r\n        public pageIndex: number;\r\n        public pagingState: PagingState;\r\n\r\n        // TODO decide reasonable step size when plugged into real service\r\n        public maxListStep: number = 100;\r\n\r\n        viewer: any;\r\n        serviceUrl: string;\r\n        pickHandler: any;\r\n        pickHandlerAction: any;\r\n        clusterPrimitive: any;\r\n\r\n        targetPos: any;\r\n        targetId: any;\r\n        summarySpinner: any;\r\n        listSpinner: any;\r\n\r\n        static $inject = [\r\n            \"$http\",\r\n            \"$rootScope\",\r\n            \"$timeout\",\r\n            \"zoomLevelService\",\r\n            \"loadingSpinnerService\",\r\n            \"rocksConfigService\",\r\n            \"clusterChartService\",\r\n            \"clusterFilterState\"\r\n        ];\r\n\r\n        constructor(\r\n            public $http: ng.IHttpService,\r\n            public $rootScope: ng.IRootScopeService,\r\n            public $timeout: ng.ITimeoutService,\r\n            public zoomLevelService: rpComponents.zoom.IZoomLevelService,\r\n            public loadingSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n            public rocksConfigService: rpComponents.config.IRocksConfigService,\r\n            public clusterChartService: rpComponents.chartService.IClusterChartService,\r\n            public clusterFilterState: rpComponents.filters.IClusterFilterState\r\n        ) {\r\n            this.$rootScope.$on('rocks.config.ready', () => {\r\n                this.init();\r\n            });\r\n        }\r\n\r\n        /**\r\n         *\r\n         \r\n         * @param viewer\r\n         * @param summaryService\r\n         * @param usePicking\r\n         */\r\n        init(): void {\r\n\r\n            this.viewer = this.rocksConfigService.viewer;\r\n            this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\r\n\r\n            // setup our pick handler\r\n            if(this.rocksConfigService.config.useClusterPicking){\r\n\r\n                this.pickHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\r\n                this.pickHandlerAction = (movement: any) => {\r\n\r\n                    var pick = this.viewer.scene.pick(movement.position);\r\n\r\n                    if (Cesium.defined(pick) && Cesium.defined(pick.id) && pick.id.hasOwnProperty('properties') && pick.id.properties.featureType == 'rockPropsCluster') {\r\n\r\n                        this.listReady = false;\r\n                        this.clearHighlighted();\r\n                        this.targetId = pick.id;\r\n                        this.setHighlighted(this.targetId, true);\r\n\r\n                        this.targetPos =  Cesium.Ellipsoid.WGS84.cartesianToCartographic(\r\n                            this.viewer.camera.pickEllipsoid(movement.position)\r\n                        );\r\n\r\n                        if(this.inspectMode == \"CHART\"){\r\n                            this.chartClusterQuery();\r\n                        }\r\n                        else {\r\n                            this.listIndex = 0;\r\n                            this.listClusterQuery();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * Gets a summary of cluster data to pass to chartService.\r\n         *\r\n         * @param cluster\r\n         */\r\n        public chartClusterQuery(): void {\r\n\r\n            //  spinner for summary chart load\r\n            if(this.summarySpinner){\r\n                document.getElementById(\"cluster-summary-chart-loading\").style.display = 'block';\r\n            }\r\n            else {\r\n                this.summarySpinner = this.loadingSpinnerService.addSpinner({\r\n                    width: 100,\r\n                    height: 100,\r\n                    container: \"#cluster-summary-chart-loading\",\r\n                    id: \"chart-spinner\"\r\n                });\r\n                this.summarySpinner();\r\n            }\r\n\r\n            var args: string =\r\n                '?zoom='+this.zoomLevelService.nextIndex +\r\n                '&x='+ Cesium.Math.toDegrees(this.targetPos.longitude) +\r\n                '&y='+ Cesium.Math.toDegrees(this.targetPos.latitude) +\r\n                this.clusterFilterState.filterQuery;\r\n\r\n            var query: string = this.serviceUrl + 'query' + args;\r\n\r\n            console.log(\"query\");\r\n            console.log(query);\r\n\r\n            this.$http({\r\n\r\n                method: 'GET',\r\n                url: query\r\n\r\n            }).then((response: any) => {\r\n\r\n                if(response.hasOwnProperty('data')){\r\n                    this.clusterChartService.buildChart(response.data);\r\n                }\r\n            });\r\n\r\n            ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector summary charts');\r\n        }\r\n\r\n        public loadNextListStep(): void {\r\n            this.listIndex += this.maxListStep;\r\n\r\n            console.log(\"loadNextListStep \"+ this.listIndex);\r\n\r\n            this.listClusterQuery();\r\n        }\r\n\r\n        public listClusterQuery(): void {\r\n\r\n            console.log(\"listClusterQuery\");\r\n\r\n            //  spinner for summary chart load\r\n            if(this.listSpinner){\r\n                document.getElementById(\"cluster-result-list-loading\").style.display = 'block';\r\n            }\r\n            else {\r\n                this.listSpinner = this.loadingSpinnerService.addSpinner({\r\n                    width: 100,\r\n                    height: 100,\r\n                    container: \"#cluster-result-list-loading\",\r\n                    id: \"cluster-result-list-spinner\"\r\n                });\r\n                this.listSpinner();\r\n            }\r\n\r\n            var args: string =\r\n                '?zoom='+this.zoomLevelService.nextIndex +\r\n                '&maxCount='+this.maxListStep +\r\n                '&startIndex='+ this.listIndex +\r\n                '&x='+ Cesium.Math.toDegrees(this.targetPos.longitude) +\r\n                '&y='+ Cesium.Math.toDegrees(this.targetPos.latitude) +\r\n                this.clusterFilterState.filterQuery;\r\n\r\n            var query: string = this.serviceUrl + 'features' + args;\r\n\r\n            console.log(\"features query\");\r\n            console.log(query);\r\n\r\n            this.$http({\r\n\r\n                method: 'GET',\r\n\r\n                // mock\r\n                //url: this.serviceUrl + '/mock-feature-list.json'\r\n\r\n                // real service\r\n                url: query\r\n\r\n            }).then((response: any) => {\r\n\r\n                if(response.hasOwnProperty('data')){\r\n\r\n                    this.$timeout(() => {\r\n\r\n                        document.getElementById(\"cluster-result-list-loading\").style.display = 'none';\r\n                        this.listReady = true;\r\n\r\n                        // step, merge features\r\n                        if (this.listIndex != 0) {\r\n                            this.listFeatures.features = this.listFeatures.features.concat(response.data.features);\r\n                        }\r\n                        else {\r\n                            this.listFeatures = response.data;\r\n                        }\r\n                        let morePages = this.listFeatures.features.length < this.listFeatures.totalFeatures;\r\n                        this.pagingState = new PagingState(this.listFeatures.features.length, this.listFeatures.totalFeatures);\r\n                    }, 1000);\r\n                }\r\n            });\r\n\r\n            ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector feature list (startIndex: '+ this.listIndex +')');\r\n        }\r\n\r\n        setPickEnabled(enabled: boolean): void {\r\n\r\n            if(enabled){\r\n                this.pickHandler.setInputAction(this.pickHandlerAction, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n            }\r\n            else {\r\n                this.pickHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n            }\r\n        }\r\n\r\n        setClusterPrimitive(primitive: any){\r\n            this.clusterPrimitive = primitive;\r\n        }\r\n\r\n        setHighlighted(id: any, highlight: boolean){\r\n\r\n            var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(id);\r\n\r\n            if(attributes && highlight){\r\n                attributes.prevColor = attributes.color;\r\n                attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.fromCssColorString('#ff00ff').withAlpha(1));\r\n            }\r\n        }\r\n\r\n        clearHighlighted(){\r\n            if(this.targetId){\r\n                var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(this.targetId);\r\n                if(attributes && attributes.hasOwnProperty('prevColor')) {\r\n                    attributes.color = attributes.prevColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.clusterinspector', [])\r\n        .controller(\"clusterInspectorCtrl\", ClusterInspectorCtrl)\r\n        .directive(\"rocksClusterInspectorPanel\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'rockprops/cluster-inspector.html',\r\n                controller:  ClusterInspectorCtrl,\r\n                controllerAs: 'clusterInspectorVM'\r\n            };\r\n        })\r\n        .factory(\"clusterInspectorService\", [\r\n            \"$http\",\r\n            \"$rootScope\",\r\n            \"$timeout\",\r\n            \"zoomLevelService\",\r\n            \"loadingSpinnerService\",\r\n            \"rocksConfigService\",\r\n            \"clusterChartService\",\r\n            \"clusterFilterState\",\r\n        (\r\n            $http: ng.IHttpService,\r\n            $rootScope: ng.IRootScopeService,\r\n            $timeout: ng.ITimeoutService,\r\n            zoomLevelService: rpComponents.zoom.IZoomLevelService,\r\n            chartSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n            rocksConfigService: rpComponents.config.IRocksConfigService,\r\n            clusterChartService: rpComponents.chartService.IClusterChartService,\r\n            clusterFilterState: rpComponents.filters.IClusterFilterState\r\n        ) =>\r\n            new rpComponents.clusterInspector.ClusterInspectorService(\r\n                $http,\r\n                $rootScope,\r\n                $timeout,\r\n                zoomLevelService,\r\n                chartSpinnerService,\r\n                rocksConfigService,\r\n                clusterChartService,\r\n                clusterFilterState\r\n            )]);\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n\r\ndeclare var Cesium: any;\r\n\r\nmodule rpComponents.wmsInspectorState {\r\n\r\n    'use strict';\r\n\r\n    export interface IWmsInspectorState {\r\n        view: string;\r\n        targetGeom: any;\r\n        cameraHeight: number;\r\n    }\r\n\r\n    /*\r\n        The WMS inspector panel can be in 1 of 3 view states:\r\n        1. INTRO - the default/home shows prompt\r\n        2. LAYERSELECT - user presented with layers to interrogate with GetFeatureInfo when\r\n        they have clicked a point on the map\r\n        3. FEATUREINFO - view to present raw html returned by GetFeatureInfo\r\n     */\r\n    export class WmsInspectorState implements IWmsInspectorState {\r\n        public view: string = \"INTRO\";\r\n        public targetGeom: number;\r\n        public cameraHeight: number;\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.inspectorstate', [])\r\n        .factory(\"wmsInspectorState\", [() => new rpComponents.wmsInspectorState.WmsInspectorState()])\r\n}\r\n","/// <reference path=\"../../typings/browser.d.ts\" />\r\n/// <reference path=\"spinner\" />\r\n/// <reference path=\"clipship\" />\r\n\r\n\r\ndeclare var Cesium: any, ga: any;\r\n\r\nmodule rpComponents.wmsInspectorService {\r\n\r\n    'use strict';\r\n\r\n    export interface IWmsInspectorCtrl {}\r\n\r\n    export class WmsInspectorCtrl implements IWmsInspectorCtrl {\r\n        static $inject = [\"$scope\", \"wmsInspectorState\", \"wmsInspectorService\"];\r\n        constructor(\r\n            public $scope: ng.IScope,\r\n            public wmsInspectorState: rpComponents.wmsInspectorState.IWmsInspectorState,\r\n            public wmsInspectorService: rpComponents.wmsInspectorService.IWmsInspectorService\r\n        ){}\r\n    }\r\n\r\n    export interface IWmsInspectorService {\r\n        features: any[];\r\n        rocksFeature: any;\r\n        featureInfo: any;\r\n        isLoading: boolean;\r\n        loadingSpinner: any;\r\n        inspectorEnabled: boolean;\r\n    }\r\n    export class WmsInspectorService implements IWmsInspectorService {\r\n\r\n        public features: any[];\r\n        public rocksFeature: any;\r\n        public featureInfo: any;\r\n        public isLoading: boolean = false;\r\n        public loadingSpinner: any;\r\n        public inspectorEnabled: boolean;\r\n\r\n        URL_EXCLUDE: string = \"?SERVICE=WMS&\";\r\n        SURFACE_GEO: string = \"GA_Surface_Geology_of_Australia\";\r\n\r\n        $inject = [\r\n            \"$rootScope\",\r\n            \"$http\",\r\n            \"wmsInspectorState\",\r\n            \"assetsService\",\r\n            \"configService\",\r\n            \"rocksConfigService\",\r\n            \"loadingSpinnerService\",\r\n            \"gwsUtilService\",\r\n            \"rocksClipShipService\"\r\n        ];\r\n\r\n        constructor(\r\n            public $rootScope: ng.IRootScopeService,\r\n            public $http: ng.IHttpService,\r\n            public wmsInspectorState: rpComponents.wmsInspectorState.IWmsInspectorState,\r\n            public assetsService: any,\r\n            public configService: any,\r\n            public rocksConfigService: rpComponents.config.IRocksConfigService,\r\n            public loadingSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n            public gwsUtilService: rpComponents.gwsUtilService.IGwsUtilService,\r\n            public rocksClipShipService: rpComponents.clipShipService.IRocksClipShipService\r\n        ) {\r\n            // register listener for pointInspector\r\n            this.$rootScope.$on(\"viewer.click.left\", (event: any, data: any) => {\r\n\r\n                data.degrees = {\r\n                    lat: Cesium.Math.toDegrees(data.cartographic.latitude),\r\n                    lon: Cesium.Math.toDegrees(data.cartographic.longitude)\r\n                };\r\n\r\n                // TODO should flasher for this so user knows why\r\n                // (we don't want inspector interuppting clipship drawing)\r\n                if(this.rocksClipShipService.isDrawing){\r\n                    return;\r\n                }\r\n\r\n                if(this.inspectorEnabled && data.hasOwnProperty('cartographic')){\r\n\r\n                    // make sure panel is visible\r\n                    this.$rootScope.$broadcast(\"rocks.accordion.update\", \"wmsInspector\");\r\n                    this.$rootScope.$broadcast(\"toolbar.toggle.update\", {linked: false, key: \"rocksClusters\", isActive: true});\r\n\r\n                    this.wmsInspectorState.targetGeom = data;\r\n                    this.wmsInspectorState.view = \"LAYERSELECT\";\r\n                    this.wmsInspectorState.cameraHeight = Cesium.Ellipsoid.WGS84.cartesianToCartographic(\r\n                        this.rocksConfigService.viewer.camera.position\r\n                    ).height;\r\n                }\r\n\r\n            });\r\n\r\n            this.$rootScope.$on('rocks.config.ready', () => {\r\n\r\n                // load feature classes\r\n                assetsService.getReferenceFeatureClasses().then((features: any) => {\r\n                    this.features = features;\r\n                });\r\n\r\n                // init rocks feature\r\n                this.rocksFeature = {\r\n                    wmsUrl: this.rocksConfigService.config.geoserverWmsUrl,\r\n                    name: 'Rock Properties Layer'\r\n                }\r\n            });\r\n        }\r\n\r\n        public togglePointInspector(): void {\r\n            this.inspectorEnabled != this.inspectorEnabled;\r\n        }\r\n\r\n        // TODO we should restrict the query to visible layers\r\n        public queryRocks(): void {\r\n\r\n            if(!this.rocksFeature.hasOwnProperty('layers') && this.gwsUtilService.wmsLayerNames){\r\n                this.rocksFeature.layers = [];\r\n                for(var i = 0; i < this.gwsUtilService.wmsLayerNames.length; i++){\r\n                   this.rocksFeature.layers.push(\r\n                       this.rocksConfigService.config.geoserverWmsLayerPrefix +\r\n                       this.gwsUtilService.wmsLayerNames[i]\r\n                   );\r\n               }\r\n            }\r\n\r\n            this.queryFeature(this.rocksFeature);\r\n        }\r\n\r\n        public queryFeature(feature: any): void {\r\n\r\n            ga('send', 'event', 'explorer-rock-properties', 'click', 'wms inspector query: '+feature.name);\r\n\r\n            // set view\r\n            this.wmsInspectorState.view = \"FEATUREINFO\";\r\n            this.toggleLoading();\r\n\r\n            var targetUrl: string = feature.wmsUrl;\r\n            var targetLayers: string[] = feature.layers;\r\n\r\n            // clean any endpoints already containing '?'\r\n            if(targetUrl.indexOf(this.URL_EXCLUDE) > -1){\r\n                targetUrl = targetUrl.substring(0, (targetUrl.length - this.URL_EXCLUDE.length));\r\n            }\r\n\r\n            // surface geology has scale dependencies, so we need to check\r\n            // zoom (aka camera height) to ensure we query the correct layer\r\n            if(targetUrl.indexOf(this.SURFACE_GEO) >  -1){\r\n\r\n                if(this.wmsInspectorState.cameraHeight <= 340000){\r\n                    targetLayers = [targetLayers[0]];\r\n                }\r\n                else {\r\n                    targetLayers = [targetLayers[1]];\r\n                }\r\n            }\r\n\r\n\r\n\r\n            var queryString =\r\n\r\n                '?SERVICE=WMS'+\r\n                '&REQUEST=GetFeatureInfo'+\r\n                '&VERSION=1.1.1'+\r\n                '&LAYERS='+ targetLayers +\r\n                '&STYLES='+\r\n                '&SRS=EPSG%3A4326'+\r\n                '&FORMAT=image%2Fpng'+\r\n\r\n                // we use the click pos as the bottom left corner\r\n                // and offset the top right by ~30 meters\r\n                // (can be hard to click on a point if res is too fine)\r\n                '&BBOX=' +\r\n                (this.wmsInspectorState.targetGeom.degrees.lon) +','+\r\n                (this.wmsInspectorState.targetGeom.degrees.lat) +','+\r\n                (this.wmsInspectorState.targetGeom.degrees.lon + 0.003) +','+\r\n                (this.wmsInspectorState.targetGeom.degrees.lat + 0.003) +\r\n\r\n                '&QUERY_LAYERS='+ targetLayers +\r\n                '&INFO_FORMAT=text%2Fhtml'+\r\n                '&FEATURE_COUNT=100'+\r\n                '&WIDTH=2' +\r\n                '&HEIGHT=2'+\r\n                '&X=1'+\r\n                '&Y=1'+\r\n                '&TRANSPARENT=true'+\r\n                '&EXCEPTIONS=application%2Fvnd.ogc.se_xml';\r\n\r\n            // send the query\r\n            this.$http.get(targetUrl + queryString).success((data: any) => {\r\n\r\n                this.featureInfo = data;\r\n                this.toggleLoading();\r\n            })\r\n            .error(function(data: any, status: any, headers: any, config: any){\r\n                console.log(\"Couldn't load WMS GetFeatureInfo\");\r\n                this.featureInfo = \"<h5>Couldn't load WMS GetFeatureInfo for this layer.</h5><p>You may not be able to access this function for some layers.</p>\";\r\n                this.toggleLoading();\r\n            });\r\n        }\r\n\r\n        public toggleLoading(): void {\r\n\r\n            if(this.loadingSpinner){\r\n                this.isLoading = !this.isLoading;\r\n            }\r\n\r\n            else {\r\n                this.loadingSpinner = this.loadingSpinnerService.addSpinner({\r\n                    width: 60,\r\n                    height: 60,\r\n                    container: \"#rocks-inspector-loading\",\r\n                    id: \"rocks-inspector-spinner\"\r\n                });\r\n                this.loadingSpinner();\r\n                this.isLoading = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('explorer.rockproperties.inspector', [])\r\n        .factory(\"wmsInspectorService\", [\r\n            \"$rootScope\",\r\n            \"$http\",\r\n            \"wmsInspectorState\",\r\n            \"assetsService\",\r\n            \"configService\",\r\n            \"rocksConfigService\",\r\n            \"loadingSpinnerService\",\r\n            \"gwsUtilService\",\r\n            \"rocksClipShipService\",\r\n            (\r\n                $rootScope: ng.IRootScopeService,\r\n                $http: ng.IHttpService,\r\n                wmsInspectorState: rpComponents.wmsInspectorState.IWmsInspectorState,\r\n                assetsService: any,\r\n                configService: any,\r\n                rocksConfigService: rpComponents.config.IRocksConfigService,\r\n                loadingSpinnerService: rpComponents.spinnerService.ILoadingSpinnerService,\r\n                gwsUtilService: rpComponents.gwsUtilService.IGwsUtilService,\r\n                rocksClipShipService: rpComponents.clipShipService.IRocksClipShipService\r\n            ) =>\r\n                new rpComponents.wmsInspectorService.WmsInspectorService(\r\n                    $rootScope,\r\n                    $http,\r\n                    wmsInspectorState,\r\n                    assetsService,\r\n                    configService,\r\n                    rocksConfigService,\r\n                    loadingSpinnerService,\r\n                    gwsUtilService,\r\n                    rocksClipShipService\r\n                )])\r\n        .controller(\"wmsInspectorCtrl\", rpComponents.wmsInspectorService.WmsInspectorCtrl)\r\n        .directive(\"wmsInspectorPanel\", function(): ng.IDirective {\r\n            return {\r\n                templateUrl: 'rockprops/wms-inspector-panel.html',\r\n                controller:  WmsInspectorCtrl,\r\n                controllerAs: 'wmsInspectorVM'\r\n            };\r\n        });\r\n}\r\n\r\n\r\n"],"sourceRoot":"/source/"}