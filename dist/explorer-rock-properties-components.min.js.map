{"version":3,"sources":["cluster.ts","clusters.ts"],"names":["rpComponents","rpComponents.cluster","rpComponents.cluster.Cluster","rpComponents.cluster.Cluster.constructor","rpComponents.clusterService","rpComponents.clusterService.ClusterService","rpComponents.clusterService.ClusterService.constructor","rpComponents.clusterService.ClusterService.init","rpComponents.clusterService.ClusterService.toggleClusters","rpComponents.clusterService.ClusterService.getClusters","rpComponents.clusterService.ClusterService.addClusters","rpComponents.clusterService.ClusterService.drawCluster","rpComponents.clusterService.ClusterService.computeClusterAttributes"],"mappings":"AAOA,GAAOA,eAAP,SAAOA,GAAaA,GAAAA,IAAAA,SAAAA,GAEhBC,YA2BAA,IAAAA,GAAAA,WAcIC,QAAAA,GACWA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GARAC,KAAAA,MAAAA,EACAA,KAAAA,IAAAA,EACAA,KAAAA,IAAAA,EACAA,KAAAA,KAAAA,EACAA,KAAAA,eAAAA,EACAA,KAAAA,SAAAA,EACAA,KAAAA,aAAAA,EACAA,KAAAA,WAAAA,EACAA,KAAAA,sBAAAA,EAEfD,MAvBWA,GAAAA,SACHA,QACAA,MACAA,MACAA,OACAA,iBACAA,WACAA,eACAA,aACAA,yBAcRA,IAzBaD,GAAAA,QAAOA,GA7BJD,EAAAA,EAAAA,UAAAA,EAAAA,cAAbA,eAAAA,iBCHP,IAAOA,eAAP,SAAOA,GAAaA,GAAAA,IAAAA,SAAAA,GAEhBI,YAcAA,IAAAA,GAAAA,WAWIC,QAAAA,GACWA,GAAAC,KAAAA,MAAAA,EA0EfD,MAvEIA,GAAAA,UAAAA,KAAAA,SAAKA,EAAaA,GACdE,KAAKA,OAASA,EACdA,KAAKA,WAAaA,GAGtBF,EAAAA,UAAAA,eAAAA,WAEOG,KAAKA,eACJA,KAAKA,eAAeA,MAAQA,KAAKA,eAAeA,MAGhDA,KAAKA,eAAiBA,GAAIA,QAAOA,OACjCA,KAAKA,OAAOA,SAASA,IAAIA,KAAKA,gBAC9BA,KAAKA,gBAIbH,EAAAA,UAAAA,YAAAA,WACII,MAAOA,MAAKA,MAAMA,IAAIA,KAAKA,WAAaA,aAG5CJ,EAAAA,UAAAA,YAAAA,WAAAK,GAAAA,GAAAA,IAEIA,MAAKA,cAAcA,KAAKA,SAACA,GAErBA,GAAGA,EAASA,KAIRA,IAAIA,GAFAA,GAA4CA,EAASA,KAEjDA,EAAIA,EAAGA,EAAIA,EAASA,OAAQA,IAChCA,EAAKA,YAAYA,EAASA,QAI9BA,SAAQA,IAAIA,sBAKxBL,EAAAA,UAAAA,YAAAA,SAAYA,GAERM,GAAIA,GAA2CA,KAAKA,yBAAyBA,EAAQA,MAErFA,MAAKA,OAAOA,SAASA,KACjBA,OAAQA,KAAKA,eACbA,OACIA,KAAMA,EAAQA,MAAMA,WACpBA,UAAWA,OAAOA,MAAMA,MACxBA,aAAcA,OAAOA,MAAMA,MAC3BA,UAAWA,GAAIA,QAAOA,WAAWA,EAAwBA,EAApBA,EAAaA,KAAYA,EAAQA,KAAMA,IAEhFA,SAAUA,OAAOA,WAAWA,YAAYA,EAAQA,IAAKA,EAAQA,IAAKA,EAAQA,KAAOA,EAAaA,MAC9FA,WACIA,MAAQA,GAAIA,QAAOA,WAAWA,EAAaA,KAAMA,EAAaA,KAAMA,EAAaA,MACjFA,SAAWA,EAAaA,UAKpCN,EAAAA,UAAAA,yBAAAA,SAAyBA,GAErBO,MAAWA,IAARA,GACUA,KAAMA,IAAOA,MAAOA,OAAOA,MAAMA,mBAAmBA,WAAWA,UAAUA,KAE9EA,GAASA,IAAcA,IAARA,GACXA,KAAMA,IAAOA,MAAOA,OAAOA,MAAMA,mBAAmBA,WAAWA,UAAUA,MAGzEA,KAAMA,IAAOA,MAAOA,OAAOA,MAAMA,mBAAmBA,WAAWA,UAAUA,MA5ElFP,EAAAA,SACHA,SA8ERA,IAtFaD,GAAAA,eAAcA,EAyF3BA,QACKA,OAAOA,uCACPA,QAAQA,kBAAmBA,QAASA,SAACA,GAA2BA,MAAAA,IAAIA,GAAaA,eAAeA,eAAeA,OA3GpGJ,EAAAA,EAAAA,iBAAAA,EAAAA,qBAAbA,eAAAA","file":"explorer-rock-properties-components.min.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n\n/**\n *\n *   Initial shell for single cluster\n *\n */\nmodule rpComponents.cluster {\n\n    'use strict';\n\n    /**\n     *\n     * Each of the properties contains an aggregated data summary, e.g.\n     *\n     * property: {\n     *  \"magnetic susceptibility\": 79.8,\n     *  \"total porosity\": 18.2,\n     *  \"grain mass density\": 2\n     * }\n     *\n     *\n     *\n     */\n    export interface ICluster {\n        count: number,\n        lat: number,\n        lon: number,\n        elev: number,\n        lithologyGroup: {},\n        property: {},\n        provinceName: {},\n        sampleType: {},\n        stratigraphicUnitName: {},\n    }\n\n    export class Cluster implements ICluster{\n\n        static $inject = [\n            \"count\",\n            \"lat\",\n            \"lon\",\n            \"elev\",\n            \"lithologyGroup\",\n            \"property\",\n            \"provinceName\",\n            \"sampleType\",\n            \"stratigraphicUnitName\"\n        ];\n\n        constructor(\n            public count: number,\n            public lat: number,\n            public lon: number,\n            public elev: number,\n            public lithologyGroup: {},\n            public property: {},\n            public provinceName: {},\n            public sampleType: {},\n            public stratigraphicUnitName: {}\n        ) {}\n    }\n\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\ndeclare var Cesium: any;\n\nmodule rpComponents.clusterService {\n\n    'use strict';\n\n    export interface IClusterService {\n\n        viewer: any;\n        serviceUrl: string;\n        clustersEntity: any;\n\n        toggleClusters(): void;\n        getClusters(): [rpComponents.cluster.ICluster];\n        addClusters(): void;\n        drawCluster(cluster: rpComponents.cluster.ICluster): void;\n    }\n\n    export class ClusterService implements IClusterService {\n\n        http: ng.IHttpService;\n        viewer: any;\n        serviceUrl: string;\n        clustersEntity: any;\n\n        static $inject = [\n            \"$http\",\n        ];\n\n        constructor(\n            public $http: ng.IHttpService\n        ) {}\n\n        init(viewer: any, serviceUrl: string): void {\n            this.viewer = viewer;\n            this.serviceUrl = serviceUrl;\n        }\n\n        toggleClusters(): void {\n\n            if(this.clustersEntity){\n                this.clustersEntity.show = !this.clustersEntity.show;\n            }\n            else {\n                this.clustersEntity = new Cesium.Entity();\n                this.viewer.entities.add(this.clustersEntity);\n                this.addClusters();\n            }\n        }\n\n        getClusters(): any {\n            return this.$http.get(this.serviceUrl + 'clusters');\n        }\n\n        addClusters(): void {\n\n            this.getClusters().then((response: any) => {\n\n                if(response.data){\n\n                    var clusters: [rpComponents.cluster.ICluster] = response.data;\n\n                    for(var i = 0; i < clusters.length; i++){\n                        this.drawCluster(clusters[i]);\n                    }\n                }\n                else {\n                    console.log(\"got no clusters\");\n                }\n            });\n        }\n\n        drawCluster(cluster: rpComponents.cluster.ICluster): void{\n\n            var clusterProps: {size: number, color: any} = this.computeClusterAttributes(cluster.count);\n\n            this.viewer.entities.add({\n                parent: this.clustersEntity,\n                label: {\n                    text: cluster.count.toString(),\n                    fillColor: Cesium.Color.BLACK,\n                    outlineColor: Cesium.Color.WHITE,\n                    eyeOffset: new Cesium.Cartesian3(0, (clusterProps.size * 2) + cluster.elev, 0)\n                },\n                position: Cesium.Cartesian3.fromDegrees(cluster.lon, cluster.lat, cluster.elev + clusterProps.size),\n                ellipsoid : {\n                    radii : new Cesium.Cartesian3(clusterProps.size, clusterProps.size, clusterProps.size),\n                    material : clusterProps.color\n                }\n            });\n        }\n\n        computeClusterAttributes(count: number): any {\n\n            if(count < 10){\n                 return {size: 60000, color: Cesium.Color.fromCssColorString('#4781cd').withAlpha(0.5) };\n            }\n            else if(count >= 10 && count < 250){\n                return {size: 80000, color: Cesium.Color.fromCssColorString('#0fc70e').withAlpha(0.5) };\n            }\n            else {\n                return {size: 90000, color: Cesium.Color.fromCssColorString('#ff0000').withAlpha(0.5) };\n            }\n        }\n    }\n\n    // ng register\n    angular\n        .module('explorer.rockproperties.clusters', [])\n        .factory(\"clusterService\", [\"$http\", ($http: ng.IHttpService) => new rpComponents.clusterService.ClusterService($http)]);\n\n}\n"],"sourceRoot":"/source/"}