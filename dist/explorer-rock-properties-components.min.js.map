{"version":3,"sources":["components/config.ts","components/cluster-filters.ts","components/spinner.ts","components/gws-util.ts","components/query-builder-export.ts","components/clipship.ts","leaflet/wms-inspector.ts","leaflet/wms-inspector-state.ts","components/wms-points.ts","components/control-panel.ts","leaflet/cluster-inspector.ts","leaflet/zoom.ts","explorer-rock-properties-components.min.js","leaflet/clusters.ts","components/charts.ts","templates/templates.ts"],"names":["rpComponents","config","config_1","RocksConfigService","$rootScope","this","prototype","setConfig","map","$broadcast","$inject","angular","module","factory","filters","RocksClusterFilterCtrl","$scope","clusterService","rocksPanelService","rocksFiltersService","ClusterFilterState","filterQuery","RocksFiltersService","$http","rocksConfigService","clusterFilterState","_this","clusterFilters","$on","get","filterNamesServiceUrl","then","response","data","i","length","filterType","propertyOptions","copy","filterOptions","j","name","isSelected","properties","exportProperties","console","log","setAllExportSelected","selected","applyFilters","buildFilterQuery","reCluster","ga","query","hasOwnProperty","ClusterOption","encodeURIComponent","clearFilters","controller","directive","templateUrl","controllerAs","spinnerService","LoadingSpinnerService","addSpinner","spin","selection","duration","transition","ease","attrTween","d3","interpolateString","setTimeout","radius","Math","min","width","height","tau","PI","arc","svg","innerRadius","outerRadius","startAngle","select","container","append","attr","id","datum","endAngle","style","call","gwsUtilService","GwsUtilService","$q","getWfsFeatureTypeNames","deferred","defer","geoserverWfsUrl","geoserverWfsVersion","success","status","headers","layerNames","getFeatureTypeNamesFromWfsCapsJson","xmlToJson","$","parseXML","resolve","error","err","promise","layerData","FeatureTypeList","FeatureType","layers","push","Name","getWmsLayerNames","geoserverWmsUrl","geoserverWmsVersion","wmsLayerNames","getLayerNamesFromWmsCapsJson","WMS_Capabilities","Capability","Layer","xml","obj","nodeType","attributes","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","queryBuilderExport","QueryBuilder","loadingSpinnerService","rocksClipShipService","propertyQuery","baseUrl","forEach","geoserverWfsExportParams","value","key","slice","wfsLayerNames","startClipShip","features","format","extent","loading","loadingSpinner","targetFeatures","zip","JSZip","support","blob","promises","buildQuery","all","results","numberOfLineBreaks","match","filename","split","join","file","content","generate","type","saveAs","step","window","open","exportUrl","isEmpty","prop","typeNamesQuery","getTypeNamesQuery","west","getWest","east","getEast","north","getNorth","south","getSouth","bboxQuery","exportFormat","hasFilters","filtersHasProperty","onlyHasPropertyFilter","Object","keys","getFilters","getPropertyQuery","filterString","property","concat","substring","clipShipService","RocksClipShipCtrl","$timeout","rocksQueryBuilderExport","targetFormat","targetExtent","RocksClipShipService","isDrawing","exportFormats","geoserverWfsExportFormats","event","startDraw","openGeoserver","win","geoserverDashboardUrl","focus","updateExportFormat","filter","$filter","wmsInspectorService","wmsInspectorService_1","WmsInspectorCtrl","wmsInspectorState","WmsInspectorService","mapService","assetsService","configService","mapOn","self","inspectorEnabled","degrees","lat","latlng","lon","lng","linked","isActive","targetGeom","view","isLoading","URL_EXCLUDE","SURFACE_GEO","getReferenceFeatureClasses","rocksFeature","wmsUrl","getMap","on","togglePointInspector","queryRocks","geoserverWmsLayerPrefix","queryFeature","feature","toggleLoading","targetUrl","targetLayers","indexOf","queryString","featureInfo","WmsInspectorState","pointsService","RocksWmsPointsCtrl","wmsPointsService","WmsPointsService","masterChecked","legendParamString","init","wmsServiceUrl","restrictedBounds","geoserverWmsLegendParams","getLegendData","togglePoints","pointsVisible","wmsLayer","addLayer","removeLayer","updatePointsLayer","toggleChecked","legend","legendData","legendUrl","toString","L","tileLayer","wms","transparent","controlPanel","RocksPanelCtrl","targetPanel","setTargetPanel","RocksPanelService","clustersEnabled","pointsEnabled","toggleClusters","clusterInspector","ClusterInspectorCtrl","clusterInspectorService","PagingState","count","total","more","ClusterInspectorService","zoomLevelService","clusterChartService","inspectMode","listReady","maxListStep","serviceUrl","rocksServiceUrl","useClusterPicking","targetPos","chartClusterQuery","listIndex","listClusterQuery","summarySpinner","document","getElementById","display","args","zoom","x","y","method","url","buildChart","loadNextListStep","listSpinner","listFeatures","totalFeatures","pagingState","setPickEnabled","enabled","setClusterPrimitive","primitive","clusterPrimitive","setHighlighted","highlight","getGeometryInstanceAttributes","prevColor","color","clearHighlighted","targetId","chartSpinnerService","ZoomLevelService","zoomLevels","defaultExtent","moveEndHandler","nextPosition","previousPosition","getIndex","nextIndex","abs","latitude","longitude","defineProperty","enumerable","configurable","setActive","active","getViewExtent","offset","ClusterHeightWeighter","calculateWeighting","pow","ClusterService","sequence","showClusters","clusterFilter","_refreshClusters","layer","instanceSequence","getZoom","bounds","getBounds","parms","max","rootScope","result","maxRadius","sqrt","geoJson","pointToLayer","geojsonMarkerOptions","fillColor","weight","opacity","fillOpacity","marker","circleMarker","bindLabel","noHide","addTo","movePan","chartService","ClusterChartCtrl","ClusterChartService","hideChart","targetChartId","dataset","innerHTML","propertyData","attKey","attributeName","propertyName","padding","donutWidth","minWidth","minHeight","numberOfCharts","body","clientHeight","clientWidth","top","right","bottom","left","panelWidth","drawLegend","legendPerPage","pageNo","totalPages","selectAll","enter","d","legendWidth","legendSpacing","legendRect","legendText","text","charSpace","sum","round","pageText","prevtriangle","prevLegend","nexttriangle","nextLegend","remove","startIndex","endIndex","dataSubset","seriesSubset","scale","category20","pie","layout","sort","tooltip","path","each","_current","percent","html","pageX","pageY","legendCount","netLegendHeight","floor","ceil","run","$templateCache","put"],"mappings":"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","file":"explorer-rock-properties-components.min.js","sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,"/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var config;\n    (function (config_1) {\n        'use strict';\n        var RocksConfigService = (function () {\n            function RocksConfigService($rootScope) {\n                this.$rootScope = $rootScope;\n            }\n            RocksConfigService.prototype.setConfig = function (config, map) {\n                this.config = config;\n                this.map = map;\n                this.$rootScope.$broadcast(\"rocks.config.ready\");\n            };\n            RocksConfigService.$inject = [\n                \"$rootScope\"\n            ];\n            return RocksConfigService;\n        }());\n        config_1.RocksConfigService = RocksConfigService;\n        angular\n            .module('explorer.rockproperties.config', [])\n            .factory(\"rocksConfigService\", [\"$rootScope\",\n            function ($rootScope) {\n                return new rpComponents.config.RocksConfigService($rootScope);\n            }]);\n    })(config = rpComponents.config || (rpComponents.config = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters\" />\nvar rpComponents;\n(function (rpComponents) {\n    var filters;\n    (function (filters) {\n        'use strict';\n        var RocksClusterFilterCtrl = (function () {\n            function RocksClusterFilterCtrl($scope, clusterService, rocksPanelService, rocksFiltersService) {\n                this.$scope = $scope;\n                this.clusterService = clusterService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n            }\n            RocksClusterFilterCtrl.$inject = [\"$scope\", \"clusterService\", \"rocksPanelService\", \"rocksFiltersService\"];\n            return RocksClusterFilterCtrl;\n        }());\n        filters.RocksClusterFilterCtrl = RocksClusterFilterCtrl;\n        var ClusterFilterState = (function () {\n            function ClusterFilterState() {\n                this.filterQuery = '';\n            }\n            return ClusterFilterState;\n        }());\n        filters.ClusterFilterState = ClusterFilterState;\n        var RocksFiltersService = (function () {\n            function RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterService = clusterService;\n                this.clusterFilterState = clusterFilterState;\n                this.clusterFilters = {};\n                this.$inject = [\n                    \"$http\",\n                    \"$rootScope\",\n                    \"rocksConfigService\",\n                    \"clusterService\",\n                    \"clusterFilterState\"\n                ];\n                // load filter data\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    $http.get(_this.rocksConfigService.config.filterNamesServiceUrl).then(function (response) {\n                        _this.filters = response.data;\n                        for (var i = 0; i < _this.filters.length; i++) {\n                            if (_this.filters[i].filterType == \"PROPERTY\") {\n                                // set up properties array with flag for export\n                                var propertyOptions = angular.copy(_this.filters[i].filterOptions);\n                                for (var j = 0; j < propertyOptions.length; j++) {\n                                    propertyOptions[j] = {\n                                        name: propertyOptions[j],\n                                        isSelected: false\n                                    };\n                                }\n                                var properties = angular.copy(_this.filters[i]);\n                                properties.filterOptions = propertyOptions;\n                                _this.exportProperties = properties;\n                            }\n                        }\n                    }), function (response) {\n                        console.log(\"Failed to get rock props filters\");\n                        console.log(response);\n                    };\n                });\n            }\n            RocksFiltersService.prototype.setAllExportSelected = function (selected) {\n                for (var i = 0; i < this.exportProperties.filterOptions.length; i++) {\n                    this.exportProperties.filterOptions[i].isSelected = selected;\n                }\n            };\n            RocksFiltersService.prototype.applyFilters = function () {\n                this.clusterFilterState.filterQuery = this.buildFilterQuery();\n                this.clusterService.reCluster();\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster filters applied');\n            };\n            RocksFiltersService.prototype.buildFilterQuery = function () {\n                var query = '';\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption') && this.filters[i].ClusterOption) {\n                        query = query + '&filter=' + encodeURIComponent(this.filters[i].filterType + '=' + this.filters[i].ClusterOption);\n                    }\n                }\n                return query;\n            };\n            RocksFiltersService.prototype.clearFilters = function () {\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption')) {\n                        this.filters[i].ClusterOption = false;\n                    }\n                }\n                this.clusterFilterState.filterQuery = \"\";\n                this.clusterService.reCluster();\n            };\n            return RocksFiltersService;\n        }());\n        filters.RocksFiltersService = RocksFiltersService;\n        angular\n            .module('explorer.rockproperties.clusterfilters', [])\n            .controller(\"rocksClusterFilterCtrl\", RocksClusterFilterCtrl)\n            .directive(\"rocksClusterFilters\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-filters.html',\n                controller: RocksClusterFilterCtrl,\n                controllerAs: 'rocksClusterFilterVM'\n            };\n        })\n            .factory(\"rocksFiltersService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"rocksConfigService\",\n            \"clusterService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                return new rpComponents.filters.RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState);\n            }])\n            .factory(\"clusterFilterState\", [function () { return new rpComponents.filters.ClusterFilterState(); }]);\n    })(filters = rpComponents.filters || (rpComponents.filters = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n * Simple loading spinner so we're not tied to any img/icon font's\n */\nvar rpComponents;\n(function (rpComponents) {\n    var spinnerService;\n    (function (spinnerService) {\n        'use strict';\n        var LoadingSpinnerService = (function () {\n            function LoadingSpinnerService() {\n            }\n            LoadingSpinnerService.prototype.addSpinner = function (config) {\n                return function () {\n                    var radius = Math.min(config.width, config.height) / 2;\n                    var tau = 2 * Math.PI;\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius * 0.5)\n                        .outerRadius(radius * 0.9)\n                        .startAngle(0);\n                    var svg = d3.select(config.container).append(\"svg\")\n                        .attr(\"id\", config.id)\n                        .attr(\"width\", config.width)\n                        .attr(\"height\", config.height)\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(\" + config.width / 2 + \",\" + config.height / 2 + \")\");\n                    svg.append(\"path\")\n                        .datum({ endAngle: 0.33 * tau })\n                        .style(\"fill\", \"#4D4D4D\")\n                        .attr(\"d\", arc)\n                        .call(spin, 1500);\n                    function spin(selection, duration) {\n                        selection.transition()\n                            .ease(\"linear\")\n                            .duration(duration)\n                            .attrTween(\"transform\", function () {\n                            return d3.interpolateString(\"rotate(0)\", \"rotate(360)\");\n                        });\n                        setTimeout(function () { spin(selection, duration); }, duration);\n                    }\n                };\n            };\n            return LoadingSpinnerService;\n        }());\n        spinnerService.LoadingSpinnerService = LoadingSpinnerService;\n        angular\n            .module('explorer.rockproperties.spinner', [])\n            .factory(\"loadingSpinnerService\", [function () { return new rpComponents.spinnerService.LoadingSpinnerService(); }]);\n    })(spinnerService = rpComponents.spinnerService || (rpComponents.spinnerService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n *\n * Geoserver Utils, e.g. get list of layers names from web map service.\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var gwsUtilService;\n    (function (gwsUtilService) {\n        'use strict';\n        var GwsUtilService = (function () {\n            function GwsUtilService($q, $http, rocksConfigService) {\n                this.$q = $q;\n                this.$http = $http;\n                this.rocksConfigService = rocksConfigService;\n            }\n            GwsUtilService.prototype.getWfsFeatureTypeNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWfsUrl\n                    + '?request=GetCapabilities&service=wfs&version='\n                    + this.rocksConfigService.config.geoserverWfsVersion).\n                    success(function (data, status, headers, config) {\n                    var layerNames = _this.getFeatureTypeNamesFromWfsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(layerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getFeatureTypeNamesFromWfsCapsJson = function (data) {\n                var layerData = data[\"wfs:WFS_Capabilities\"].FeatureTypeList.FeatureType;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.getWmsLayerNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWmsUrl\n                    + '?request=GetCapabilities&service=wms&version='\n                    + this.rocksConfigService.config.geoserverWmsVersion).\n                    success(function (data, status, headers, config) {\n                    _this.wmsLayerNames = _this.getLayerNamesFromWmsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(_this.wmsLayerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getLayerNamesFromWmsCapsJson = function (data) {\n                var layerData = data.WMS_Capabilities.Capability.Layer.Layer;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.xmlToJson = function (xml) {\n                var obj = {};\n                if (xml.nodeType == 1) {\n                    // do attributes\n                    if (xml.attributes.length > 0) {\n                        obj[\"@attributes\"] = {};\n                        for (var j = 0; j < xml.attributes.length; j++) {\n                            var attribute = xml.attributes.item(j);\n                            obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n                        }\n                    }\n                }\n                else if (xml.nodeType == 3) {\n                    obj = xml.nodeValue;\n                }\n                // do children\n                if (xml.hasChildNodes()) {\n                    for (var i = 0; i < xml.childNodes.length; i++) {\n                        var item = xml.childNodes.item(i);\n                        var nodeName = item.nodeName;\n                        if (typeof (obj[nodeName]) == \"undefined\") {\n                            obj[nodeName] = this.xmlToJson(item);\n                        }\n                        else {\n                            if (typeof (obj[nodeName].push) == \"undefined\") {\n                                var old = obj[nodeName];\n                                obj[nodeName] = [];\n                                obj[nodeName].push(old);\n                            }\n                            obj[nodeName].push(this.xmlToJson(item));\n                        }\n                    }\n                }\n                return obj;\n            };\n            GwsUtilService.$inject = [\n                \"$q\",\n                \"$http\",\n                \"rocksConfigService\"\n            ];\n            return GwsUtilService;\n        }());\n        gwsUtilService.GwsUtilService = GwsUtilService;\n        angular\n            .module('explorer.rockproperties.gwsutil', [])\n            .factory(\"gwsUtilService\", [\"$q\", \"$http\", \"rocksConfigService\",\n            function ($q, $http, rocksConfigService) {\n                return new rpComponents.gwsUtilService.GwsUtilService($q, $http, rocksConfigService);\n            }]);\n    })(gwsUtilService = rpComponents.gwsUtilService || (rpComponents.gwsUtilService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"clipship\" />\n/// <reference path=\"config\" />\n/// <reference path=\"spinner\" />\n/// <reference path=\"gws-util\" />\nvar rpComponents;\n(function (rpComponents) {\n    var queryBuilderExport;\n    (function (queryBuilderExport) {\n        'use strict';\n        var QueryBuilder = (function () {\n            function QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                var _this = this;\n                this.$q = $q;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksConfigService = rocksConfigService;\n                this.gwsUtilService = gwsUtilService;\n                this.propertyQuery = \"\";\n                this.$inject = [\n                    \"$q\",\n                    \"$http\",\n                    \"$rootScope\",\n                    \"loadingSpinnerService\",\n                    \"rocksClipShipService\",\n                    \"rocksConfigService\",\n                    \"gwsUtilService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    // build base query URL from config\n                    _this.baseUrl = _this.rocksConfigService.config.geoserverWfsUrl + \"?\";\n                    angular.forEach(_this.rocksConfigService.config.geoserverWfsExportParams, function (value, key) {\n                        _this.baseUrl += key + \"=\" + value + \"&\";\n                    });\n                    // lose trailing &\n                    _this.baseUrl = _this.baseUrl.slice(0, -1);\n                    // get WFS layer names\n                    _this.gwsUtilService.getWfsFeatureTypeNames().then(function (layerNames) {\n                        _this.wfsLayerNames = layerNames;\n                    });\n                });\n            }\n            QueryBuilder.prototype.startClipShip = function (features, format, extent) {\n                var _this = this;\n                // TODO fire flasher event for UI?\n                this.loading = true;\n                // init spinner\n                if (!this.loadingSpinner) {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 80,\n                        height: 80,\n                        container: \"#rock-clip-ship-loading\",\n                        id: \"clip-ship-spinner\"\n                    });\n                    this.loadingSpinner();\n                }\n                var targetFeatures = [];\n                for (var i = 0; i < features.length; i++) {\n                    if (features[i].isSelected)\n                        targetFeatures.push(features[i].name);\n                }\n                if (format === \"csv\") {\n                    var zip = new JSZip();\n                    // give zip file to decent browsers\n                    if (JSZip.support.blob) {\n                        var promises = [];\n                        // create a Get query for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            var query = this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]);\n                            var promise = this.$http.get(query);\n                            promises.push(promise);\n                        }\n                        this.$q.all(promises).then(function (results) {\n                            for (var i = 0; i < results.length; i++) {\n                                // we'll assume that if there's more than one line we've got data to write\n                                var numberOfLineBreaks = (results[i]['data'].match(/\\n/g) || []).length;\n                                if (numberOfLineBreaks > 1) {\n                                    var filename = _this.wfsLayerNames[i].split(' ').join('-');\n                                    zip.file(filename + \".csv\", results[i]['data'] + \"\\n\");\n                                }\n                            }\n                            // FileSaver.js\n                            var content = zip.generate({ type: \"blob\" });\n                            saveAs(content, \"rocks-export.zip\");\n                            _this.loading = false;\n                            _this.rocksClipShipService.step = 'startDraw';\n                        });\n                    }\n                    else {\n                        // just give separate file for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            window.open(this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]));\n                        }\n                        this.loading = false;\n                    }\n                }\n                else {\n                    // give the user the query url directly\n                    this.exportUrl = this.buildQuery(targetFeatures, extent, format, this.wfsLayerNames);\n                    this.loading = false;\n                }\n            };\n            QueryBuilder.prototype.buildQuery = function (properties, extent, format, layerNames) {\n                var typeNamesQuery = this.getTypeNamesQuery(layerNames);\n                var west = extent.getWest();\n                var east = extent.getEast();\n                var north = extent.getNorth();\n                var south = extent.getSouth();\n                // BBOX and FILTER queries are mutually exclusive, so must use CQL\n                var bboxQuery = \"&CQL_FILTER=BBOX(GEOM,\" + west + \",\" + south + \",\" + east + \",\" + north + \")\";\n                var filterQuery = \"\";\n                var filters = {}; // filterState.filters;\n                var exportFormat = \"&outputFormat=\" + format;\n                var query;\n                var hasFilters = !isEmpty(filters);\n                var filtersHasProperty = filters.hasOwnProperty(\"PROPERTY\");\n                var onlyHasPropertyFilter = (filtersHasProperty && (Object.keys(filters).length === 1)) ? true : false;\n                function isEmpty(obj) {\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop))\n                            return false;\n                    }\n                    return true;\n                }\n                // single feature/layer query with filters\n                if (hasFilters && filtersHasProperty) {\n                    this.propertyQuery = \"%20AND%20PROPERTY='\" + filters['PROPERTY'] + \"'\";\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else if (hasFilters) {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'clipship data export: ' + format);\n                query = this.baseUrl + typeNamesQuery + exportFormat + bboxQuery + filterQuery + this.propertyQuery;\n                return query;\n            };\n            // create filter query for each of the selected attribute values\n            // don't include PROPERTY here as we want to apply OR logic\n            QueryBuilder.prototype.getFilters = function (filters) {\n                var filterString = \"%20AND%20\";\n                // create filters string\n                for (var property in filters) {\n                    if (property !== \"PROPERTY\") {\n                        filterString = filterString.concat(property + \"='\" + filters[property] + \"'%20AND%20\");\n                    }\n                }\n                // trim tailing AND\n                filterString = filterString.substring(0, filterString.length - 9);\n                return filterString;\n            };\n            // build CQL query for properties\n            QueryBuilder.prototype.getPropertyQuery = function (properties) {\n                var query = \"%20AND%20(\";\n                for (var i = 0; i < properties.length; i++) {\n                    query = query.concat(\"PROPERTY='\" + properties[i] + \"'%20OR%20\");\n                }\n                // trim trailing OR, close bracket\n                query = query.substring(0, query.length - 8);\n                query = query.concat(\")\");\n                return query;\n            };\n            QueryBuilder.prototype.getTypeNamesQuery = function (layers) {\n                var query = \"&typeName=\";\n                for (var i = 0; i < layers.length; i++) {\n                    query = query.concat(layers[i] + \",\");\n                }\n                query = query.substring(0, query.length - 1);\n                return query;\n            };\n            return QueryBuilder;\n        }());\n        queryBuilderExport.QueryBuilder = QueryBuilder;\n        angular\n            .module('explorer.rockproperties.queryexport', [])\n            .factory(\"rocksQueryBuilderExport\", [\n            \"$q\",\n            \"$http\",\n            \"$rootScope\",\n            \"loadingSpinnerService\",\n            \"rocksClipShipService\",\n            \"rocksConfigService\",\n            \"gwsUtilService\",\n            function ($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                return new rpComponents.queryBuilderExport.QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService);\n            }]);\n    })(queryBuilderExport = rpComponents.queryBuilderExport || (rpComponents.queryBuilderExport = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"query-builder-export\" />\n/// <reference path=\"cluster-filters\" />\n/// <reference path=\"control-panel\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clipShipService;\n    (function (clipShipService) {\n        'use strict';\n        var RocksClipShipCtrl = (function () {\n            function RocksClipShipCtrl($scope, $timeout, rocksClipShipService, rocksPanelService, rocksFiltersService, rocksQueryBuilderExport) {\n                this.$scope = $scope;\n                this.$timeout = $timeout;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksQueryBuilderExport = rocksQueryBuilderExport;\n            }\n            RocksClipShipCtrl.prototype.startClipShip = function () {\n                var _this = this;\n                this.$timeout(function () {\n                    _this.rocksClipShipService.step = 'download';\n                    _this.rocksQueryBuilderExport.startClipShip(_this.rocksFiltersService.exportProperties.filterOptions, _this.rocksClipShipService.targetFormat, _this.rocksClipShipService.targetExtent);\n                });\n            };\n            RocksClipShipCtrl.$inject = [\n                \"$scope\",\n                \"$timeout\",\n                \"rocksClipShipService\",\n                \"rocksPanelService\",\n                \"rocksFiltersService\",\n                \"rocksQueryBuilderExport\"\n            ];\n            return RocksClipShipCtrl;\n        }());\n        clipShipService.RocksClipShipCtrl = RocksClipShipCtrl;\n        var RocksClipShipService = (function () {\n            function RocksClipShipService($timeout, $rootScope, rocksFiltersService, rocksConfigService) {\n                var _this = this;\n                this.$timeout = $timeout;\n                this.$rootScope = $rootScope;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksConfigService = rocksConfigService;\n                this.step = \"startDraw\";\n                this.isDrawing = false;\n                this.$inject = [\n                    \"$timeout\",\n                    \"$rootScope\",\n                    \"rocksFiltersService\",\n                    \"rocksConfigService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    _this.exportFormats = _this.rocksConfigService.config.geoserverWfsExportFormats;\n                });\n                this.$rootScope.$on(\"rocks.extent.ready\", function (event, data) {\n                    _this.$timeout(function () {\n                        _this.step = \"selectFeatures\";\n                        _this.targetExtent = data;\n                    });\n                });\n            }\n            /**\n             * broadcast event to trigger draw, and return extent\n             */\n            RocksClipShipService.prototype.startDraw = function () {\n                this.isDrawing = true;\n                this.$rootScope.$broadcast(\"draw.extent.start\", \"rocks.extent.ready\");\n            };\n            RocksClipShipService.prototype.openGeoserver = function () {\n                var win = window.open(this.rocksConfigService.config.geoserverDashboardUrl, '_blank');\n                if (win) {\n                    win.focus();\n                }\n            };\n            RocksClipShipService.prototype.updateExportFormat = function (format) {\n                this.targetFormat = format;\n            };\n            return RocksClipShipService;\n        }());\n        clipShipService.RocksClipShipService = RocksClipShipService;\n        angular\n            .module('explorer.rockproperties.clipship', [])\n            .factory(\"rocksClipShipService\", [\"$timeout\", \"$rootScope\", \"rocksFiltersService\", \"rocksConfigService\",\n            function ($timeout, $rootScope, rocksFiltersService, rocksConfigService) {\n                return new rpComponents.clipShipService.RocksClipShipService($timeout, $rootScope, rocksFiltersService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksClipShipCtrl\", RocksClipShipCtrl)\n            .directive(\"rocksClipShip\", function () {\n            return {\n                templateUrl: 'rockprops/clip-ship.html',\n                controller: RocksClipShipCtrl,\n                controllerAs: 'rocksClipShipVM'\n            };\n        })\n            .filter('noClipSelected', [function ($filter) {\n                return function (features) {\n                    if (!features)\n                        return;\n                    for (var i = 0; i < features.length; i++) {\n                        if (features[i].isSelected)\n                            return false;\n                    }\n                    return true;\n                };\n            }]);\n    })(clipShipService = rpComponents.clipShipService || (rpComponents.clipShipService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/spinner\" />\n/// <reference path=\"../components/clipship\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorService;\n    (function (wmsInspectorService_1) {\n        'use strict';\n        var WmsInspectorCtrl = (function () {\n            function WmsInspectorCtrl($scope, wmsInspectorState, wmsInspectorService) {\n                this.$scope = $scope;\n                this.wmsInspectorState = wmsInspectorState;\n                this.wmsInspectorService = wmsInspectorService;\n            }\n            WmsInspectorCtrl.$inject = [\"$scope\", \"wmsInspectorState\", \"wmsInspectorService\"];\n            return WmsInspectorCtrl;\n        }());\n        wmsInspectorService_1.WmsInspectorCtrl = WmsInspectorCtrl;\n        var WmsInspectorService = (function () {\n            function WmsInspectorService($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                var _this = this;\n                this.$timeout = $timeout;\n                this.$rootScope = $rootScope;\n                this.$http = $http;\n                this.mapService = mapService;\n                this.wmsInspectorState = wmsInspectorState;\n                this.assetsService = assetsService;\n                this.configService = configService;\n                this.rocksConfigService = rocksConfigService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.isLoading = false;\n                this.URL_EXCLUDE = \"?SERVICE=WMS&\";\n                this.SURFACE_GEO = \"GA_Surface_Geology_of_Australia\";\n                this.$inject = [\n                    \"$timeout\",\n                    \"$rootScope\",\n                    \"$http\",\n                    'mapService',\n                    \"wmsInspectorState\",\n                    \"assetsService\",\n                    \"configService\",\n                    \"rocksConfigService\",\n                    \"loadingSpinnerService\",\n                    \"gwsUtilService\",\n                    \"rocksClipShipService\"\n                ];\n                var self = this;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    // load feature classes\n                    assetsService.getReferenceFeatureClasses().then(function (features) {\n                        _this.features = features;\n                    });\n                    // init rocks feature\n                    _this.rocksFeature = {\n                        wmsUrl: _this.rocksConfigService.config.geoserverWmsUrl,\n                        name: 'Rock Properties Layer'\n                    };\n                });\n                mapService.getMap().then(function (map) {\n                    map.on('click', mapOn);\n                });\n                function mapOn(data) {\n                    if (!self.inspectorEnabled) {\n                        return;\n                    }\n                    self.$timeout(function () {\n                        data.degrees = {\n                            lat: data.latlng.lat,\n                            lon: data.latlng.lng\n                        };\n                        // TODO should flasher for this so user knows why\n                        // (we don't want inspector interuppting clipship drawing)\n                        if (self.rocksClipShipService.isDrawing) {\n                            return;\n                        }\n                        if (data.latlng) {\n                            // make sure panel is visible\n                            self.$rootScope.$broadcast(\"rocks.accordion.update\", \"wmsInspector\");\n                            self.$rootScope.$broadcast(\"toolbar.toggle.update\", { linked: false, key: \"rocksClusters\", isActive: true });\n                            self.wmsInspectorState.targetGeom = data;\n                            self.wmsInspectorState.view = \"LAYERSELECT\";\n                        }\n                    });\n                }\n            }\n            WmsInspectorService.prototype.togglePointInspector = function () {\n                this.inspectorEnabled = !this.inspectorEnabled;\n            };\n            // TODO we should restrict the query to visible layers\n            WmsInspectorService.prototype.queryRocks = function () {\n                if (!this.rocksFeature.hasOwnProperty('layers') && this.gwsUtilService.wmsLayerNames) {\n                    this.rocksFeature.layers = [];\n                    for (var i = 0; i < this.gwsUtilService.wmsLayerNames.length; i++) {\n                        this.rocksFeature.layers.push(this.rocksConfigService.config.geoserverWmsLayerPrefix +\n                            this.gwsUtilService.wmsLayerNames[i]);\n                    }\n                }\n                this.queryFeature(this.rocksFeature);\n            };\n            WmsInspectorService.prototype.queryFeature = function (feature) {\n                var _this = this;\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'wms inspector query: ' + feature.name);\n                // set view\n                this.wmsInspectorState.view = \"FEATUREINFO\";\n                this.toggleLoading();\n                var targetUrl = feature.wmsUrl;\n                var targetLayers = feature.layers;\n                // clean any endpoints already containing '?'\n                if (targetUrl.indexOf(this.URL_EXCLUDE) > -1) {\n                    targetUrl = targetUrl.substring(0, (targetUrl.length - this.URL_EXCLUDE.length));\n                }\n                var queryString = '?SERVICE=WMS' +\n                    '&REQUEST=GetFeatureInfo' +\n                    '&VERSION=1.1.1' +\n                    '&LAYERS=' + targetLayers +\n                    '&STYLES=' +\n                    '&SRS=EPSG%3A4326' +\n                    '&FORMAT=image%2Fpng' +\n                    // we use the click pos as the bottom left corner\n                    // and offset the top right by ~30 meters\n                    // (can be hard to click on a point if res is too fine)\n                    '&BBOX=' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon + 0.003) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat + 0.003) +\n                    '&QUERY_LAYERS=' + targetLayers +\n                    '&INFO_FORMAT=text%2Fhtml' +\n                    '&FEATURE_COUNT=100' +\n                    '&WIDTH=2' +\n                    '&HEIGHT=2' +\n                    '&X=1' +\n                    '&Y=1' +\n                    '&TRANSPARENT=true' +\n                    '&EXCEPTIONS=application%2Fvnd.ogc.se_xml';\n                // send the query\n                this.$http.get(targetUrl + queryString).success(function (data) {\n                    _this.featureInfo = data;\n                    _this.toggleLoading();\n                })\n                    .error(function (data, status, headers, config) {\n                    console.log(\"Couldn't load WMS GetFeatureInfo\");\n                    this.featureInfo = \"<h5>Couldn't load WMS GetFeatureInfo for this layer.</h5><p>You may not be able to access this function for some layers.</p>\";\n                    this.toggleLoading();\n                });\n            };\n            WmsInspectorService.prototype.toggleLoading = function () {\n                if (this.loadingSpinner) {\n                    this.isLoading = !this.isLoading;\n                }\n                else {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 60,\n                        height: 60,\n                        container: \"#rocks-inspector-loading\",\n                        id: \"rocks-inspector-spinner\"\n                    });\n                    this.loadingSpinner();\n                    this.isLoading = true;\n                }\n            };\n            return WmsInspectorService;\n        }());\n        wmsInspectorService_1.WmsInspectorService = WmsInspectorService;\n        angular\n            .module('explorer.rockproperties.inspector', [])\n            .factory(\"wmsInspectorService\", [\n            \"$timeout\",\n            \"$rootScope\",\n            \"$http\",\n            \"mapService\",\n            \"wmsInspectorState\",\n            \"assetsService\",\n            \"configService\",\n            \"rocksConfigService\",\n            \"loadingSpinnerService\",\n            \"gwsUtilService\",\n            \"rocksClipShipService\",\n            function ($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                return new rpComponents.wmsInspectorService.WmsInspectorService($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService);\n            }])\n            .controller(\"wmsInspectorCtrl\", rpComponents.wmsInspectorService.WmsInspectorCtrl)\n            .directive(\"wmsInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/wms-inspector-panel.html',\n                controller: WmsInspectorCtrl,\n                controllerAs: 'wmsInspectorVM'\n            };\n        });\n    })(wmsInspectorService = rpComponents.wmsInspectorService || (rpComponents.wmsInspectorService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorState;\n    (function (wmsInspectorState) {\n        'use strict';\n        /*\n            The WMS inspector panel can be in 1 of 3 view states:\n            1. INTRO - the default/home shows prompt\n            2. LAYERSELECT - user presented with layers to interrogate with GetFeatureInfo when\n            they have clicked a point on the map\n            3. FEATUREINFO - view to present raw html returned by GetFeatureInfo\n         */\n        var WmsInspectorState = (function () {\n            function WmsInspectorState() {\n                this.view = \"INTRO\";\n            }\n            return WmsInspectorState;\n        }());\n        wmsInspectorState.WmsInspectorState = WmsInspectorState;\n        angular\n            .module('explorer.rockproperties.inspectorstate', [])\n            .factory(\"wmsInspectorState\", [function () { return new rpComponents.wmsInspectorState.WmsInspectorState(); }]);\n    })(wmsInspectorState = rpComponents.wmsInspectorState || (rpComponents.wmsInspectorState = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"config\" />\n/// <reference path=\"../components/control-panel\" />\n/// <reference path=\"../leaflet/wms-inspector\" />\n/// <reference path=\"../leaflet/wms-inspector-state\" />\n/// <reference path=\"gws-util\" />\nvar rpComponents;\n(function (rpComponents) {\n    var pointsService;\n    (function (pointsService) {\n        'use strict';\n        var RocksWmsPointsCtrl = (function () {\n            function RocksWmsPointsCtrl($scope, wmsPointsService, rocksPanelService, wmsInspectorState) {\n                this.$scope = $scope;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorState = wmsInspectorState;\n            }\n            RocksWmsPointsCtrl.$inject = [\"$scope\", \"wmsPointsService\", \"rocksPanelService\", \"wmsInspectorState\"];\n            return RocksWmsPointsCtrl;\n        }());\n        pointsService.RocksWmsPointsCtrl = RocksWmsPointsCtrl;\n        var WmsPointsService = (function () {\n            function WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksConfigService = rocksConfigService;\n                this.wmsInspectorState = wmsInspectorState;\n                this.inspectorEnabled = true;\n                this.masterChecked = true;\n                this.legendParamString = \"\";\n                this.$inject = [\n                    \"$rootScope\",\n                    \"gwsUtilService\",\n                    \"rocksConfigService\",\n                    \"wmsInspectorState\"\n                ];\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            WmsPointsService.prototype.init = function () {\n                var _this = this;\n                this.wmsServiceUrl = this.rocksConfigService.config.geoserverWmsUrl;\n                this.map = this.rocksConfigService.map;\n                this.restrictedBounds = [109, -45, 158, -8];\n                // build our legend param string from config\n                this.legendParamString = \"?\";\n                angular.forEach(this.rocksConfigService.config.geoserverWmsLegendParams, function (value, key) {\n                    _this.legendParamString += key + \"=\" + value + \"&\";\n                });\n                // lose trailing &\n                this.legendParamString = this.legendParamString.slice(0, -1) + \"&LAYER=\";\n                this.gwsUtilService.getWmsLayerNames().then(function (layers) {\n                    _this.layers = layers;\n                    _this.getLegendData();\n                });\n            };\n            WmsPointsService.prototype.togglePoints = function () {\n                this.pointsVisible = !this.pointsVisible;\n                if (this.wmsLayer) {\n                    if (this.pointsVisible) {\n                        this.map.addLayer(this.wmsLayer);\n                    }\n                    else {\n                        this.map.removeLayer(this.wmsLayer);\n                    }\n                }\n                else {\n                    this.updatePointsLayer();\n                }\n                return this.pointsVisible;\n            };\n            WmsPointsService.prototype.toggleChecked = function () {\n                this.masterChecked != this.masterChecked;\n                for (var legend in this.legendData) {\n                    this.legendData[legend]['isSelected'] = this.masterChecked;\n                }\n            };\n            WmsPointsService.prototype.getLegendData = function () {\n                this.legendData = {};\n                for (var i = 0; i < this.layers.length; i++) {\n                    this.legendData[this.layers[i]] = {\n                        legendUrl: this.wmsServiceUrl + this.legendParamString + this.layers[i],\n                        isSelected: true\n                    };\n                }\n            };\n            WmsPointsService.prototype.updatePointsLayer = function () {\n                var targetLayers = [];\n                for (var legend in this.legendData) {\n                    if (this.legendData[legend] && this.legendData[legend]['isSelected'] === true) {\n                        targetLayers.push(legend);\n                    }\n                }\n                if (this.wmsLayer) {\n                    this.map.removeLayer(this.wmsLayer);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'update wms points layer: ' + targetLayers.toString());\n                this.wmsLayer = L.tileLayer.wms(this.wmsServiceUrl, {\n                    layers: targetLayers.toString(),\n                    transparent: true,\n                    format: 'image/png'\n                });\n                this.map.addLayer(this.wmsLayer);\n            };\n            return WmsPointsService;\n        }());\n        pointsService.WmsPointsService = WmsPointsService;\n        angular\n            .module('explorer.rockproperties.wmspoints', [])\n            .factory(\"wmsPointsService\", [\"$rootScope\", \"gwsUtilService\", \"rocksConfigService\", \"wmsInspectorState\",\n            function ($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                return new rpComponents.pointsService.WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState);\n            }])\n            .controller(\"rocksWmsPointsCtrl\", RocksWmsPointsCtrl)\n            .directive(\"rocksWmsPointsLegend\", function () {\n            return {\n                templateUrl: 'rockprops/wms-points-panel.html',\n                controller: RocksWmsPointsCtrl,\n                controllerAs: 'rocksWmsPointsVM'\n            };\n        });\n    })(pointsService = rpComponents.pointsService || (rpComponents.pointsService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters\" />\n/// <reference path=\"../leaflet/wms-inspector\" />\n/// <reference path=\"wms-points\" />\nvar rpComponents;\n(function (rpComponents) {\n    var controlPanel;\n    (function (controlPanel) {\n        'use strict';\n        var RocksPanelCtrl = (function () {\n            function RocksPanelCtrl($scope, rocksPanelService, wmsInspectorService) {\n                var _this = this;\n                this.$scope = $scope;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorService = wmsInspectorService;\n                this.targetPanel = '';\n                this.$scope.$on(\"rocks.accordion.update\", function (event, data) {\n                    _this.targetPanel = data;\n                });\n            }\n            RocksPanelCtrl.prototype.setTargetPanel = function (targetPanel) {\n                this.targetPanel = (this.targetPanel != targetPanel) ? targetPanel : \"\";\n            };\n            RocksPanelCtrl.$inject = [\"$scope\", \"rocksPanelService\", \"wmsInspectorService\"];\n            return RocksPanelCtrl;\n        }());\n        controlPanel.RocksPanelCtrl = RocksPanelCtrl;\n        var RocksPanelService = (function () {\n            function RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                this.$rootScope = $rootScope;\n                this.clusterService = clusterService;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksConfigService = rocksConfigService;\n                this.clustersEnabled = false;\n                this.pointsEnabled = false;\n            }\n            /**\n             *\n             * The entry point for the component.\n             *\n             * @param map\n             * @param clusterServiceUrl\n             * @param wmsServiceUrl\n             * @param pickEnabled\n             */\n            RocksPanelService.prototype.init = function (map, config) {\n                this.map = map;\n                this.rocksConfigService.setConfig(config, map);\n            };\n            RocksPanelService.prototype.toggleClusters = function () {\n                this.clustersEnabled = this.clusterService.toggleClusters();\n            };\n            RocksPanelService.prototype.togglePoints = function () {\n                this.pointsEnabled = this.wmsPointsService.togglePoints();\n            };\n            RocksPanelService.$inject = [\n                \"$rootScope\",\n                \"clusterService\",\n                \"wmsPointsService\",\n                \"rocksConfigService\"\n            ];\n            return RocksPanelService;\n        }());\n        controlPanel.RocksPanelService = RocksPanelService;\n        angular\n            .module('explorer.rockproperties.controlpanel', [])\n            .factory(\"rocksPanelService\", [\n            \"$rootScope\", \"clusterService\", \"wmsPointsService\", \"rocksConfigService\",\n            function ($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                return new rpComponents.controlPanel.RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksPanelCtrl\", RocksPanelCtrl)\n            .directive(\"rocksControlPanel\", function () {\n            return {\n                templateUrl: 'rockprops/control-panel.html',\n                controller: RocksPanelCtrl,\n                controllerAs: 'controlPanelVM'\n            };\n        });\n    })(controlPanel = rpComponents.controlPanel || (rpComponents.controlPanel = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/control-panel\" />\n/// <reference path=\"../components/charts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterInspector;\n    (function (clusterInspector) {\n        'use strict';\n        var ClusterInspectorCtrl = (function () {\n            function ClusterInspectorCtrl($scope, clusterInspectorService, rocksPanelService) {\n                this.$scope = $scope;\n                this.clusterInspectorService = clusterInspectorService;\n                this.rocksPanelService = rocksPanelService;\n            }\n            ClusterInspectorCtrl.$inject = [\"$scope\", \"clusterInspectorService\", \"rocksPanelService\"];\n            return ClusterInspectorCtrl;\n        }());\n        clusterInspector.ClusterInspectorCtrl = ClusterInspectorCtrl;\n        var PagingState = (function () {\n            function PagingState(count, total) {\n                this.count = count;\n                this.total = total;\n            }\n            PagingState.prototype.more = function () {\n                return this.total > this.count;\n            };\n            return PagingState;\n        }());\n        clusterInspector.PagingState = PagingState;\n        var ClusterInspectorService = (function () {\n            function ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, loadingSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.$timeout = $timeout;\n                this.zoomLevelService = zoomLevelService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterChartService = clusterChartService;\n                this.clusterFilterState = clusterFilterState;\n                this.inspectMode = \"CHART\";\n                this.listReady = false;\n                // TODO decide reasonable step size when plugged into real service\n                this.maxListStep = 100;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            /**\n             *\n             \n             * @param map\n             * @param summaryService\n             * @param usePicking\n             */\n            ClusterInspectorService.prototype.init = function () {\n                var _this = this;\n                this.map = this.rocksConfigService.map;\n                this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\n                // setup our pick handler\n                if (this.rocksConfigService.config.useClusterPicking) {\n                    this.$rootScope.$on('rocks.cluster.selected', function (event, data) {\n                        _this.targetPos = data;\n                        _this.listReady = false;\n                        if (_this.inspectMode == \"CHART\") {\n                            _this.chartClusterQuery();\n                        }\n                        else {\n                            _this.listIndex = 0;\n                            _this.listClusterQuery();\n                        }\n                    });\n                }\n            };\n            /**\n             *\n             * Gets a summary of cluster data to pass to chartService.\n             *\n             * @param cluster\n             */\n            ClusterInspectorService.prototype.chartClusterQuery = function () {\n                var _this = this;\n                //  spinner for summary chart load\n                if (this.summarySpinner) {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'block';\n                }\n                else {\n                    this.summarySpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-summary-chart-loading\",\n                        id: \"chart-spinner\"\n                    });\n                    this.summarySpinner();\n                }\n                var args = '/' + this.targetPos.zoom +\n                    '/' + this.targetPos.x +\n                    '/' + this.targetPos.y +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'query' + args;\n                console.log(\"query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.clusterChartService.buildChart(response.data);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector summary charts');\n            };\n            ClusterInspectorService.prototype.loadNextListStep = function () {\n                this.listIndex += this.maxListStep;\n                console.log(\"loadNextListStep \" + this.listIndex);\n                this.listClusterQuery();\n            };\n            ClusterInspectorService.prototype.listClusterQuery = function () {\n                var _this = this;\n                console.log(\"listClusterQuery\");\n                //  spinner for summary chart load\n                if (this.listSpinner) {\n                    document.getElementById(\"cluster-result-list-loading\").style.display = 'block';\n                }\n                else {\n                    this.listSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-result-list-loading\",\n                        id: \"cluster-result-list-spinner\"\n                    });\n                    this.listSpinner();\n                }\n                var args = '/' + this.targetPos.zoom +\n                    '/' + this.targetPos.x +\n                    '/' + this.targetPos.y +\n                    '?maxCount=' + this.maxListStep +\n                    '&startIndex=' + this.listIndex +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'features' + args;\n                console.log(\"features query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.$timeout(function () {\n                            document.getElementById(\"cluster-result-list-loading\").style.display = 'none';\n                            _this.listReady = true;\n                            // step, merge features\n                            if (_this.listIndex != 0) {\n                                _this.listFeatures.features = _this.listFeatures.features.concat(response.data.features);\n                            }\n                            else {\n                                _this.listFeatures = response.data;\n                            }\n                            var morePages = _this.listFeatures.features.length < _this.listFeatures.totalFeatures;\n                            _this.pagingState = new PagingState(_this.listFeatures.features.length, _this.listFeatures.totalFeatures);\n                        }, 1000);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector feature list (startIndex: ' + this.listIndex + ')');\n            };\n            ClusterInspectorService.prototype.setPickEnabled = function (enabled) {\n                if (enabled) {\n                }\n                else {\n                }\n            };\n            ClusterInspectorService.prototype.setClusterPrimitive = function (primitive) {\n                this.clusterPrimitive = primitive;\n            };\n            ClusterInspectorService.prototype.setHighlighted = function (id, highlight) {\n                var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(id);\n                if (attributes && highlight) {\n                    attributes.prevColor = attributes.color;\n                    attributes.color = '#ff00ff';\n                }\n            };\n            ClusterInspectorService.prototype.clearHighlighted = function () {\n                if (this.targetId) {\n                    var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(this.targetId);\n                    if (attributes && attributes.hasOwnProperty('prevColor')) {\n                        attributes.color = attributes.prevColor;\n                    }\n                }\n            };\n            ClusterInspectorService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"$timeout\",\n                \"zoomLevelService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterChartService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterInspectorService;\n        }());\n        clusterInspector.ClusterInspectorService = ClusterInspectorService;\n        angular\n            .module('explorer.rockproperties.clusterinspector', [])\n            .controller(\"clusterInspectorCtrl\", ClusterInspectorCtrl)\n            .directive(\"rocksClusterInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-inspector.html',\n                controller: ClusterInspectorCtrl,\n                controllerAs: 'clusterInspectorVM'\n            };\n        })\n            .factory(\"clusterInspectorService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"$timeout\",\n            \"zoomLevelService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterChartService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                return new rpComponents.clusterInspector.ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState);\n            }]);\n    })(clusterInspector = rpComponents.clusterInspector || (rpComponents.clusterInspector = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n *\n * Handles the arbitrary 'zoom' levels/ranges that we will display different cluster granularities.\n *\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var zoom;\n    (function (zoom) {\n        'use strict';\n        var ZoomLevelService = (function () {\n            function ZoomLevelService($rootScope, rocksConfigService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.zoomLevels = [\n                    5000,\n                    10000,\n                    20000,\n                    30000,\n                    50000,\n                    80000,\n                    200000,\n                    1000000,\n                    1500000,\n                    2000000,\n                    4000000,\n                    6500000,\n                    // these's tiles are pretty broad\n                    8500000,\n                    10000000,\n                    15000000,\n                    100000000\n                ];\n                this.defaultExtent = {\n                    \"west\": 109,\n                    \"south\": -45,\n                    \"east\": 158,\n                    \"north\": -8\n                };\n                this.moveEndHandler = function () {\n                    _this.nextPosition = _this.map;\n                    // changed indexes or exceed threshold for pan, trigger recluster\n                    if ((_this.previousPosition.height > -1 && _this.getIndex(_this.previousPosition.height) != _this.nextIndex) ||\n                        (Math.abs(_this.nextPosition.latitude - _this.previousPosition.latitude) > 0.01 / _this.nextIndex ||\n                            Math.abs(_this.nextPosition.longitude - _this.previousPosition.longitude) > 0.01 / _this.nextIndex) ||\n                        _this.nextIndex == 16) {\n                        _this.$rootScope.$broadcast('rocks.clusters.update', _this.nextIndex);\n                    }\n                    console.log(\"INDEX = \" + _this.nextIndex);\n                    _this.previousPosition = _this.nextPosition;\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.map = _this.rocksConfigService.map;\n                });\n            }\n            Object.defineProperty(ZoomLevelService.prototype, \"nextIndex\", {\n                get: function () {\n                    return this.getIndex(this.nextPosition.height);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             *\n             * Get the lowest index the height fits into\n             *\n             * @param height\n             * @returns {number}\n             */\n            ZoomLevelService.prototype.getIndex = function (height) {\n                for (var i = 0; i < this.zoomLevels.length; i++) {\n                    if (height < this.zoomLevels[i]) {\n                        return this.zoomLevels.length - i;\n                    }\n                }\n                return this.zoomLevels.length - 1;\n            };\n            ZoomLevelService.prototype.setActive = function (active) {\n                console.log(\"setActive called\");\n            };\n            /**\n             *\n             * WKT? GeoJSON? - leave until approach is clearer.\n             * TODO this is here temporarily, more thought needed re managing the buffered extent currently handled by minimap.\n             *\n             * @param offset\n             * @returns {any}\n             */\n            ZoomLevelService.prototype.getViewExtent = function (offset) {\n                return 0;\n            };\n            ZoomLevelService.$inject = [\n                \"$rootScope\",\n                \"rocksConfigService\"\n            ];\n            return ZoomLevelService;\n        }());\n        zoom.ZoomLevelService = ZoomLevelService;\n        angular\n            .module('explorer.rockproperties.zoom', [])\n            .factory(\"zoomLevelService\", [\"$rootScope\", \"rocksConfigService\",\n            function ($rootScope, rocksConfigService) {\n                return new rpComponents.zoom.ZoomLevelService($rootScope, rocksConfigService);\n            }]);\n    })(zoom = rpComponents.zoom || (rpComponents.zoom = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/charts\" />\n/// <reference path=\"../components/config\" />\n/// <reference path=\"../components/cluster-filters\" />\n/// <reference path=\"../components/spinner\" />\n/// <reference path=\"cluster-inspector\" />\n/// <reference path=\"zoom\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterService;\n    (function (clusterService) {\n        'use strict';\n        var ClusterHeightWeighter = (function () {\n            function ClusterHeightWeighter() {\n            }\n            ClusterHeightWeighter.prototype.calculateWeighting = function (zoom) {\n                return Math.pow(1.43, zoom);\n            };\n            return ClusterHeightWeighter;\n        }());\n        clusterService.ClusterHeightWeighter = ClusterHeightWeighter;\n        var ClusterService = (function () {\n            function ClusterService($http, $rootScope, zoomLevelService, clusterChartService, loadingSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.zoomLevelService = zoomLevelService;\n                this.clusterChartService = clusterChartService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterInspectorService = clusterInspectorService;\n                this.clusterFilterState = clusterFilterState;\n                this.sequence = 0;\n                this.showClusters = false;\n                this.clusterFilter = '';\n                /**\n                 *\n                 * We get a performance benefit when we use fewer\n                 * primitives/collections to draw multiple static geometries.\n                 *\n                 */\n                this.reCluster = function () {\n                    _this._refreshClusters();\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.map = _this.rocksConfigService.map;\n                    _this.serviceUrl = _this.rocksConfigService.config.rocksServiceUrl;\n                    _this.init();\n                });\n            }\n            ClusterService.prototype._refreshClusters = function () {\n                var _this = this;\n                if (this.layer) {\n                    this.map.removeLayer(this.layer);\n                    this.layer = null;\n                }\n                var instanceSequence = ++this.sequence;\n                var zoom = this.map.getZoom();\n                var bounds = this.map.getBounds();\n                var parms = [];\n                parms.push(\"xmin=\" + Math.max(bounds.getWest() - 20 / Math.pow(zoom, 1.2), 60));\n                +parms.push(\"xmax=\" + Math.min(bounds.getEast() + 20 / Math.pow(zoom, 1.2), 160));\n                parms.push(\"ymin=\" + Math.max(bounds.getSouth() - 10 / Math.pow(zoom, 1.2), -85));\n                parms.push(\"ymax=\" + Math.min(bounds.getNorth() + 10 / Math.pow(zoom, 1.2), 0));\n                parms.push(\"zoom=\" + (Math.max(zoom, 4)));\n                var geojsonMarkerOptions = {\n                    radius: 8,\n                    fillColor: \"#ff0000\",\n                    color: \"#000\",\n                    weight: 1,\n                    opacity: 1,\n                    fillOpacity: 0.8\n                };\n                var rootScope = this.$rootScope;\n                this.$http.get(this.serviceUrl + \"summary?\" + parms.join(\"&\") + this.clusterFilterState.filterQuery).then(function (result) {\n                    if (instanceSequence < _this.sequence) {\n                        return;\n                    }\n                    var maxRadius = Math.sqrt(d3.max(result.data.features, function (item) {\n                        return item.properties.count;\n                    }));\n                    _this.layer = null;\n                    _this.layer = L.geoJson(result.data, {\n                        pointToLayer: function (feature, latlng) {\n                            var geojsonMarkerOptions = {\n                                radius: 5 + 20 / maxRadius * Math.sqrt(feature.properties.count),\n                                fillColor: \"#ff0000\",\n                                color: \"#000\",\n                                weight: 1,\n                                opacity: 1,\n                                fillOpacity: 0.8\n                            };\n                            var marker = L.circleMarker(latlng, geojsonMarkerOptions)\n                                .bindLabel(\"\" + feature.properties.count, { noHide: true });\n                            marker.on(\"click\", function () {\n                                var id = this.feature.id.split(\"/\");\n                                rootScope.$broadcast('rocks.cluster.selected', {\n                                    zoom: id[0],\n                                    x: id[1],\n                                    y: id[2]\n                                });\n                            });\n                            return marker;\n                        }\n                    });\n                    _this.layer.addTo(_this.map);\n                });\n            };\n            ClusterService.prototype.init = function () {\n                var self = this;\n                this.map.on('zoomend', movePan);\n                this.map.on('dragend', movePan);\n                function movePan(event) {\n                    if (!self.showClusters) {\n                        return;\n                    }\n                    self._refreshClusters();\n                }\n            };\n            ClusterService.prototype.toggleClusters = function () {\n                if (this.showClusters = !this.showClusters) {\n                    this._refreshClusters();\n                }\n                else if (this.layer) {\n                    this.map.removeLayer(this.layer);\n                    this.layer = null;\n                }\n                return this.showClusters;\n            };\n            ClusterService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"zoomLevelService\",\n                \"clusterChartService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterInspectorService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterService;\n        }());\n        clusterService.ClusterService = ClusterService;\n        angular\n            .module('explorer.rockproperties.clusters', [])\n            .factory(\"clusterService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"zoomLevelService\",\n            \"clusterChartService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterInspectorService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                return new rpComponents.clusterService.ClusterService($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState);\n            }]);\n    })(clusterService = rpComponents.clusterService || (rpComponents.clusterService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var chartService;\n    (function (chartService) {\n        'use strict';\n        var ClusterChartCtrl = (function () {\n            function ClusterChartCtrl($scope, clusterChartService, clusterService) {\n                this.$scope = $scope;\n                this.clusterChartService = clusterChartService;\n                this.clusterService = clusterService;\n            }\n            ClusterChartCtrl.$inject = [\"$scope\", \"clusterChartService\", \"clusterService\"];\n            return ClusterChartCtrl;\n        }());\n        chartService.ClusterChartCtrl = ClusterChartCtrl;\n        var ClusterChartService = (function () {\n            function ClusterChartService($http, $rootScope) {\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n            }\n            ClusterChartService.prototype.hideChart = function () {\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: false\n                });\n            };\n            ClusterChartService.prototype.buildChart = function (dataset) {\n                document.getElementById(\"cluster-summary-chart-d3\").innerHTML = \"\";\n                // trigger open/display a chart div\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: \"clusterSummaryChart\"\n                });\n                // push data into array for d3 charting\n                var properties = [];\n                angular.forEach(dataset.properties, function (property, key) {\n                    var propertyData = [];\n                    angular.forEach(property, function (attribute, attKey) {\n                        propertyData.push({ attributeName: attKey, count: attribute });\n                    });\n                    properties.push({ propertyName: key, data: propertyData });\n                });\n                /*---------------------------------------- D3 -----------------------------------------*/\n                // LAYOUT\n                var minWidth = 1250;\n                var minHeight = 255;\n                var numberOfCharts = (properties.length < 7) ? properties.length : 4; // use two rows if we get too many properties\n                var width;\n                var height;\n                var padding;\n                var donutWidth;\n                if (document.body.clientHeight * 0.35 > minHeight && document.body.clientWidth > minWidth) {\n                    padding = { top: 0, right: 10, bottom: 0, left: 10 };\n                    width = document.body.clientWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = document.body.clientHeight * 0.35;\n                    donutWidth = 20;\n                }\n                else {\n                    padding = { top: 0, right: 5, bottom: 0, left: 5 };\n                    width = minWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = minHeight;\n                    donutWidth = 15;\n                }\n                var panelWidth = document.body.clientWidth - (2 * padding.left + padding.right);\n                var radius = Math.min(width, height) / 2;\n                // DATA\n                // build a chart for each property\n                properties.forEach(function (property) {\n                    var color = d3.scale.category20();\n                    var svg = d3.select('#cluster-summary-chart-d3')\n                        .append('svg')\n                        .attr('width', width)\n                        .attr('height', height)\n                        .style('margin-left', padding.left + 'px')\n                        .style('margin-right', padding.right + 'px')\n                        .append('g')\n                        .attr('transform', 'translate(' + (width / 2) +\n                        ',' + ((height / 2) + 10) + ')');\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius - donutWidth)\n                        .outerRadius(radius);\n                    var pie = d3.layout.pie()\n                        .value(function (d) { return d.count; })\n                        .sort(null);\n                    var tooltip = d3.select('#cluster-summary-chart-d3')\n                        .append('div')\n                        .attr('class', 'cluster-summary-tooltip');\n                    tooltip.append('div')\n                        .attr('class', 'attribute');\n                    tooltip.append('div')\n                        .attr('class', 'count');\n                    tooltip.append('div')\n                        .attr('class', 'percent');\n                    var path = svg.selectAll('path')\n                        .data(pie(property.data))\n                        .enter()\n                        .append('path')\n                        .attr('d', arc)\n                        .attr('fill', function (d, i) {\n                        return color(d.data.attributeName);\n                    })\n                        .each(function (d) { this._current = d; });\n                    path.on('mouseover', function (d) {\n                        var total = d3.sum(property.data.map(function (d) {\n                            return d.count;\n                        }));\n                        var percent = Math.round(1000 * d.data.count / total) / 10;\n                        tooltip.select('.attribute').html(d.data.attributeName);\n                        tooltip.select('.count').html(\"Count: \" + d.data.count);\n                        tooltip.select('.percent').html(\"Percent: \" + percent + '%');\n                        tooltip.style('display', 'block');\n                    });\n                    path.on('mouseout', function () {\n                        tooltip.style('display', 'none');\n                    });\n                    path.on('mousemove', function (d) {\n                        var x = (d3.event.pageX > panelWidth - 180) ? d3.event.pageX - 180 : d3.event.pageX;\n                        var y = (d3.event.pageY > document.body.clientHeight - 120) ? d3.event.pageY - 100 : d3.event.pageY + 10;\n                        tooltip\n                            .style('top', y + 'px')\n                            .style('left', x + 'px');\n                    });\n                    // title\n                    svg.append(\"g\")\n                        .attr(\"class\", \"cluster-summary-chart-title\")\n                        .append(\"text\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", -((height / 2) + 7))\n                        .attr(\"dy\", \".71em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"fill\", \"#000\")\n                        .style(\"font-weight\", \"bold\")\n                        .text(property.propertyName);\n                    // PAGINATED LEGEND\n                    var legendCount = property.data.length;\n                    var legendWidth = 15;\n                    var legendSpacing = 6;\n                    var netLegendHeight = (legendWidth + legendSpacing) * legendCount;\n                    var legendPerPage;\n                    var totalPages;\n                    var pageNo;\n                    if ((netLegendHeight / radius) > 1) {\n                        legendPerPage = Math.floor(radius / (legendWidth + legendSpacing));\n                        totalPages = Math.ceil(legendCount / legendPerPage);\n                        pageNo = 1;\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    else {\n                        drawLegend(property.data, Math.floor(radius / (legendWidth + legendSpacing)), 1, 1);\n                    }\n                    /**\n                     *\n                     * Draws paginated legend if we need multiple pages\n                     *\n                     * @param data\n                     * @param legendPerPage\n                     * @param pageNo\n                     * @param totalPages\n                     */\n                    function drawLegend(data, legendPerPage, pageNo, totalPages) {\n                        var legend = svg.selectAll(\"g.legendg\")\n                            .data(data)\n                            .enter().append(\"g\")\n                            .attr('class', 'legendg')\n                            .attr(\"transform\", function (d, i) { return \"translate(\" + -(width / 2.3) + \",\" + ((i * (legendWidth + legendSpacing)) - (height / 4)) + \")\"; });\n                        var legendRect = legend.append(\"rect\")\n                            .attr(\"x\", 45)\n                            .attr(\"width\", legendWidth)\n                            .attr(\"height\", legendWidth)\n                            .attr(\"class\", \"legend\")\n                            .style('fill', function (d, i) { return color(d.attributeName); });\n                        var legendText = legend.append(\"text\")\n                            .attr(\"x\", 65)\n                            .attr(\"y\", 6)\n                            .attr(\"dy\", \".35em\")\n                            .style(\"text-anchor\", \"start\")\n                            .text(function (d) {\n                            // truncate long labels\n                            var charSpace = (radius - 20) / 5;\n                            if (d.attributeName.length > charSpace)\n                                return d.attributeName.substring(0, charSpace) + '...';\n                            else\n                                return d.attributeName;\n                        });\n                        // title tooltips\n                        legendRect.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        legendText.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        if (totalPages > 1) {\n                            var pageText = svg.append(\"g\")\n                                .attr('class', 'pageNo')\n                                .attr(\"transform\", \"translate(\" + (-10) + \",\" + ((legendPerPage + 1) * (legendWidth + legendSpacing) - (height / 4)) + \")\");\n                            pageText.append('text').text(pageNo + '/' + totalPages)\n                                .attr('dx', '.25em');\n                            var prevtriangle = svg.append(\"g\")\n                                .attr('class', 'prev')\n                                .attr(\"transform\", \"translate(\" + (-20) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', prevLegend)\n                                .style('cursor', 'pointer');\n                            var nexttriangle = svg.append(\"g\")\n                                .attr('class', 'next')\n                                .attr(\"transform\", \"translate(\" + (0) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', nextLegend)\n                                .style('cursor', 'pointer');\n                            nexttriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,0, 20,0, 10,10');\n                            prevtriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,10, 20,10, 10,0');\n                            if (pageNo == totalPages) {\n                                nexttriangle.style('opacity', '0.3');\n                                nexttriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                            else if (pageNo == 1) {\n                                prevtriangle.style('opacity', '0.3');\n                                prevtriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                        }\n                    }\n                    function prevLegend() {\n                        pageNo--;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    function nextLegend() {\n                        pageNo++;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var seriesSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                seriesSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(seriesSubset, legendPerPage, pageNo, totalPages);\n                    }\n                });\n                /*---------------------------------------- /D3 -----------------------------------------*/\n                // DEBUG emulate loading..\n                document.getElementById(\"cluster-summary-chart-d3\").style.display = 'none';\n                // chart ready to go\n                setTimeout(function () {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'none';\n                    document.getElementById(\"cluster-summary-chart-d3\").style.display = 'block';\n                }, 1500);\n                return;\n            };\n            ClusterChartService.$inject = [\n                \"$http\",\n                \"$rootScope\"\n            ];\n            return ClusterChartService;\n        }());\n        chartService.ClusterChartService = ClusterChartService;\n        angular\n            .module('explorer.rockproperties.charts', [])\n            .factory(\"clusterChartService\", [\"$http\", \"$rootScope\",\n            function ($http, $rootScope) {\n                return new rpComponents.chartService.ClusterChartService($http, $rootScope);\n            }])\n            .controller(\"clusterChartCtrl\", ClusterChartCtrl)\n            .directive(\"clusterChartSummary\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-summary.html',\n                controller: ClusterChartCtrl,\n                controllerAs: 'clusterChartVM'\n            };\n        });\n    })(chartService = rpComponents.chartService || (rpComponents.chartService = {}));\n})(rpComponents || (rpComponents = {}));\nangular.module(\"explorer.rockproperties.templates\", []).run([\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"rockprops/clip-ship.html\", \"\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'startDraw\\'\\\">\\r\\n\t<h6 class=\\\"dis-inline\\\">\\r\\n\t\t1.\\r\\n\t\t<button ng-click=\\\"rocksClipShipVM.rocksClipShipService.startDraw()\\\" style=\\\"padding: 5px 10px;border-radius: 3px;border: none;\\\">\\r\\n\t\t\tClick here\\r\\n\t\t</button>\\r\\n\t\tto select an area on the map <i class=\\\"fa fa-scissors\\\" style=\\\"font-size: 16px;\\\"></i></h6>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'selectFeatures\\'\\\">\\r\\n\\r\\n\t<h6 class=\\\"dis-inline\\\">2. Select features to download:</h6>\\r\\n\\r\\n\t<div>\\r\\n\\r\\n\t\t<!-- if we have active property filters, use them instead -->\\r\\n\t\t<p ng-show=\\\"hasAnyFilter\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Current filters will be applied to the exported data.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<div ng-hide=\\\"hasAnyFilter\\\">\\r\\n\\r\\n\t\t\t<div style=\\\"padding: 5px; margin-top: 10px; background: #f0f0f0; border-radius: 3px;\\\">\\r\\n\t\t\t\t<label>\\r\\n\t\t\t\t\t<input\\r\\n\t\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\t\tng-model=\\\"masterCheck\\\"\\r\\n\t\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\"\\r\\n\t\t\t\t\t\tng-change=\\\"rocksClipShipVM.rocksFiltersService.setAllExportSelected(masterCheck)\\\" />\\r\\n\t\t\t\t\t{{ masterCheck ? \\'Deselect\\' : \\'Select\\' }} All\\r\\n\t\t\t\t</label>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<label style=\\\"margin-left: 25px;\\\" class=\\\"checkbox\\\" ng-repeat=\\\"property in rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions\\\">\\r\\n\t\t\t\t<input\\r\\n\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\tvalue=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-model=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-checked=\\\"masterCheck\\\"\\r\\n\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\">\\r\\n\t\t\t\t{{ property.name }}\\r\\n\t\t\t</label>\\r\\n\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div style=\\\"margin: 20px 0px 20px 0px;\\\">\\r\\n\t\t\t<label title=\\\"Export Format\\\">Export Format</label>\\r\\n\t\t\t<select ng-change=\\\"rocksClipShipVM.rocksClipShipService.updateExportFormat(exportFormats.SelectedOption)\\\"\\r\\n\t\t\t\t\tng-model=\\\"exportFormats.SelectedOption\\\"\\r\\n\t\t\t\t\tname=\\\"format\\\"\\r\\n\t\t\t\t\tng-options=\\\"option for option in rocksClipShipVM.rocksClipShipService.exportFormats\\\"\\r\\n\t\t\t\t\tng-class=\\\"form-control\\\"\\r\\n\t\t\t\t\tclass=\\\"filter-input\\\"\\r\\n\t\t\t\t\tstyle=\\\"float: right; width: 160px;\\\">\\r\\n\t\t\t\t<option value=\\\"\\\" class=\\\"\\\">--select--</option>\\r\\n\t\t\t</select>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<a ng-click=\\\"rocksClipShipVM.rocksClipShipService.openGeoserver()\\\" style=\\\"font-size: 11px; margin-top: 20px; color: blue; text-decoration: underline;\\\">\\r\\n\t\t\tMore Options via GeoServer Dashboard\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<div style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\t\ttitle=\\\"Cancel Download\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: left;\\\">Cancel</button>\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default focusMe\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.startClipShip()\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: right\\\"\\r\\n\t\t\t\ttitle=\\\"Select one or more reference feature classes before continuing.\\\"\\r\\n\t\t\t\tng-disabled=\\\"(rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions | noClipSelected) || (!rocksClipShipVM.rocksClipShipService.targetFormat)\\\">Next</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'download\\'\\\">\\r\\n\\r\\n\t<h6>3. Data Export:</h6>\\r\\n\\r\\n\t<div ng-hide=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\\r\\n\t\t<p ng-show=\\\"rocksClipShipVM.rocksClipShipService.targetFormat === \\'application/json\\'\\\" style=\\\"margin-top: 40px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Once json has loaded, save page as a .json file.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<p class=\\\"warning-block\\\" style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Large data sets may take several minutes to export.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\ttarget=\\\"_blank\\\"\\r\\n\t\t\thref=\\\"{{rocksClipShipVM.rocksQueryBuilderExport.exportUrl}}\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 30px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-download\\\"></i> Download {{ rocksClipShipVM.rocksClipShipService.targetFormat }}\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\thref=\\\"javascript:;\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'selectFeatures\\'\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 10px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left\\\"></i> Back\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div id=\\\"rock-clip-ship-loading\\\" ng-show=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\t<p>Preparing Data..</p>\\r\\n</div>\");\n        $templateCache.put(\"rockprops/cluster-filters.html\", \"\\r\\n<!-- TODO plug into rock props filter service -->\\r\\n\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to apply filters.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\\r\\n\t<div ng-repeat=\\\"filter in rocksClusterFilterVM.rocksFiltersService.filters\\\" style=\\\"padding-top:7px;position:relative; overflow-x: hidden;overflow-y: auto;\\\">\\r\\n\\r\\n\t\t<label style=\\\"font-size: 11px;\\\" title=\\\"{{filter.filterLabel}}\\\">{{filter.filterLabel}}</label>\\r\\n\t\t<select\\r\\n\t\t\t\tng-model=\\\"filter.ClusterOption\\\"\\r\\n\t\t\t\tname=\\\"filter.filterType\\\"\\r\\n\t\t\t\tng-options=\\\"option as option for option in filter.filterOptions\\\"\\r\\n\t\t\t\tng-class=\\'form-control\\'\\r\\n\t\t\t\tclass=\\'filter-input\\'\\r\\n\t\t\t\tstyle=\\\"float:left;width:100%;position:relative;\\\">\\r\\n\t\t\t<option value=\\\"\\\" selected>--select--</option>\\r\\n\t\t</select>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div style=\\\"text-align: center;\\\">\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.applyFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-filter fa-lg\\\"></i>\\r\\n\t\t\tApply\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.clearFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-remove fa-lg\\\"></i>\\r\\n\t\t\tClear\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<p ng-show=\\\"filterResultCount()\\\" style=\\\"text-align: left; margin: 10px; font-size: 14px;\\\">\\r\\n\t\t\t<strong>Record Count: </strong>\\r\\n\t\t\t14320\\r\\n\t\t</p>\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-inspector.html\", \"\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to use the inspector tool.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\t<p>Click on a cluster to see:</p>\\r\\n\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"CHART\\\"> Summary charts\\r\\n\t</label>\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"LIST\\\"> Results list\\r\\n\t</label>\\r\\n\\r\\n\t<div id=\\\"cluster-result-list-loading\\\" style=\\\"padding-top: 10px; text-align: center;\\\"></div>\\r\\n\\r\\n\\r\\n\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.listReady\\\">\\r\\n\\r\\n\t\t<div ng-if=\\\"clusterInspectorVM.clusterInspectorService.listFeatures.totalFeatures > 0\\\" class=\\\"alert alert-success\\\" style=\\\"margin-top: 30px;\\\">\\r\\n\t\t\tFeatures loaded: {{clusterInspectorVM.clusterInspectorService.pagingState.count}} of \\r\\n\t\t\t\t\t\t\t{{clusterInspectorVM.clusterInspectorService.pagingState.total}}\\r\\n\t\t\t<button ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\"  class=\\\"undecorated btn-sm\\\"\\r\\n\t\t\t\t\tstyle=\\\"float:right\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-repeat=\\\"feature in clusterInspectorVM.clusterInspectorService.listFeatures.features\\\" class=\\\"rocks-result-list-feature\\\">\\r\\n\\r\\n\t\t\t<table class=\\\"table table-hover table-striped\\\">\\r\\n\\r\\n\t\t\t\t<h5>ID: {{feature.id}}</h5>\\r\\n\t\t\t\t<tbody>\\r\\n\t\t\t\t\t<tr>\\r\\n\t\t\t\t\t\t<td><strong>GEOM</strong></td>\\r\\n\t\t\t\t\t\t<td>{{feature.geometry.coordinates[0]}}, {{feature.geometry.coordinates[1]}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t\t<tr ng-repeat=\\\"(key, value) in feature.properties\\\">\\r\\n\t\t\t\t\t\t<td><strong>{{key}}</strong></td>\\r\\n\t\t\t\t\t\t<td>{{value}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t</tbody>\\r\\n\\r\\n\t\t\t</table>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\">\\r\\n\t\t\t<span>{{clusterInspectorVM.clusterInspectorService.pagingState.count}} of {{clusterInspectorVM.clusterInspectorService.pagingState.total}}</span>\\r\\n\t\t\t<span style=\\\"float:right\\\">\\r\\n\t\t\t\t<button class=\\\"undecorated btn-sm\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t\t</span>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-summary.html\", \"<div id=\\\"clusterSummaryChart\\\" ng-show=\\\"chartState.targetChartId == \\'clusterSummaryChart\\'\\\">\\r\\n\\r\\n\t<div class=\\\"btn-group\\\" style=\\\"position: absolute;right: 10px;top: 10px;\\\">\\r\\n\t\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" title=\\\"Close charts\\\" ng-click=\\\"clusterChartVM.clusterChartService.hideChart(); clusterChartVM.clusterService.clearHighlighted();\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times-circle\\\" role=\\\"presentation\\\" style=\\\"font-size:16px; color:black\\\"></i>\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\\r\\n\t<div id=\\\"cluster-summary-chart-d3\\\"></div>\\r\\n\t<div id=\\\"cluster-summary-chart-loading\\\"></div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/control-panel.html\", \"<div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide cluster features\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.clustersEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.toggleClusters()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<button class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clusterFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clusterFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tCluster Features\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clusterFeatures\\'\\\">\\r\\n\\r\\n\t\t<uib-tabset active=\\\"activeJustified\\\" justified=\\\"true\\\">\\r\\n\t\t\t<uib-tab index=\\\"0\\\" heading=\\\"Inspect\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-inspector-panel></rocks-cluster-inspector-panel>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t\t<uib-tab index=\\\"1\\\" heading=\\\"Filter\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-filters></rocks-cluster-filters>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t</uib-tabset>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.pointsEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.togglePoints()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'pointFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'pointFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tPoint Features (WMS)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'pointFeatures\\'\\\">\\r\\n\t\t<rocks-wms-points-legend></rocks-wms-points-legend>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.wmsInspectorService.inspectorEnabled\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'wmsInspector\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'wmsInspector\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tWMS Inspector (GetFeatureInfo)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'wmsInspector\\'\\\">\\r\\n\t\t<wms-inspector-panel></wms-inspector-panel>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"title w100\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clipShip\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clipShip\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tDownload Rock Property Data\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clipShip\\'\\\">\\r\\n\\r\\n\t\t<rocks-clip-ship></rocks-clip-ship>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-inspector-panel.html\", \"<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'INTRO\\'\\\">\\r\\n\t<div ng-if=\\\"wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Click the map to get feature info.</div>\\r\\n\t<div ng-if=\\\"!wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Enable WMS Inspector to interrogate WMS layers.</div>\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'LAYERSELECT\\'\\\">\\r\\n\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\tSelect a layer to query:\\r\\n\t\t<code>\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t</code>\\r\\n\t</p>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t\tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t\tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryRocks()\\\"\\r\\n\t\thref=\\\"javascript:;\\\">\\r\\n\t\tRock Properties Data\\r\\n\t</a>\\r\\n\\r\\n\t<a ng-repeat=\\\"feature in wmsInspectorVM.wmsInspectorService.features\\\"\\r\\n\t\tclass=\\\"btn btn-default\\\"\\r\\n\t   \tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t   \tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryFeature(feature)\\\"\\r\\n\t   \thref=\\\"javascript:;\\\">\\r\\n\t\t{{feature.name}}\\r\\n\t</a>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t   style=\\\"width: 100%; margin-top: 20px\\\"\\r\\n\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t   href=\\\"javascript:;\\\">\\r\\n\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\tCancel\\r\\n\t</a>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'FEATUREINFO\\'\\\">\\r\\n\t<div ng-show=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\t\t<div id=\\\"rocks-inspector-loading\\\"></div>\\r\\n\t</div>\\r\\n\\r\\n\t<div ng-hide=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\t\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\t\tFeature Info for:\\r\\n\t\t\t<code>\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t\t</code>\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<!-- put html here.. -->\\r\\n\t\t<div ng-bind-html=\\\"wmsInspectorVM.wmsInspectorService.featureInfo\\\"></div>\\r\\n\t</div>\\r\\n\\r\\n\t<div>\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'LAYERSELECT\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left fa-lg\\\"></i>\\r\\n\t\t\tBack\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\t\tCancel\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-points-panel.html\", \"<div ng-hide=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\tEnable Point Features to view layers.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\\r\\n\t<div style=\\\"padding: 5px 10px; margin-left: -10px; background: #f0f0f0; border-radius: 3px;\\\">\\r\\n\t\t<label>\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-bind=\\\"rocksWmsPointsVM.wmsPointsService.masterChecked\\\"\\r\\n\t\t\t\tng-disabled=\\\"!rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\"/>\\r\\n\t\t\t{{ rocksWmsPointsVM.wmsPointsService.masterChecked ? \\'Deselect\\' : \\'Select\\' }} all layers\\r\\n\t\t</label>\\r\\n\t</div>\\r\\n\\r\\n\t<div ng-repeat=\\\"legend in rocksWmsPointsVM.wmsPointsService.legendData\\\" class=\\'rocks-points-legend-item\\'>\\r\\n\\r\\n\t\t<label>\\r\\n\t\t\t<input\\r\\n\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\tng-model=\\\"legend.isSelected\\\" />\\r\\n\t\t\t<img ng-src=\\\"{{legend.legendUrl}}\\\" alt=\\\"{{legend}} legend icon\\\" />\\r\\n\t\t</label>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t   style=\\\"width: 100%; margin-top: 20px\\\"\\r\\n\t   ng-click=\\\"rocksWmsPointsVM.wmsPointsService.updatePointsLayer()\\\"\\r\\n\t   href=\\\"javascript:;\\\">\\r\\n\t\t<i class=\\\"fa fa-refresh fa-lg\\\"></i>\\r\\n\t\tUpdate layers\\r\\n\t</a>\\r\\n\\r\\n</div>\");\n    }]);\n",null,null,null],"sourceRoot":"/source/"}