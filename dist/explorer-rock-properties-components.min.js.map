{"version":3,"sources":["components/charts.ts","components/clipship.ts","components/cluster-filters.ts","components/cluster-inspector.ts","components/clusters.ts","components/config.ts","components/control-panel.ts","components/gws-util.ts","components/query-builder-export.ts","components/spinner.ts","components/wms-inspector-state.ts","components/wms-inspector.ts","components/wms-points.ts","components/zoom.ts","explorer-rock-properties-components.min.js","templates/templates.ts"],"names":["rpComponents","chartService","ClusterChartCtrl","$scope","clusterChartService","clusterService","this","$inject","ClusterChartService","$http","$rootScope","prototype","hideChart","$broadcast","targetChartId","buildChart","dataset","document","getElementById","innerHTML","properties","angular","forEach","property","key","propertyData","attribute","attKey","push","attributeName","count","propertyName","data","width","height","padding","donutWidth","minWidth","minHeight","numberOfCharts","length","body","clientHeight","clientWidth","top","right","bottom","left","panelWidth","radius","Math","min","drawLegend","legendPerPage","pageNo","totalPages","legend","svg","selectAll","enter","append","attr","d","i","legendWidth","legendSpacing","legendRect","style","color","legendText","text","charSpace","substring","total","d3","sum","map","round","pageText","prevtriangle","on","prevLegend","nexttriangle","nextLegend","remove","select","startIndex","endIndex","dataSubset","seriesSubset","scale","category20","arc","innerRadius","outerRadius","pie","layout","value","sort","tooltip","path","each","_current","percent","html","x","event","pageX","y","pageY","legendCount","netLegendHeight","floor","ceil","display","setTimeout","module","factory","controller","directive","templateUrl","controllerAs","clipShipService","RocksClipShipCtrl","$timeout","rocksClipShipService","rocksPanelService","rocksFiltersService","rocksQueryBuilderExport","startClipShip","_this","step","exportProperties","filterOptions","targetFormat","targetExtent","RocksClipShipService","rocksConfigService","isDrawing","$on","exportFormats","config","geoserverWfsExportFormats","startDraw","openGeoserver","win","window","open","geoserverDashboardUrl","focus","updateExportFormat","format","filter","$filter","features","isSelected","filters","RocksClusterFilterCtrl","ClusterFilterState","filterQuery","RocksFiltersService","clusterFilterState","clusterFilters","get","filterNamesServiceUrl","then","response","filterType","propertyOptions","copy","j","name","console","log","setAllExportSelected","selected","applyFilters","buildFilterQuery","reCluster","ga","query","hasOwnProperty","ClusterOption","encodeURIComponent","clearFilters","clusterInspector","ClusterInspectorCtrl","clusterInspectorService","PagingState","more","ClusterInspectorService","zoomLevelService","loadingSpinnerService","inspectMode","listReady","maxListStep","init","viewer","serviceUrl","rocksServiceUrl","useClusterPicking","pickHandler","Cesium","ScreenSpaceEventHandler","scene","canvas","pickHandlerAction","movement","pick","position","defined","id","featureType","clearHighlighted","targetId","setHighlighted","targetPos","Ellipsoid","WGS84","cartesianToCartographic","camera","pickEllipsoid","chartClusterQuery","listIndex","listClusterQuery","summarySpinner","addSpinner","container","args","nextIndex","toDegrees","longitude","latitude","method","url","loadNextListStep","listSpinner","listFeatures","concat","totalFeatures","pagingState","setPickEnabled","enabled","setInputAction","ScreenSpaceEventType","LEFT_CLICK","removeInputAction","setClusterPrimitive","primitive","clusterPrimitive","highlight","attributes","getGeometryInstanceAttributes","prevColor","ColorGeometryInstanceAttribute","toValue","Color","fromCssColorString","withAlpha","chartSpinnerService","ClusterHeightWeighter","calculateWeighting","zoom","pow","ClusterService","clusterRangeMeta","maxExtrudeHeight","clusterFilter","clusterInstances","labelCollection","LabelCollection","getClusters","clusters","maxCorrection","maxCount","max","linear","domain","range","clusterProps","computeClusterAttributes","buildClusterInstance","add","buildLabel","drawClusters","toggleClusters","clustersCollection","show","setActive","PrimitiveCollection","primitives","above","limit","below","west","getViewExtent","east","north","south","dx","dy","instances","removeAll","Primitive","geometryInstances","appearance","PerInstanceColorAppearance","translucent","closed","cluster","GeometryInstance","geometry","CircleGeometry","center","Cartesian3","fromDegrees","coordinates","vertexFormat","VERTEX_FORMAT","extrudedHeight","extrudeHeight","fromColor","toString","fillColor","BLACK","outlineColor","RED","font","horizontalOrigin","HorizontalOrigin","CENTER","zoomLevels","maxHeight","nextPosition","attrs","config_1","RocksConfigService","setConfig","controlPanel","RocksPanelCtrl","wmsInspectorService","targetPanel","setTargetPanel","RocksPanelService","wmsPointsService","clustersEnabled","pointsEnabled","togglePoints","gwsUtilService","GwsUtilService","$q","getWfsFeatureTypeNames","deferred","defer","geoserverWfsUrl","geoserverWfsVersion","success","status","headers","layerNames","getFeatureTypeNamesFromWfsCapsJson","xmlToJson","$","parseXML","resolve","error","err","promise","layerData","FeatureTypeList","FeatureType","layers","Name","getWmsLayerNames","geoserverWmsUrl","geoserverWmsVersion","wmsLayerNames","getLayerNamesFromWmsCapsJson","WMS_Capabilities","Capability","Layer","xml","obj","nodeType","item","nodeName","nodeValue","hasChildNodes","childNodes","old","queryBuilderExport","QueryBuilder","propertyQuery","baseUrl","geoserverWfsExportParams","slice","wfsLayerNames","extent","loading","loadingSpinner","targetFeatures","zip","JSZip","support","blob","promises","buildQuery","all","results","numberOfLineBreaks","match","filename","split","join","file","content","generate","type","saveAs","exportUrl","isEmpty","prop","typeNamesQuery","getTypeNamesQuery","bboxQuery","exportFormat","hasFilters","filtersHasProperty","onlyHasPropertyFilter","Object","keys","getFilters","getPropertyQuery","filterString","spinnerService","LoadingSpinnerService","spin","selection","duration","transition","ease","attrTween","interpolateString","tau","PI","startAngle","datum","endAngle","call","wmsInspectorState","WmsInspectorState","view","wmsInspectorService_1","WmsInspectorCtrl","WmsInspectorService","assetsService","configService","isLoading","URL_EXCLUDE","SURFACE_GEO","degrees","lat","cartographic","lon","inspectorEnabled","linked","isActive","targetGeom","cameraHeight","getReferenceFeatureClasses","rocksFeature","wmsUrl","togglePointInspector","queryRocks","geoserverWmsLayerPrefix","queryFeature","feature","toggleLoading","targetUrl","targetLayers","indexOf","queryString","featureInfo","pointsService","RocksWmsPointsCtrl","WmsPointsService","masterChecked","legendParamString","wmsServiceUrl","restrictedBounds","Rectangle","geoserverWmsLegendParams","getLegendData","pointsVisible","wmsLayer","updatePointsLayer","toggleChecked","legendData","legendUrl","imageryLayers","addImageryProvider","WebMapServiceImageryProvider","rectangle","parameters","transparent","enablePickFeatures","alpha","ZoomLevelService","defaultExtent","moveEndHandler","previousPosition","getIndex","abs","defineProperty","enumerable","configurable","active","moveEnd","addEventListener","removeEventListener","offset","ellipsoid","pixelRatio","devicePixelRatio","c2","Cartesian2","leftTop","rightDown","run","$templateCache","put"],"mappings":"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","file":"explorer-rock-properties-components.min.js","sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var chartService;\n    (function (chartService) {\n        'use strict';\n        var ClusterChartCtrl = (function () {\n            function ClusterChartCtrl($scope, clusterChartService, clusterService) {\n                this.$scope = $scope;\n                this.clusterChartService = clusterChartService;\n                this.clusterService = clusterService;\n            }\n            ClusterChartCtrl.$inject = [\"$scope\", \"clusterChartService\", \"clusterService\"];\n            return ClusterChartCtrl;\n        }());\n        chartService.ClusterChartCtrl = ClusterChartCtrl;\n        var ClusterChartService = (function () {\n            function ClusterChartService($http, $rootScope) {\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n            }\n            ClusterChartService.prototype.hideChart = function () {\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: false\n                });\n            };\n            ClusterChartService.prototype.buildChart = function (dataset) {\n                document.getElementById(\"cluster-summary-chart-d3\").innerHTML = \"\";\n                // trigger open/display a chart div\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: \"clusterSummaryChart\"\n                });\n                // push data into array for d3 charting\n                var properties = [];\n                angular.forEach(dataset.properties, function (property, key) {\n                    var propertyData = [];\n                    angular.forEach(property, function (attribute, attKey) {\n                        propertyData.push({ attributeName: attKey, count: attribute });\n                    });\n                    properties.push({ propertyName: key, data: propertyData });\n                });\n                /*---------------------------------------- D3 -----------------------------------------*/\n                // LAYOUT\n                var minWidth = 1250;\n                var minHeight = 255;\n                var numberOfCharts = (properties.length < 7) ? properties.length : 4; // use two rows if we get too many properties\n                var width;\n                var height;\n                var padding;\n                var donutWidth;\n                if (document.body.clientHeight * 0.35 > minHeight && document.body.clientWidth > minWidth) {\n                    padding = { top: 0, right: 10, bottom: 0, left: 10 };\n                    width = document.body.clientWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = document.body.clientHeight * 0.35;\n                    donutWidth = 20;\n                }\n                else {\n                    padding = { top: 0, right: 5, bottom: 0, left: 5 };\n                    width = minWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = minHeight;\n                    donutWidth = 15;\n                }\n                var panelWidth = document.body.clientWidth - (2 * padding.left + padding.right);\n                var radius = Math.min(width, height) / 2;\n                // DATA\n                // build a chart for each property\n                properties.forEach(function (property) {\n                    var color = d3.scale.category20();\n                    var svg = d3.select('#cluster-summary-chart-d3')\n                        .append('svg')\n                        .attr('width', width)\n                        .attr('height', height)\n                        .style('margin-left', padding.left + 'px')\n                        .style('margin-right', padding.right + 'px')\n                        .append('g')\n                        .attr('transform', 'translate(' + (width / 2) +\n                        ',' + ((height / 2) + 10) + ')');\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius - donutWidth)\n                        .outerRadius(radius);\n                    var pie = d3.layout.pie()\n                        .value(function (d) { return d.count; })\n                        .sort(null);\n                    var tooltip = d3.select('#cluster-summary-chart-d3')\n                        .append('div')\n                        .attr('class', 'cluster-summary-tooltip');\n                    tooltip.append('div')\n                        .attr('class', 'attribute');\n                    tooltip.append('div')\n                        .attr('class', 'count');\n                    tooltip.append('div')\n                        .attr('class', 'percent');\n                    var path = svg.selectAll('path')\n                        .data(pie(property.data))\n                        .enter()\n                        .append('path')\n                        .attr('d', arc)\n                        .attr('fill', function (d, i) {\n                        return color(d.data.attributeName);\n                    })\n                        .each(function (d) { this._current = d; });\n                    path.on('mouseover', function (d) {\n                        var total = d3.sum(property.data.map(function (d) {\n                            return d.count;\n                        }));\n                        var percent = Math.round(1000 * d.data.count / total) / 10;\n                        tooltip.select('.attribute').html(d.data.attributeName);\n                        tooltip.select('.count').html(\"Count: \" + d.data.count);\n                        tooltip.select('.percent').html(\"Percent: \" + percent + '%');\n                        tooltip.style('display', 'block');\n                    });\n                    path.on('mouseout', function () {\n                        tooltip.style('display', 'none');\n                    });\n                    path.on('mousemove', function (d) {\n                        var x = (d3.event.pageX > panelWidth - 180) ? d3.event.pageX - 180 : d3.event.pageX;\n                        var y = (d3.event.pageY > document.body.clientHeight - 120) ? d3.event.pageY - 100 : d3.event.pageY + 10;\n                        tooltip\n                            .style('top', y + 'px')\n                            .style('left', x + 'px');\n                    });\n                    // title\n                    svg.append(\"g\")\n                        .attr(\"class\", \"cluster-summary-chart-title\")\n                        .append(\"text\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", -((height / 2) + 7))\n                        .attr(\"dy\", \".71em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"fill\", \"#000\")\n                        .style(\"font-weight\", \"bold\")\n                        .text(property.propertyName);\n                    // PAGINATED LEGEND\n                    var legendCount = property.data.length;\n                    var legendWidth = 15;\n                    var legendSpacing = 6;\n                    var netLegendHeight = (legendWidth + legendSpacing) * legendCount;\n                    var legendPerPage;\n                    var totalPages;\n                    var pageNo;\n                    if ((netLegendHeight / radius) > 1) {\n                        legendPerPage = Math.floor(radius / (legendWidth + legendSpacing));\n                        totalPages = Math.ceil(legendCount / legendPerPage);\n                        pageNo = 1;\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    else {\n                        drawLegend(property.data, Math.floor(radius / (legendWidth + legendSpacing)), 1, 1);\n                    }\n                    /**\n                     *\n                     * Draws paginated legend if we need multiple pages\n                     *\n                     * @param data\n                     * @param legendPerPage\n                     * @param pageNo\n                     * @param totalPages\n                     */\n                    function drawLegend(data, legendPerPage, pageNo, totalPages) {\n                        var legend = svg.selectAll(\"g.legendg\")\n                            .data(data)\n                            .enter().append(\"g\")\n                            .attr('class', 'legendg')\n                            .attr(\"transform\", function (d, i) { return \"translate(\" + -(width / 2.3) + \",\" + ((i * (legendWidth + legendSpacing)) - (height / 4)) + \")\"; });\n                        var legendRect = legend.append(\"rect\")\n                            .attr(\"x\", 45)\n                            .attr(\"width\", legendWidth)\n                            .attr(\"height\", legendWidth)\n                            .attr(\"class\", \"legend\")\n                            .style('fill', function (d, i) { return color(d.attributeName); });\n                        var legendText = legend.append(\"text\")\n                            .attr(\"x\", 65)\n                            .attr(\"y\", 6)\n                            .attr(\"dy\", \".35em\")\n                            .style(\"text-anchor\", \"start\")\n                            .text(function (d) {\n                            // truncate long labels\n                            var charSpace = (radius - 20) / 5;\n                            if (d.attributeName.length > charSpace)\n                                return d.attributeName.substring(0, charSpace) + '...';\n                            else\n                                return d.attributeName;\n                        });\n                        // title tooltips\n                        legendRect.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        legendText.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        if (totalPages > 1) {\n                            var pageText = svg.append(\"g\")\n                                .attr('class', 'pageNo')\n                                .attr(\"transform\", \"translate(\" + (-10) + \",\" + ((legendPerPage + 1) * (legendWidth + legendSpacing) - (height / 4)) + \")\");\n                            pageText.append('text').text(pageNo + '/' + totalPages)\n                                .attr('dx', '.25em');\n                            var prevtriangle = svg.append(\"g\")\n                                .attr('class', 'prev')\n                                .attr(\"transform\", \"translate(\" + (-20) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', prevLegend)\n                                .style('cursor', 'pointer');\n                            var nexttriangle = svg.append(\"g\")\n                                .attr('class', 'next')\n                                .attr(\"transform\", \"translate(\" + (0) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', nextLegend)\n                                .style('cursor', 'pointer');\n                            nexttriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,0, 20,0, 10,10');\n                            prevtriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,10, 20,10, 10,0');\n                            if (pageNo == totalPages) {\n                                nexttriangle.style('opacity', '0.3');\n                                nexttriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                            else if (pageNo == 1) {\n                                prevtriangle.style('opacity', '0.3');\n                                prevtriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                        }\n                    }\n                    function prevLegend() {\n                        pageNo--;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    function nextLegend() {\n                        pageNo++;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var seriesSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                seriesSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(seriesSubset, legendPerPage, pageNo, totalPages);\n                    }\n                });\n                /*---------------------------------------- /D3 -----------------------------------------*/\n                // DEBUG emulate loading..\n                document.getElementById(\"cluster-summary-chart-d3\").style.display = 'none';\n                // chart ready to go\n                setTimeout(function () {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'none';\n                    document.getElementById(\"cluster-summary-chart-d3\").style.display = 'block';\n                }, 1500);\n                return;\n            };\n            ClusterChartService.$inject = [\n                \"$http\",\n                \"$rootScope\"\n            ];\n            return ClusterChartService;\n        }());\n        chartService.ClusterChartService = ClusterChartService;\n        angular\n            .module('explorer.rockproperties.charts', [])\n            .factory(\"clusterChartService\", [\"$http\", \"$rootScope\",\n            function ($http, $rootScope) {\n                return new rpComponents.chartService.ClusterChartService($http, $rootScope);\n            }])\n            .controller(\"clusterChartCtrl\", ClusterChartCtrl)\n            .directive(\"clusterChartSummary\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-summary.html',\n                controller: ClusterChartCtrl,\n                controllerAs: 'clusterChartVM'\n            };\n        });\n    })(chartService = rpComponents.chartService || (rpComponents.chartService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clipShipService;\n    (function (clipShipService) {\n        'use strict';\n        var RocksClipShipCtrl = (function () {\n            function RocksClipShipCtrl($scope, $timeout, rocksClipShipService, rocksPanelService, rocksFiltersService, rocksQueryBuilderExport) {\n                this.$scope = $scope;\n                this.$timeout = $timeout;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksQueryBuilderExport = rocksQueryBuilderExport;\n            }\n            RocksClipShipCtrl.prototype.startClipShip = function () {\n                var _this = this;\n                this.$timeout(function () {\n                    _this.rocksClipShipService.step = 'download';\n                    _this.rocksQueryBuilderExport.startClipShip(_this.rocksFiltersService.exportProperties.filterOptions, _this.rocksClipShipService.targetFormat, _this.rocksClipShipService.targetExtent);\n                });\n            };\n            RocksClipShipCtrl.$inject = [\n                \"$scope\",\n                \"$timeout\",\n                \"rocksClipShipService\",\n                \"rocksPanelService\",\n                \"rocksFiltersService\",\n                \"rocksQueryBuilderExport\"\n            ];\n            return RocksClipShipCtrl;\n        }());\n        clipShipService.RocksClipShipCtrl = RocksClipShipCtrl;\n        var RocksClipShipService = (function () {\n            function RocksClipShipService($rootScope, rocksFiltersService, rocksConfigService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksConfigService = rocksConfigService;\n                this.step = \"startDraw\";\n                this.isDrawing = false;\n                this.$inject = [\n                    \"$rootScope\",\n                    \"rocksFiltersService\",\n                    \"rocksConfigService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    _this.exportFormats = _this.rocksConfigService.config.geoserverWfsExportFormats;\n                });\n                this.$rootScope.$on(\"rocks.extent.ready\", function (event, data) {\n                    _this.step = \"selectFeatures\";\n                    _this.targetExtent = data;\n                });\n            }\n            /**\n             * broadcast event to trigger draw, and return extent\n             */\n            RocksClipShipService.prototype.startDraw = function () {\n                this.isDrawing = true;\n                this.$rootScope.$broadcast(\"draw.extent.start\", \"rocks.extent.ready\");\n            };\n            RocksClipShipService.prototype.openGeoserver = function () {\n                var win = window.open(this.rocksConfigService.config.geoserverDashboardUrl, '_blank');\n                if (win) {\n                    win.focus();\n                }\n            };\n            RocksClipShipService.prototype.updateExportFormat = function (format) {\n                this.targetFormat = format;\n            };\n            return RocksClipShipService;\n        }());\n        clipShipService.RocksClipShipService = RocksClipShipService;\n        angular\n            .module('explorer.rockproperties.clipship', [])\n            .factory(\"rocksClipShipService\", [\"$rootScope\", \"rocksFiltersService\", \"rocksConfigService\",\n            function ($rootScope, rocksFiltersService, rocksConfigService) {\n                return new rpComponents.clipShipService.RocksClipShipService($rootScope, rocksFiltersService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksClipShipCtrl\", RocksClipShipCtrl)\n            .directive(\"rocksClipShip\", function () {\n            return {\n                templateUrl: 'rockprops/clip-ship.html',\n                controller: RocksClipShipCtrl,\n                controllerAs: 'rocksClipShipVM'\n            };\n        })\n            .filter('noClipSelected', [function ($filter) {\n                return function (features) {\n                    if (!features)\n                        return;\n                    for (var i = 0; i < features.length; i++) {\n                        if (features[i].isSelected)\n                            return false;\n                    }\n                    return true;\n                };\n            }]);\n    })(clipShipService = rpComponents.clipShipService || (rpComponents.clipShipService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var filters;\n    (function (filters) {\n        'use strict';\n        var RocksClusterFilterCtrl = (function () {\n            function RocksClusterFilterCtrl($scope, clusterService, rocksPanelService, rocksFiltersService) {\n                this.$scope = $scope;\n                this.clusterService = clusterService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n            }\n            RocksClusterFilterCtrl.$inject = [\"$scope\", \"clusterService\", \"rocksPanelService\", \"rocksFiltersService\"];\n            return RocksClusterFilterCtrl;\n        }());\n        filters.RocksClusterFilterCtrl = RocksClusterFilterCtrl;\n        var ClusterFilterState = (function () {\n            function ClusterFilterState() {\n                this.filterQuery = '';\n            }\n            return ClusterFilterState;\n        }());\n        filters.ClusterFilterState = ClusterFilterState;\n        var RocksFiltersService = (function () {\n            function RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterService = clusterService;\n                this.clusterFilterState = clusterFilterState;\n                this.clusterFilters = {};\n                this.$inject = [\n                    \"$http\",\n                    \"$rootScope\",\n                    \"rocksConfigService\",\n                    \"clusterService\",\n                    \"clusterFilterState\"\n                ];\n                // load filter data\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    $http.get(_this.rocksConfigService.config.filterNamesServiceUrl).then(function (response) {\n                        _this.filters = response.data;\n                        for (var i = 0; i < _this.filters.length; i++) {\n                            if (_this.filters[i].filterType == \"PROPERTY\") {\n                                // set up properties array with flag for export\n                                var propertyOptions = angular.copy(_this.filters[i].filterOptions);\n                                for (var j = 0; j < propertyOptions.length; j++) {\n                                    propertyOptions[j] = {\n                                        name: propertyOptions[j],\n                                        isSelected: false\n                                    };\n                                }\n                                var properties = angular.copy(_this.filters[i]);\n                                properties.filterOptions = propertyOptions;\n                                _this.exportProperties = properties;\n                            }\n                        }\n                    }), function (response) {\n                        console.log(\"Failed to get rock props filters\");\n                        console.log(response);\n                    };\n                });\n            }\n            RocksFiltersService.prototype.setAllExportSelected = function (selected) {\n                for (var i = 0; i < this.exportProperties.filterOptions.length; i++) {\n                    this.exportProperties.filterOptions[i].isSelected = selected;\n                }\n            };\n            RocksFiltersService.prototype.applyFilters = function () {\n                this.clusterFilterState.filterQuery = this.buildFilterQuery();\n                this.clusterService.reCluster();\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster filters applied');\n            };\n            RocksFiltersService.prototype.buildFilterQuery = function () {\n                var query = '';\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption') && this.filters[i].ClusterOption) {\n                        query = query + '&filter=' + encodeURIComponent(this.filters[i].filterType + '=' + this.filters[i].ClusterOption);\n                    }\n                }\n                return query;\n            };\n            RocksFiltersService.prototype.clearFilters = function () {\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption')) {\n                        this.filters[i].ClusterOption = false;\n                    }\n                }\n                this.clusterFilterState.filterQuery = \"\";\n                this.clusterService.reCluster();\n            };\n            return RocksFiltersService;\n        }());\n        filters.RocksFiltersService = RocksFiltersService;\n        angular\n            .module('explorer.rockproperties.clusterfilters', [])\n            .controller(\"rocksClusterFilterCtrl\", RocksClusterFilterCtrl)\n            .directive(\"rocksClusterFilters\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-filters.html',\n                controller: RocksClusterFilterCtrl,\n                controllerAs: 'rocksClusterFilterVM'\n            };\n        })\n            .factory(\"rocksFiltersService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"rocksConfigService\",\n            \"clusterService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                return new rpComponents.filters.RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState);\n            }])\n            .factory(\"clusterFilterState\", [function () { return new rpComponents.filters.ClusterFilterState(); }]);\n    })(filters = rpComponents.filters || (rpComponents.filters = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterInspector;\n    (function (clusterInspector) {\n        'use strict';\n        var ClusterInspectorCtrl = (function () {\n            function ClusterInspectorCtrl($scope, clusterInspectorService, rocksPanelService) {\n                this.$scope = $scope;\n                this.clusterInspectorService = clusterInspectorService;\n                this.rocksPanelService = rocksPanelService;\n            }\n            ClusterInspectorCtrl.$inject = [\"$scope\", \"clusterInspectorService\", \"rocksPanelService\"];\n            return ClusterInspectorCtrl;\n        }());\n        clusterInspector.ClusterInspectorCtrl = ClusterInspectorCtrl;\n        var PagingState = (function () {\n            function PagingState(count, total) {\n                this.count = count;\n                this.total = total;\n            }\n            PagingState.prototype.more = function () {\n                return this.total > this.count;\n            };\n            return PagingState;\n        }());\n        clusterInspector.PagingState = PagingState;\n        var ClusterInspectorService = (function () {\n            function ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, loadingSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.$timeout = $timeout;\n                this.zoomLevelService = zoomLevelService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterChartService = clusterChartService;\n                this.clusterFilterState = clusterFilterState;\n                this.inspectMode = \"CHART\";\n                this.listReady = false;\n                // TODO decide reasonable step size when plugged into real service\n                this.maxListStep = 100;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            /**\n             *\n             \n             * @param viewer\n             * @param summaryService\n             * @param usePicking\n             */\n            ClusterInspectorService.prototype.init = function () {\n                var _this = this;\n                this.viewer = this.rocksConfigService.viewer;\n                this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\n                // setup our pick handler\n                if (this.rocksConfigService.config.useClusterPicking) {\n                    this.pickHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\n                    this.pickHandlerAction = function (movement) {\n                        var pick = _this.viewer.scene.pick(movement.position);\n                        if (Cesium.defined(pick) && Cesium.defined(pick.id) && pick.id.hasOwnProperty('properties') && pick.id.properties.featureType == 'rockPropsCluster') {\n                            _this.listReady = false;\n                            _this.clearHighlighted();\n                            _this.targetId = pick.id;\n                            _this.setHighlighted(_this.targetId, true);\n                            _this.targetPos = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.pickEllipsoid(movement.position));\n                            if (_this.inspectMode == \"CHART\") {\n                                _this.chartClusterQuery();\n                            }\n                            else {\n                                _this.listIndex = 0;\n                                _this.listClusterQuery();\n                            }\n                        }\n                    };\n                }\n            };\n            /**\n             *\n             * Gets a summary of cluster data to pass to chartService.\n             *\n             * @param cluster\n             */\n            ClusterInspectorService.prototype.chartClusterQuery = function () {\n                var _this = this;\n                //  spinner for summary chart load\n                if (this.summarySpinner) {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'block';\n                }\n                else {\n                    this.summarySpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-summary-chart-loading\",\n                        id: \"chart-spinner\"\n                    });\n                    this.summarySpinner();\n                }\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&x=' + Cesium.Math.toDegrees(this.targetPos.longitude) +\n                    '&y=' + Cesium.Math.toDegrees(this.targetPos.latitude) +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'query' + args;\n                console.log(\"query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.clusterChartService.buildChart(response.data);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector summary charts');\n            };\n            ClusterInspectorService.prototype.loadNextListStep = function () {\n                this.listIndex += this.maxListStep;\n                console.log(\"loadNextListStep \" + this.listIndex);\n                this.listClusterQuery();\n            };\n            ClusterInspectorService.prototype.listClusterQuery = function () {\n                var _this = this;\n                console.log(\"listClusterQuery\");\n                //  spinner for summary chart load\n                if (this.listSpinner) {\n                    document.getElementById(\"cluster-result-list-loading\").style.display = 'block';\n                }\n                else {\n                    this.listSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-result-list-loading\",\n                        id: \"cluster-result-list-spinner\"\n                    });\n                    this.listSpinner();\n                }\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&maxCount=' + this.maxListStep +\n                    '&startIndex=' + this.listIndex +\n                    '&x=' + Cesium.Math.toDegrees(this.targetPos.longitude) +\n                    '&y=' + Cesium.Math.toDegrees(this.targetPos.latitude) +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'features' + args;\n                console.log(\"features query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    // mock\n                    //url: this.serviceUrl + '/mock-feature-list.json'\n                    // real service\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.$timeout(function () {\n                            document.getElementById(\"cluster-result-list-loading\").style.display = 'none';\n                            _this.listReady = true;\n                            // step, merge features\n                            if (_this.listIndex != 0) {\n                                _this.listFeatures.features = _this.listFeatures.features.concat(response.data.features);\n                            }\n                            else {\n                                _this.listFeatures = response.data;\n                            }\n                            var morePages = _this.listFeatures.features.length < _this.listFeatures.totalFeatures;\n                            _this.pagingState = new PagingState(_this.listFeatures.features.length, _this.listFeatures.totalFeatures);\n                        }, 1000);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector feature list (startIndex: ' + this.listIndex + ')');\n            };\n            ClusterInspectorService.prototype.setPickEnabled = function (enabled) {\n                if (enabled) {\n                    this.pickHandler.setInputAction(this.pickHandlerAction, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n                }\n                else {\n                    this.pickHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n                }\n            };\n            ClusterInspectorService.prototype.setClusterPrimitive = function (primitive) {\n                this.clusterPrimitive = primitive;\n            };\n            ClusterInspectorService.prototype.setHighlighted = function (id, highlight) {\n                var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(id);\n                if (attributes && highlight) {\n                    attributes.prevColor = attributes.color;\n                    attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.fromCssColorString('#ff00ff').withAlpha(1));\n                }\n            };\n            ClusterInspectorService.prototype.clearHighlighted = function () {\n                if (this.targetId) {\n                    var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(this.targetId);\n                    if (attributes && attributes.hasOwnProperty('prevColor')) {\n                        attributes.color = attributes.prevColor;\n                    }\n                }\n            };\n            ClusterInspectorService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"$timeout\",\n                \"zoomLevelService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterChartService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterInspectorService;\n        }());\n        clusterInspector.ClusterInspectorService = ClusterInspectorService;\n        angular\n            .module('explorer.rockproperties.clusterinspector', [])\n            .controller(\"clusterInspectorCtrl\", ClusterInspectorCtrl)\n            .directive(\"rocksClusterInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-inspector.html',\n                controller: ClusterInspectorCtrl,\n                controllerAs: 'clusterInspectorVM'\n            };\n        })\n            .factory(\"clusterInspectorService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"$timeout\",\n            \"zoomLevelService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterChartService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                return new rpComponents.clusterInspector.ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState);\n            }]);\n    })(clusterInspector = rpComponents.clusterInspector || (rpComponents.clusterInspector = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterService;\n    (function (clusterService) {\n        'use strict';\n        var ClusterHeightWeighter = (function () {\n            function ClusterHeightWeighter() {\n            }\n            ClusterHeightWeighter.prototype.calculateWeighting = function (zoom) {\n                return Math.pow(1.43, zoom);\n            };\n            return ClusterHeightWeighter;\n        }());\n        clusterService.ClusterHeightWeighter = ClusterHeightWeighter;\n        var ClusterService = (function () {\n            function ClusterService($http, $rootScope, zoomLevelService, clusterChartService, loadingSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.zoomLevelService = zoomLevelService;\n                this.clusterChartService = clusterChartService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterInspectorService = clusterInspectorService;\n                this.clusterFilterState = clusterFilterState;\n                this.clusterRangeMeta = {\n                    maxExtrudeHeight: 6000000\n                };\n                this.clusterFilter = '';\n                /**\n                 *\n                 * We get a performance benefit when we use fewer\n                 * primitives/collections to draw multiple static geometries.\n                 *\n                 */\n                this.reCluster = function () {\n                    var clusterInstances = [];\n                    var labelCollection = new Cesium.LabelCollection();\n                    _this.getClusters().then(function (response) {\n                        if (response.data && response.data.features) {\n                            var clusters = response.data.features;\n                            // use d3 to build a scale for our extrude heights; we need to build a diff scale\n                            // for each zoom level, as we can't guarantee they'll start at the top and work down\n                            // (if we add persistence)\n                            var maxCorrection = new ClusterHeightWeighter().calculateWeighting(_this.zoomLevelService.nextIndex);\n                            _this.clusterRangeMeta.maxCount = d3.max(clusters, function (d) { return d.properties.count; });\n                            _this.clusterRangeMeta.scale = d3.scale.linear()\n                                .domain([0, _this.clusterRangeMeta.maxCount])\n                                .range([0, _this.clusterRangeMeta.maxExtrudeHeight / maxCorrection]);\n                            for (var i = 0; i < clusters.length; i++) {\n                                // tag id with type for pick handling\n                                clusters[i].properties['featureType'] = 'rockPropsCluster';\n                                var clusterProps = _this.computeClusterAttributes(clusters[i].properties.count);\n                                clusterInstances.push(_this.buildClusterInstance(clusters[i], clusterProps));\n                                labelCollection.add(_this.buildLabel(clusters[i], clusterProps)); // No lables for the short term\n                            }\n                            _this.drawClusters(clusterInstances, labelCollection);\n                        }\n                        else {\n                            console.log(\"got no clusters\");\n                            console.log(response);\n                        }\n                    });\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.viewer = _this.rocksConfigService.viewer;\n                    _this.serviceUrl = _this.rocksConfigService.config.rocksServiceUrl;\n                });\n                this.$rootScope.$on('rocks.clusters.update', function () {\n                    _this.reCluster();\n                });\n            }\n            ClusterService.prototype.toggleClusters = function () {\n                if (this.clustersCollection) {\n                    this.clustersCollection.show = !this.clustersCollection.show;\n                    this.zoomLevelService.setActive(this.clustersCollection.show);\n                    if (this.clustersCollection.show) {\n                        this.clusterInspectorService.setPickEnabled(true);\n                    }\n                    else {\n                        this.clusterInspectorService.setPickEnabled(false);\n                    }\n                    this.reCluster();\n                }\n                else {\n                    this.clustersCollection = new Cesium.PrimitiveCollection();\n                    this.viewer.scene.primitives.add(this.clustersCollection);\n                    this.zoomLevelService.setActive(true);\n                    this.reCluster();\n                    this.clusterInspectorService.setPickEnabled(true);\n                }\n                return this.clustersCollection.show;\n            };\n            /**\n             *\n             * TODO filters\n             *\n             * @returns {IHttpPromise<T>}\n             */\n            ClusterService.prototype.getClusters = function () {\n                var west = this.zoomLevelService.getViewExtent(100).west;\n                var east = this.zoomLevelService.getViewExtent(100).east;\n                var north = this.zoomLevelService.getViewExtent(100).north;\n                var south = this.zoomLevelService.getViewExtent(100).south;\n                var dx = (east - west) * .2;\n                var dy = (north - south) * .2;\n                // args\n                var args = '?zoom=' + this.zoomLevelService.nextIndex +\n                    '&xmin=' + above(west - dx, -180) +\n                    '&xmax=' + below(east + dx, 180) +\n                    '&ymin=' + above(south - dy, -90) +\n                    '&ymax=' + below(north + dy, 90) +\n                    this.clusterFilterState.filterQuery;\n                console.log(\"summary query: \" + this.serviceUrl + args);\n                return this.$http({\n                    method: 'GET',\n                    // real service\n                    url: this.serviceUrl + 'summary' + args\n                });\n                function above(value, limit) {\n                    return value < limit ? limit : value;\n                }\n                function below(value, limit) {\n                    return value > limit ? limit : value;\n                }\n            };\n            ClusterService.prototype.drawClusters = function (instances, labelCollection) {\n                this.clustersCollection.removeAll();\n                this.clusterPrimitive = new Cesium.Primitive({\n                    geometryInstances: instances,\n                    appearance: new Cesium.PerInstanceColorAppearance({\n                        translucent: true,\n                        closed: true\n                    })\n                });\n                this.clusterInspectorService.setClusterPrimitive((this.clusterPrimitive));\n                this.clustersCollection.add(this.clusterPrimitive);\n                this.clustersCollection.add(labelCollection);\n            };\n            ClusterService.prototype.buildClusterInstance = function (cluster, clusterProps) {\n                return new Cesium.GeometryInstance({\n                    geometry: new Cesium.CircleGeometry({\n                        center: Cesium.Cartesian3.fromDegrees(cluster.geometry.coordinates[0], cluster.geometry.coordinates[1]),\n                        radius: clusterProps.radius,\n                        vertexFormat: Cesium.PerInstanceColorAppearance.VERTEX_FORMAT,\n                        extrudedHeight: clusterProps.extrudeHeight\n                    }),\n                    id: cluster,\n                    attributes: {\n                        color: Cesium.ColorGeometryInstanceAttribute.fromColor(clusterProps.color)\n                    }\n                });\n            };\n            ClusterService.prototype.buildLabel = function (cluster, clusterProps) {\n                return {\n                    position: Cesium.Cartesian3.fromDegrees(cluster.geometry.coordinates[0], cluster.geometry.coordinates[1], clusterProps.extrudeHeight + clusterProps.radius + 30),\n                    text: cluster.properties.count.toString(),\n                    fillColor: Cesium.Color.BLACK,\n                    outlineColor: Cesium.Color.RED,\n                    // TODO review labelling\n                    font: (26 - (this.zoomLevelService.nextIndex * 0.2)) + 'px arial, sans-serif',\n                    horizontalOrigin: Cesium.HorizontalOrigin.CENTER,\n                    id: cluster\n                };\n            };\n            ClusterService.prototype.computeClusterAttributes = function (count) {\n                var radius = this.zoomLevelService.zoomLevels[this.zoomLevelService.zoomLevels.length - this.zoomLevelService.nextIndex] / 150;\n                var maxHeight = this.zoomLevelService.nextPosition.height * 0.6;\n                var extrudeHeight = this.clusterRangeMeta.scale(count) / Math.pow(this.zoomLevelService.nextIndex / 3, 1.15);\n                if (extrudeHeight > maxHeight) {\n                    extrudeHeight = maxHeight;\n                }\n                if (radius > maxHeight / 20) {\n                    console.log(\"To big!\");\n                    radius = maxHeight / 20;\n                }\n                var attrs = {\n                    // tweak these to scale cluster size/extrude on zoom\n                    radius: radius,\n                    extrudeHeight: extrudeHeight\n                };\n                if (count < 100) {\n                    attrs.color = Cesium.Color.fromCssColorString('#4781cd').withAlpha(0.5);\n                }\n                else if (count < 1000) {\n                    attrs.radius *= 1.3;\n                    attrs.color = Cesium.Color.fromCssColorString('#0fc70e').withAlpha(0.5);\n                }\n                else {\n                    attrs.radius *= 1.6;\n                    attrs.color = Cesium.Color.fromCssColorString('#ff0000').withAlpha(0.5);\n                }\n                return attrs;\n            };\n            ClusterService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"zoomLevelService\",\n                \"clusterChartService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterInspectorService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterService;\n        }());\n        clusterService.ClusterService = ClusterService;\n        angular\n            .module('explorer.rockproperties.clusters', [])\n            .factory(\"clusterService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"zoomLevelService\",\n            \"clusterChartService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterInspectorService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                return new rpComponents.clusterService.ClusterService($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState);\n            }]);\n    })(clusterService = rpComponents.clusterService || (rpComponents.clusterService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var config;\n    (function (config_1) {\n        'use strict';\n        var RocksConfigService = (function () {\n            function RocksConfigService($rootScope) {\n                this.$rootScope = $rootScope;\n            }\n            RocksConfigService.prototype.setConfig = function (config, viewer) {\n                this.config = config;\n                this.viewer = viewer;\n                this.$rootScope.$broadcast(\"rocks.config.ready\");\n            };\n            RocksConfigService.$inject = [\n                \"$rootScope\"\n            ];\n            return RocksConfigService;\n        }());\n        config_1.RocksConfigService = RocksConfigService;\n        angular\n            .module('explorer.rockproperties.config', [])\n            .factory(\"rocksConfigService\", [\"$rootScope\",\n            function ($rootScope) {\n                return new rpComponents.config.RocksConfigService($rootScope);\n            }]);\n    })(config = rpComponents.config || (rpComponents.config = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var controlPanel;\n    (function (controlPanel) {\n        'use strict';\n        var RocksPanelCtrl = (function () {\n            function RocksPanelCtrl($scope, rocksPanelService, wmsInspectorService) {\n                var _this = this;\n                this.$scope = $scope;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorService = wmsInspectorService;\n                this.targetPanel = '';\n                this.$scope.$on(\"rocks.accordion.update\", function (event, data) {\n                    _this.targetPanel = data;\n                });\n            }\n            RocksPanelCtrl.prototype.setTargetPanel = function (targetPanel) {\n                this.targetPanel = (this.targetPanel != targetPanel) ? targetPanel : \"\";\n            };\n            RocksPanelCtrl.$inject = [\"$scope\", \"rocksPanelService\", \"wmsInspectorService\"];\n            return RocksPanelCtrl;\n        }());\n        controlPanel.RocksPanelCtrl = RocksPanelCtrl;\n        var RocksPanelService = (function () {\n            function RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                this.$rootScope = $rootScope;\n                this.clusterService = clusterService;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksConfigService = rocksConfigService;\n                this.clustersEnabled = false;\n                this.pointsEnabled = false;\n            }\n            /**\n             *\n             * The entry point for the component.\n             *\n             * @param viewer\n             * @param clusterServiceUrl\n             * @param wmsServiceUrl\n             * @param pickEnabled\n             */\n            RocksPanelService.prototype.init = function (viewer, config) {\n                this.viewer = viewer;\n                this.rocksConfigService.setConfig(config, viewer);\n            };\n            RocksPanelService.prototype.toggleClusters = function () {\n                this.clustersEnabled = this.clusterService.toggleClusters();\n            };\n            RocksPanelService.prototype.togglePoints = function () {\n                this.pointsEnabled = this.wmsPointsService.togglePoints();\n            };\n            RocksPanelService.$inject = [\n                \"$rootScope\",\n                \"clusterService\",\n                \"wmsPointsService\",\n                \"rocksConfigService\"\n            ];\n            return RocksPanelService;\n        }());\n        controlPanel.RocksPanelService = RocksPanelService;\n        angular\n            .module('explorer.rockproperties.controlpanel', [])\n            .factory(\"rocksPanelService\", [\n            \"$rootScope\", \"clusterService\", \"wmsPointsService\", \"rocksConfigService\",\n            function ($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                return new rpComponents.controlPanel.RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksPanelCtrl\", RocksPanelCtrl)\n            .directive(\"rocksControlPanel\", function () {\n            return {\n                templateUrl: 'rockprops/control-panel.html',\n                controller: RocksPanelCtrl,\n                controllerAs: 'controlPanelVM'\n            };\n        });\n    })(controlPanel = rpComponents.controlPanel || (rpComponents.controlPanel = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/**\n *\n * Geoserver Utils, e.g. get list of layers names from web map service.\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var gwsUtilService;\n    (function (gwsUtilService) {\n        'use strict';\n        var GwsUtilService = (function () {\n            function GwsUtilService($q, $http, rocksConfigService) {\n                this.$q = $q;\n                this.$http = $http;\n                this.rocksConfigService = rocksConfigService;\n            }\n            GwsUtilService.prototype.getWfsFeatureTypeNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWfsUrl\n                    + '?request=GetCapabilities&service=wfs&version='\n                    + this.rocksConfigService.config.geoserverWfsVersion).\n                    success(function (data, status, headers, config) {\n                    var layerNames = _this.getFeatureTypeNamesFromWfsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(layerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getFeatureTypeNamesFromWfsCapsJson = function (data) {\n                var layerData = data[\"wfs:WFS_Capabilities\"].FeatureTypeList.FeatureType;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.getWmsLayerNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWmsUrl\n                    + '?request=GetCapabilities&service=wms&version='\n                    + this.rocksConfigService.config.geoserverWmsVersion).\n                    success(function (data, status, headers, config) {\n                    _this.wmsLayerNames = _this.getLayerNamesFromWmsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(_this.wmsLayerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getLayerNamesFromWmsCapsJson = function (data) {\n                var layerData = data.WMS_Capabilities.Capability.Layer.Layer;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.xmlToJson = function (xml) {\n                var obj = {};\n                if (xml.nodeType == 1) {\n                    // do attributes\n                    if (xml.attributes.length > 0) {\n                        obj[\"@attributes\"] = {};\n                        for (var j = 0; j < xml.attributes.length; j++) {\n                            var attribute = xml.attributes.item(j);\n                            obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n                        }\n                    }\n                }\n                else if (xml.nodeType == 3) {\n                    obj = xml.nodeValue;\n                }\n                // do children\n                if (xml.hasChildNodes()) {\n                    for (var i = 0; i < xml.childNodes.length; i++) {\n                        var item = xml.childNodes.item(i);\n                        var nodeName = item.nodeName;\n                        if (typeof (obj[nodeName]) == \"undefined\") {\n                            obj[nodeName] = this.xmlToJson(item);\n                        }\n                        else {\n                            if (typeof (obj[nodeName].push) == \"undefined\") {\n                                var old = obj[nodeName];\n                                obj[nodeName] = [];\n                                obj[nodeName].push(old);\n                            }\n                            obj[nodeName].push(this.xmlToJson(item));\n                        }\n                    }\n                }\n                return obj;\n            };\n            GwsUtilService.$inject = [\n                \"$q\",\n                \"$http\",\n                \"rocksConfigService\"\n            ];\n            return GwsUtilService;\n        }());\n        gwsUtilService.GwsUtilService = GwsUtilService;\n        angular\n            .module('explorer.rockproperties.gwsutil', [])\n            .factory(\"gwsUtilService\", [\"$q\", \"$http\", \"rocksConfigService\",\n            function ($q, $http, rocksConfigService) {\n                return new rpComponents.gwsUtilService.GwsUtilService($q, $http, rocksConfigService);\n            }]);\n    })(gwsUtilService = rpComponents.gwsUtilService || (rpComponents.gwsUtilService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var queryBuilderExport;\n    (function (queryBuilderExport) {\n        'use strict';\n        var QueryBuilder = (function () {\n            function QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                var _this = this;\n                this.$q = $q;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksConfigService = rocksConfigService;\n                this.gwsUtilService = gwsUtilService;\n                this.propertyQuery = \"\";\n                this.$inject = [\n                    \"$q\",\n                    \"$http\",\n                    \"$rootScope\",\n                    \"loadingSpinnerService\",\n                    \"rocksClipShipService\",\n                    \"rocksConfigService\",\n                    \"gwsUtilService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    // build base query URL from config\n                    _this.baseUrl = _this.rocksConfigService.config.geoserverWfsUrl + \"?\";\n                    angular.forEach(_this.rocksConfigService.config.geoserverWfsExportParams, function (value, key) {\n                        _this.baseUrl += key + \"=\" + value + \"&\";\n                    });\n                    // lose trailing &\n                    _this.baseUrl = _this.baseUrl.slice(0, -1);\n                    // get WFS layer names\n                    _this.gwsUtilService.getWfsFeatureTypeNames().then(function (layerNames) {\n                        _this.wfsLayerNames = layerNames;\n                    });\n                });\n            }\n            QueryBuilder.prototype.startClipShip = function (features, format, extent) {\n                var _this = this;\n                // TODO fire flasher event for UI?\n                this.loading = true;\n                // init spinner\n                if (!this.loadingSpinner) {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 80,\n                        height: 80,\n                        container: \"#rock-clip-ship-loading\",\n                        id: \"clip-ship-spinner\"\n                    });\n                    this.loadingSpinner();\n                }\n                var targetFeatures = [];\n                for (var i = 0; i < features.length; i++) {\n                    if (features[i].isSelected)\n                        targetFeatures.push(features[i].name);\n                }\n                if (format === \"csv\") {\n                    var zip = new JSZip();\n                    // give zip file to decent browsers\n                    if (JSZip.support.blob) {\n                        var promises = [];\n                        // create a Get query for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            var query = this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]);\n                            var promise = this.$http.get(query);\n                            promises.push(promise);\n                        }\n                        this.$q.all(promises).then(function (results) {\n                            for (var i = 0; i < results.length; i++) {\n                                // we'll assume that if there's more than one line we've got data to write\n                                var numberOfLineBreaks = (results[i]['data'].match(/\\n/g) || []).length;\n                                if (numberOfLineBreaks > 1) {\n                                    var filename = _this.wfsLayerNames[i].split(' ').join('-');\n                                    zip.file(filename + \".csv\", results[i]['data'] + \"\\n\");\n                                }\n                            }\n                            // FileSaver.js\n                            var content = zip.generate({ type: \"blob\" });\n                            saveAs(content, \"rocks-export.zip\");\n                            _this.loading = false;\n                            _this.rocksClipShipService.step = 'startDraw';\n                        });\n                    }\n                    else {\n                        // just give separate file for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            window.open(this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]));\n                        }\n                        this.loading = false;\n                    }\n                }\n                else {\n                    // give the user the query url directly\n                    this.exportUrl = this.buildQuery(targetFeatures, extent, format, this.wfsLayerNames);\n                    this.loading = false;\n                }\n            };\n            QueryBuilder.prototype.buildQuery = function (properties, extent, format, layerNames) {\n                var typeNamesQuery = this.getTypeNamesQuery(layerNames);\n                // BBOX and FILTER queries are mutually exclusive, so must use CQL\n                var bboxQuery = \"&CQL_FILTER=BBOX(GEOM,\" + extent.west + \",\" + extent.south + \",\" + extent.east + \",\" + extent.north + \")\";\n                var filterQuery = \"\";\n                var filters = {}; // filterState.filters;\n                var exportFormat = \"&outputFormat=\" + format;\n                var query;\n                var hasFilters = !isEmpty(filters);\n                var filtersHasProperty = filters.hasOwnProperty(\"PROPERTY\");\n                var onlyHasPropertyFilter = (filtersHasProperty && (Object.keys(filters).length === 1)) ? true : false;\n                function isEmpty(obj) {\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop))\n                            return false;\n                    }\n                    return true;\n                }\n                // single feature/layer query with filters\n                if (hasFilters && filtersHasProperty) {\n                    this.propertyQuery = \"%20AND%20PROPERTY='\" + filters['PROPERTY'] + \"'\";\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else if (hasFilters) {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'clipship data export: ' + format);\n                query = this.baseUrl + typeNamesQuery + exportFormat + bboxQuery + filterQuery + this.propertyQuery;\n                return query;\n            };\n            // create filter query for each of the selected attribute values\n            // don't include PROPERTY here as we want to apply OR logic\n            QueryBuilder.prototype.getFilters = function (filters) {\n                var filterString = \"%20AND%20\";\n                // create filters string\n                for (var property in filters) {\n                    if (property !== \"PROPERTY\") {\n                        filterString = filterString.concat(property + \"='\" + filters[property] + \"'%20AND%20\");\n                    }\n                }\n                // trim tailing AND\n                filterString = filterString.substring(0, filterString.length - 9);\n                return filterString;\n            };\n            // build CQL query for properties\n            QueryBuilder.prototype.getPropertyQuery = function (properties) {\n                var query = \"%20AND%20(\";\n                for (var i = 0; i < properties.length; i++) {\n                    query = query.concat(\"PROPERTY='\" + properties[i] + \"'%20OR%20\");\n                }\n                // trim trailing OR, close bracket\n                query = query.substring(0, query.length - 8);\n                query = query.concat(\")\");\n                return query;\n            };\n            QueryBuilder.prototype.getTypeNamesQuery = function (layers) {\n                var query = \"&typeName=\";\n                for (var i = 0; i < layers.length; i++) {\n                    query = query.concat(layers[i] + \",\");\n                }\n                query = query.substring(0, query.length - 1);\n                return query;\n            };\n            return QueryBuilder;\n        }());\n        queryBuilderExport.QueryBuilder = QueryBuilder;\n        angular\n            .module('explorer.rockproperties.queryexport', [])\n            .factory(\"rocksQueryBuilderExport\", [\n            \"$q\",\n            \"$http\",\n            \"$rootScope\",\n            \"loadingSpinnerService\",\n            \"rocksClipShipService\",\n            \"rocksConfigService\",\n            \"gwsUtilService\",\n            function ($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                return new rpComponents.queryBuilderExport.QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService);\n            }]);\n    })(queryBuilderExport = rpComponents.queryBuilderExport || (rpComponents.queryBuilderExport = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/**\n * Simple loading spinner so we're not tied to any img/icon font's\n */\nvar rpComponents;\n(function (rpComponents) {\n    var spinnerService;\n    (function (spinnerService) {\n        'use strict';\n        var LoadingSpinnerService = (function () {\n            function LoadingSpinnerService() {\n            }\n            LoadingSpinnerService.prototype.addSpinner = function (config) {\n                return function () {\n                    var radius = Math.min(config.width, config.height) / 2;\n                    var tau = 2 * Math.PI;\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius * 0.5)\n                        .outerRadius(radius * 0.9)\n                        .startAngle(0);\n                    var svg = d3.select(config.container).append(\"svg\")\n                        .attr(\"id\", config.id)\n                        .attr(\"width\", config.width)\n                        .attr(\"height\", config.height)\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(\" + config.width / 2 + \",\" + config.height / 2 + \")\");\n                    svg.append(\"path\")\n                        .datum({ endAngle: 0.33 * tau })\n                        .style(\"fill\", \"#4D4D4D\")\n                        .attr(\"d\", arc)\n                        .call(spin, 1500);\n                    function spin(selection, duration) {\n                        selection.transition()\n                            .ease(\"linear\")\n                            .duration(duration)\n                            .attrTween(\"transform\", function () {\n                            return d3.interpolateString(\"rotate(0)\", \"rotate(360)\");\n                        });\n                        setTimeout(function () { spin(selection, duration); }, duration);\n                    }\n                };\n            };\n            return LoadingSpinnerService;\n        }());\n        spinnerService.LoadingSpinnerService = LoadingSpinnerService;\n        angular\n            .module('explorer.rockproperties.spinner', [])\n            .factory(\"loadingSpinnerService\", [function () { return new rpComponents.spinnerService.LoadingSpinnerService(); }]);\n    })(spinnerService = rpComponents.spinnerService || (rpComponents.spinnerService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorState;\n    (function (wmsInspectorState) {\n        'use strict';\n        /*\n            The WMS inspector panel can be in 1 of 3 view states:\n            1. INTRO - the default/home shows prompt\n            2. LAYERSELECT - user presented with layers to interrogate with GetFeatureInfo when\n            they have clicked a point on the map\n            3. FEATUREINFO - view to present raw html returned by GetFeatureInfo\n         */\n        var WmsInspectorState = (function () {\n            function WmsInspectorState() {\n                this.view = \"INTRO\";\n            }\n            return WmsInspectorState;\n        }());\n        wmsInspectorState.WmsInspectorState = WmsInspectorState;\n        angular\n            .module('explorer.rockproperties.inspectorstate', [])\n            .factory(\"wmsInspectorState\", [function () { return new rpComponents.wmsInspectorState.WmsInspectorState(); }]);\n    })(wmsInspectorState = rpComponents.wmsInspectorState || (rpComponents.wmsInspectorState = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorService;\n    (function (wmsInspectorService_1) {\n        'use strict';\n        var WmsInspectorCtrl = (function () {\n            function WmsInspectorCtrl($scope, wmsInspectorState, wmsInspectorService) {\n                this.$scope = $scope;\n                this.wmsInspectorState = wmsInspectorState;\n                this.wmsInspectorService = wmsInspectorService;\n            }\n            WmsInspectorCtrl.$inject = [\"$scope\", \"wmsInspectorState\", \"wmsInspectorService\"];\n            return WmsInspectorCtrl;\n        }());\n        wmsInspectorService_1.WmsInspectorCtrl = WmsInspectorCtrl;\n        var WmsInspectorService = (function () {\n            function WmsInspectorService($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.$http = $http;\n                this.wmsInspectorState = wmsInspectorState;\n                this.assetsService = assetsService;\n                this.configService = configService;\n                this.rocksConfigService = rocksConfigService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.isLoading = false;\n                this.URL_EXCLUDE = \"?SERVICE=WMS&\";\n                this.SURFACE_GEO = \"GA_Surface_Geology_of_Australia\";\n                this.$inject = [\n                    \"$rootScope\",\n                    \"$http\",\n                    \"wmsInspectorState\",\n                    \"assetsService\",\n                    \"configService\",\n                    \"rocksConfigService\",\n                    \"loadingSpinnerService\",\n                    \"gwsUtilService\",\n                    \"rocksClipShipService\"\n                ];\n                // register listener for pointInspector\n                this.$rootScope.$on(\"viewer.click.left\", function (event, data) {\n                    data.degrees = {\n                        lat: Cesium.Math.toDegrees(data.cartographic.latitude),\n                        lon: Cesium.Math.toDegrees(data.cartographic.longitude)\n                    };\n                    // TODO should flasher for this so user knows why\n                    // (we don't want inspector interuppting clipship drawing)\n                    if (_this.rocksClipShipService.isDrawing) {\n                        return;\n                    }\n                    if (_this.inspectorEnabled && data.hasOwnProperty('cartographic')) {\n                        // make sure panel is visible\n                        _this.$rootScope.$broadcast(\"rocks.accordion.update\", \"wmsInspector\");\n                        _this.$rootScope.$broadcast(\"toolbar.toggle.update\", { linked: false, key: \"rocksClusters\", isActive: true });\n                        _this.wmsInspectorState.targetGeom = data;\n                        _this.wmsInspectorState.view = \"LAYERSELECT\";\n                        _this.wmsInspectorState.cameraHeight = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.rocksConfigService.viewer.camera.position).height;\n                    }\n                });\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    // load feature classes\n                    assetsService.getReferenceFeatureClasses().then(function (features) {\n                        _this.features = features;\n                    });\n                    // init rocks feature\n                    _this.rocksFeature = {\n                        wmsUrl: _this.rocksConfigService.config.geoserverWmsUrl,\n                        name: 'Rock Properties Layer'\n                    };\n                });\n            }\n            WmsInspectorService.prototype.togglePointInspector = function () {\n                this.inspectorEnabled != this.inspectorEnabled;\n            };\n            // TODO we should restrict the query to visible layers\n            WmsInspectorService.prototype.queryRocks = function () {\n                if (!this.rocksFeature.hasOwnProperty('layers') && this.gwsUtilService.wmsLayerNames) {\n                    this.rocksFeature.layers = [];\n                    for (var i = 0; i < this.gwsUtilService.wmsLayerNames.length; i++) {\n                        this.rocksFeature.layers.push(this.rocksConfigService.config.geoserverWmsLayerPrefix +\n                            this.gwsUtilService.wmsLayerNames[i]);\n                    }\n                }\n                this.queryFeature(this.rocksFeature);\n            };\n            WmsInspectorService.prototype.queryFeature = function (feature) {\n                var _this = this;\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'wms inspector query: ' + feature.name);\n                // set view\n                this.wmsInspectorState.view = \"FEATUREINFO\";\n                this.toggleLoading();\n                var targetUrl = feature.wmsUrl;\n                var targetLayers = feature.layers;\n                // clean any endpoints already containing '?'\n                if (targetUrl.indexOf(this.URL_EXCLUDE) > -1) {\n                    targetUrl = targetUrl.substring(0, (targetUrl.length - this.URL_EXCLUDE.length));\n                }\n                // surface geology has scale dependencies, so we need to check\n                // zoom (aka camera height) to ensure we query the correct layer\n                if (targetUrl.indexOf(this.SURFACE_GEO) > -1) {\n                    if (this.wmsInspectorState.cameraHeight <= 340000) {\n                        targetLayers = [targetLayers[0]];\n                    }\n                    else {\n                        targetLayers = [targetLayers[1]];\n                    }\n                }\n                var queryString = '?SERVICE=WMS' +\n                    '&REQUEST=GetFeatureInfo' +\n                    '&VERSION=1.1.1' +\n                    '&LAYERS=' + targetLayers +\n                    '&STYLES=' +\n                    '&SRS=EPSG%3A4326' +\n                    '&FORMAT=image%2Fpng' +\n                    // we use the click pos as the bottom left corner\n                    // and offset the top right by ~30 meters\n                    // (can be hard to click on a point if res is too fine)\n                    '&BBOX=' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon + 0.003) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat + 0.003) +\n                    '&QUERY_LAYERS=' + targetLayers +\n                    '&INFO_FORMAT=text%2Fhtml' +\n                    '&FEATURE_COUNT=100' +\n                    '&WIDTH=2' +\n                    '&HEIGHT=2' +\n                    '&X=1' +\n                    '&Y=1' +\n                    '&TRANSPARENT=true' +\n                    '&EXCEPTIONS=application%2Fvnd.ogc.se_xml';\n                // send the query\n                this.$http.get(targetUrl + queryString).success(function (data) {\n                    _this.featureInfo = data;\n                    _this.toggleLoading();\n                })\n                    .error(function (data, status, headers, config) {\n                    console.log(\"Couldn't load WMS GetFeatureInfo\");\n                    this.featureInfo = \"<h5>Couldn't load WMS GetFeatureInfo for this layer.</h5><p>You may not be able to access this function for some layers.</p>\";\n                    this.toggleLoading();\n                });\n            };\n            WmsInspectorService.prototype.toggleLoading = function () {\n                if (this.loadingSpinner) {\n                    this.isLoading = !this.isLoading;\n                }\n                else {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 60,\n                        height: 60,\n                        container: \"#rocks-inspector-loading\",\n                        id: \"rocks-inspector-spinner\"\n                    });\n                    this.loadingSpinner();\n                    this.isLoading = true;\n                }\n            };\n            return WmsInspectorService;\n        }());\n        wmsInspectorService_1.WmsInspectorService = WmsInspectorService;\n        angular\n            .module('explorer.rockproperties.inspector', [])\n            .factory(\"wmsInspectorService\", [\n            \"$rootScope\",\n            \"$http\",\n            \"wmsInspectorState\",\n            \"assetsService\",\n            \"configService\",\n            \"rocksConfigService\",\n            \"loadingSpinnerService\",\n            \"gwsUtilService\",\n            \"rocksClipShipService\",\n            function ($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                return new rpComponents.wmsInspectorService.WmsInspectorService($rootScope, $http, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService);\n            }])\n            .controller(\"wmsInspectorCtrl\", rpComponents.wmsInspectorService.WmsInspectorCtrl)\n            .directive(\"wmsInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/wms-inspector-panel.html',\n                controller: WmsInspectorCtrl,\n                controllerAs: 'wmsInspectorVM'\n            };\n        });\n    })(wmsInspectorService = rpComponents.wmsInspectorService || (rpComponents.wmsInspectorService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var pointsService;\n    (function (pointsService) {\n        'use strict';\n        var RocksWmsPointsCtrl = (function () {\n            function RocksWmsPointsCtrl($scope, wmsPointsService, rocksPanelService, wmsInspectorState) {\n                this.$scope = $scope;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorState = wmsInspectorState;\n            }\n            RocksWmsPointsCtrl.$inject = [\"$scope\", \"wmsPointsService\", \"rocksPanelService\", \"wmsInspectorState\"];\n            return RocksWmsPointsCtrl;\n        }());\n        pointsService.RocksWmsPointsCtrl = RocksWmsPointsCtrl;\n        var WmsPointsService = (function () {\n            function WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksConfigService = rocksConfigService;\n                this.wmsInspectorState = wmsInspectorState;\n                this.inspectorEnabled = true;\n                this.masterChecked = true;\n                this.legendParamString = \"\";\n                this.$inject = [\n                    \"$rootScope\",\n                    \"gwsUtilService\",\n                    \"rocksConfigService\",\n                    \"wmsInspectorState\"\n                ];\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            WmsPointsService.prototype.init = function () {\n                var _this = this;\n                this.wmsServiceUrl = this.rocksConfigService.config.geoserverWmsUrl;\n                this.viewer = this.rocksConfigService.viewer;\n                this.restrictedBounds = Cesium.Rectangle.fromDegrees(109, -45, 158, -8);\n                // build our legend param string from config\n                this.legendParamString = \"?\";\n                angular.forEach(this.rocksConfigService.config.geoserverWmsLegendParams, function (value, key) {\n                    _this.legendParamString += key + \"=\" + value + \"&\";\n                });\n                // lose trailing &\n                this.legendParamString = this.legendParamString.slice(0, -1) + \"&LAYER=\";\n                this.gwsUtilService.getWmsLayerNames().then(function (layers) {\n                    _this.layers = layers;\n                    _this.getLegendData();\n                });\n            };\n            WmsPointsService.prototype.togglePoints = function () {\n                this.pointsVisible = !this.pointsVisible;\n                if (this.wmsLayer) {\n                    this.wmsLayer.show = this.pointsVisible;\n                }\n                else {\n                    this.updatePointsLayer();\n                }\n                return this.pointsVisible;\n            };\n            WmsPointsService.prototype.toggleChecked = function () {\n                this.masterChecked != this.masterChecked;\n                for (var legend in this.legendData) {\n                    this.legendData[legend]['isSelected'] = this.masterChecked;\n                }\n            };\n            WmsPointsService.prototype.getLegendData = function () {\n                this.legendData = {};\n                for (var i = 0; i < this.layers.length; i++) {\n                    this.legendData[this.layers[i]] = {\n                        legendUrl: this.wmsServiceUrl + this.legendParamString + this.layers[i],\n                        isSelected: true\n                    };\n                }\n            };\n            WmsPointsService.prototype.updatePointsLayer = function () {\n                var targetLayers = [];\n                for (var legend in this.legendData) {\n                    if (this.legendData.hasOwnProperty(legend) && this.legendData[legend]['isSelected'] === true) {\n                        targetLayers.push(legend);\n                    }\n                }\n                if (this.wmsLayer) {\n                    this.viewer.imageryLayers.remove(this.wmsLayer);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'update wms points layer: ' + targetLayers.toString());\n                this.wmsLayer = this.viewer.imageryLayers.addImageryProvider(new Cesium.WebMapServiceImageryProvider({\n                    url: this.wmsServiceUrl,\n                    layers: targetLayers.toString(),\n                    rectangle: this.restrictedBounds,\n                    parameters: {\n                        transparent: 'true',\n                        format: 'image/png'\n                    },\n                    enablePickFeatures: false\n                }));\n                this.wmsLayer.alpha = 0.7;\n            };\n            return WmsPointsService;\n        }());\n        pointsService.WmsPointsService = WmsPointsService;\n        angular\n            .module('explorer.rockproperties.wmspoints', [])\n            .factory(\"wmsPointsService\", [\"$rootScope\", \"gwsUtilService\", \"rocksConfigService\", \"wmsInspectorState\",\n            function ($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                return new rpComponents.pointsService.WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState);\n            }])\n            .controller(\"rocksWmsPointsCtrl\", RocksWmsPointsCtrl)\n            .directive(\"rocksWmsPointsLegend\", function () {\n            return {\n                templateUrl: 'rockprops/wms-points-panel.html',\n                controller: RocksWmsPointsCtrl,\n                controllerAs: 'rocksWmsPointsVM'\n            };\n        });\n    })(pointsService = rpComponents.pointsService || (rpComponents.pointsService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/**\n *\n * Handles the arbitrary 'zoom' levels/ranges that we will display different cluster granularities.\n *\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var zoom;\n    (function (zoom) {\n        'use strict';\n        var ZoomLevelService = (function () {\n            function ZoomLevelService($rootScope, rocksConfigService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.zoomLevels = [\n                    5000,\n                    10000,\n                    20000,\n                    30000,\n                    50000,\n                    80000,\n                    200000,\n                    1000000,\n                    1500000,\n                    2000000,\n                    4000000,\n                    6500000,\n                    // these's tiles are pretty broad\n                    8500000,\n                    10000000,\n                    15000000,\n                    100000000\n                ];\n                this.defaultExtent = {\n                    \"west\": 109,\n                    \"south\": -45,\n                    \"east\": 158,\n                    \"north\": -8\n                };\n                this.moveEndHandler = function () {\n                    _this.nextPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.position);\n                    // changed indexes or exceed threshold for pan, trigger recluster\n                    if ((_this.previousPosition.height > -1 && _this.getIndex(_this.previousPosition.height) != _this.nextIndex) ||\n                        (Math.abs(_this.nextPosition.latitude - _this.previousPosition.latitude) > 0.01 / _this.nextIndex ||\n                            Math.abs(_this.nextPosition.longitude - _this.previousPosition.longitude) > 0.01 / _this.nextIndex) ||\n                        _this.nextIndex == 16) {\n                        _this.$rootScope.$broadcast('rocks.clusters.update', _this.nextIndex);\n                    }\n                    console.log(\"INDEX = \" + _this.nextIndex + \" HEIGHT = \" + Cesium.Ellipsoid.WGS84.cartesianToCartographic(_this.viewer.camera.position).height);\n                    _this.previousPosition = _this.nextPosition;\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.viewer = _this.rocksConfigService.viewer;\n                });\n            }\n            Object.defineProperty(ZoomLevelService.prototype, \"nextIndex\", {\n                get: function () {\n                    return this.getIndex(this.nextPosition.height);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             *\n             * Get the lowest index the height fits into\n             *\n             * @param height\n             * @returns {number}\n             */\n            ZoomLevelService.prototype.getIndex = function (height) {\n                for (var i = 0; i < this.zoomLevels.length; i++) {\n                    if (height < this.zoomLevels[i]) {\n                        return this.zoomLevels.length - i;\n                    }\n                }\n                return this.zoomLevels.length - 1;\n            };\n            ZoomLevelService.prototype.setActive = function (active) {\n                if (active) {\n                    // TODO extent\n                    this.nextPosition = this.previousPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(this.viewer.camera.position);\n                    this.viewer.camera.moveEnd.addEventListener(this.moveEndHandler);\n                }\n                else {\n                    this.viewer.camera.moveEnd.removeEventListener(this.moveEndHandler);\n                }\n            };\n            /**\n             *\n             * WKT? GeoJSON? - leave until approach is clearer.\n             * TODO this is here temporarily, more thought needed re managing the buffered extent currently handled by minimap.\n             *\n             * @param offset\n             * @returns {any}\n             */\n            ZoomLevelService.prototype.getViewExtent = function (offset) {\n                var ellipsoid = Cesium.Ellipsoid.WGS84;\n                var pixelRatio = window.devicePixelRatio || 1;\n                var c2 = new Cesium.Cartesian2(-offset, -offset);\n                var leftTop = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\n                c2 = new Cesium.Cartesian2((this.viewer.scene.canvas.width / pixelRatio) + offset, (this.viewer.scene.canvas.height / pixelRatio) + offset);\n                var rightDown = this.viewer.scene.camera.pickEllipsoid(c2, ellipsoid);\n                if (leftTop != null && rightDown != null) {\n                    leftTop = ellipsoid.cartesianToCartographic(leftTop);\n                    rightDown = ellipsoid.cartesianToCartographic(rightDown);\n                    // sometimes at a certain camera pos/zoom, the canvas corners effectively disappear over\n                    // the horizon and wrap around the globe, while still passing as a valid rectangle\n                    if (leftTop.longitude > rightDown.longitude) {\n                        return this.defaultExtent;\n                    }\n                    return {\n                        west: Cesium.Math.toDegrees(leftTop.longitude),\n                        south: Cesium.Math.toDegrees(rightDown.latitude),\n                        east: Cesium.Math.toDegrees(rightDown.longitude),\n                        north: Cesium.Math.toDegrees(leftTop.latitude)\n                    };\n                }\n                else {\n                    return this.defaultExtent;\n                }\n            };\n            ZoomLevelService.$inject = [\n                \"$rootScope\",\n                \"rocksConfigService\"\n            ];\n            return ZoomLevelService;\n        }());\n        zoom.ZoomLevelService = ZoomLevelService;\n        angular\n            .module('explorer.rockproperties.zoom', [])\n            .factory(\"zoomLevelService\", [\"$rootScope\", \"rocksConfigService\",\n            function ($rootScope, rocksConfigService) {\n                return new rpComponents.zoom.ZoomLevelService($rootScope, rocksConfigService);\n            }]);\n    })(zoom = rpComponents.zoom || (rpComponents.zoom = {}));\n})(rpComponents || (rpComponents = {}));\nangular.module(\"explorer.rockproperties.templates\", []).run([\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"rockprops/clip-ship.html\", \"\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'startDraw\\'\\\">\\r\\n\t<h6 class=\\\"dis-inline\\\">\\r\\n\t\t1.\\r\\n\t\t<button ng-click=\\\"rocksClipShipVM.rocksClipShipService.startDraw()\\\" style=\\\"padding: 5px 10px;border-radius: 3px;border: none;\\\">\\r\\n\t\t\tClick here\\r\\n\t\t</button>\\r\\n\t\tto select an area on the map <i class=\\\"fa fa-scissors\\\" style=\\\"font-size: 16px;\\\"></i></h6>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'selectFeatures\\'\\\">\\r\\n\\r\\n\t<h6 class=\\\"dis-inline\\\">2. Select features to download:</h6>\\r\\n\\r\\n\t<div>\\r\\n\\r\\n\t\t<!-- if we have active property filters, use them instead -->\\r\\n\t\t<p ng-show=\\\"hasAnyFilter\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Current filters will be applied to the exported data.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<div ng-hide=\\\"hasAnyFilter\\\">\\r\\n\\r\\n\t\t\t<div style=\\\"padding: 5px; margin-top: 10px; background: #f0f0f0; border-radius: 3px;\\\">\\r\\n\t\t\t\t<label>\\r\\n\t\t\t\t\t<input\\r\\n\t\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\t\tng-model=\\\"masterCheck\\\"\\r\\n\t\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\"\\r\\n\t\t\t\t\t\tng-change=\\\"rocksClipShipVM.rocksFiltersService.setAllExportSelected(masterCheck)\\\" />\\r\\n\t\t\t\t\t{{ masterCheck ? \\'Deselect\\' : \\'Select\\' }} All\\r\\n\t\t\t\t</label>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<label style=\\\"margin-left: 25px;\\\" class=\\\"checkbox\\\" ng-repeat=\\\"property in rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions\\\">\\r\\n\t\t\t\t<input\\r\\n\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\tvalue=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-model=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-checked=\\\"masterCheck\\\"\\r\\n\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\">\\r\\n\t\t\t\t{{ property.name }}\\r\\n\t\t\t</label>\\r\\n\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div style=\\\"margin: 20px 0px 20px 0px;\\\">\\r\\n\t\t\t<label title=\\\"Export Format\\\">Export Format</label>\\r\\n\t\t\t<select ng-change=\\\"rocksClipShipVM.rocksClipShipService.updateExportFormat(exportFormats.SelectedOption)\\\"\\r\\n\t\t\t\t\tng-model=\\\"exportFormats.SelectedOption\\\"\\r\\n\t\t\t\t\tname=\\\"format\\\"\\r\\n\t\t\t\t\tng-options=\\\"option for option in rocksClipShipVM.rocksClipShipService.exportFormats\\\"\\r\\n\t\t\t\t\tng-class=\\\"form-control\\\"\\r\\n\t\t\t\t\tclass=\\\"filter-input\\\"\\r\\n\t\t\t\t\tstyle=\\\"float: right; width: 160px;\\\">\\r\\n\t\t\t\t<option value=\\\"\\\" class=\\\"\\\">--select--</option>\\r\\n\t\t\t</select>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<a ng-click=\\\"rocksClipShipVM.rocksClipShipService.openGeoserver()\\\" style=\\\"font-size: 11px; margin-top: 20px; color: blue; text-decoration: underline;\\\">\\r\\n\t\t\tMore Options via GeoServer Dashboard\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<div style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\t\ttitle=\\\"Cancel Download\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: left;\\\">Cancel</button>\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default focusMe\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.startClipShip()\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: right\\\"\\r\\n\t\t\t\ttitle=\\\"Select one or more reference feature classes before continuing.\\\"\\r\\n\t\t\t\tng-disabled=\\\"(rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions | noClipSelected) || (!rocksClipShipVM.rocksClipShipService.targetFormat)\\\">Next</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'download\\'\\\">\\r\\n\\r\\n\t<h6>3. Data Export:</h6>\\r\\n\\r\\n\t<div ng-hide=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\\r\\n\t\t<p ng-show=\\\"rocksClipShipVM.rocksClipShipService.targetFormat === \\'application/json\\'\\\" style=\\\"margin-top: 40px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Once json has loaded, save page as a .json file.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<p class=\\\"warning-block\\\" style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Large data sets may take several minutes to export.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\ttarget=\\\"_blank\\\"\\r\\n\t\t\thref=\\\"{{rocksClipShipVM.rocksQueryBuilderExport.exportUrl}}\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 30px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-download\\\"></i> Download {{ rocksClipShipVM.rocksClipShipService.targetFormat }}\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\thref=\\\"javascript:;\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'selectFeatures\\'\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 10px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left\\\"></i> Back\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div id=\\\"rock-clip-ship-loading\\\" ng-show=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\t<p>Preparing Data..</p>\\r\\n</div>\");\n        $templateCache.put(\"rockprops/cluster-filters.html\", \"\\r\\n<!-- TODO plug into rock props filter service -->\\r\\n\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to apply filters.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\\r\\n\t<div ng-repeat=\\\"filter in rocksClusterFilterVM.rocksFiltersService.filters\\\" style=\\\"padding-top:7px;position:relative; overflow-x: hidden;overflow-y: auto;\\\">\\r\\n\\r\\n\t\t<label style=\\\"font-size: 11px;\\\" title=\\\"{{filter.filterLabel}}\\\">{{filter.filterLabel}}</label>\\r\\n\t\t<select\\r\\n\t\t\t\tng-model=\\\"filter.ClusterOption\\\"\\r\\n\t\t\t\tname=\\\"filter.filterType\\\"\\r\\n\t\t\t\tng-options=\\\"option as option for option in filter.filterOptions\\\"\\r\\n\t\t\t\tng-class=\\'form-control\\'\\r\\n\t\t\t\tclass=\\'filter-input\\'\\r\\n\t\t\t\tstyle=\\\"float:left;width:100%;position:relative;\\\">\\r\\n\t\t\t<option value=\\\"\\\" selected>--select--</option>\\r\\n\t\t</select>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div style=\\\"text-align: center;\\\">\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.applyFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-filter fa-lg\\\"></i>\\r\\n\t\t\tApply\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.clearFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-remove fa-lg\\\"></i>\\r\\n\t\t\tClear\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<p ng-show=\\\"filterResultCount()\\\" style=\\\"text-align: left; margin: 10px; font-size: 14px;\\\">\\r\\n\t\t\t<strong>Record Count: </strong>\\r\\n\t\t\t14320\\r\\n\t\t</p>\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-inspector.html\", \"\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to use the inspector tool.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\t<p>Click on a cluster to see:</p>\\r\\n\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"CHART\\\"> Summary charts\\r\\n\t</label>\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"LIST\\\"> Results list\\r\\n\t</label>\\r\\n\\r\\n\t<div id=\\\"cluster-result-list-loading\\\" style=\\\"padding-top: 10px; text-align: center;\\\"></div>\\r\\n\\r\\n\\r\\n\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.listReady\\\">\\r\\n\\r\\n\t\t<div ng-if=\\\"clusterInspectorVM.clusterInspectorService.listFeatures.totalFeatures > 0\\\" class=\\\"alert alert-success\\\" style=\\\"margin-top: 30px;\\\">\\r\\n\t\t\tFeatures loaded: {{clusterInspectorVM.clusterInspectorService.pagingState.count}} of \\r\\n\t\t\t\t\t\t\t{{clusterInspectorVM.clusterInspectorService.pagingState.total}}\\r\\n\t\t\t<button ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\"  class=\\\"undecorated btn-sm\\\"\\r\\n\t\t\t\t\tstyle=\\\"float:right\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-repeat=\\\"feature in clusterInspectorVM.clusterInspectorService.listFeatures.features\\\" class=\\\"rocks-result-list-feature\\\">\\r\\n\\r\\n\t\t\t<table class=\\\"table table-hover table-striped\\\">\\r\\n\\r\\n\t\t\t\t<h5>ID: {{feature.id}}</h5>\\r\\n\t\t\t\t<tbody>\\r\\n\t\t\t\t\t<tr>\\r\\n\t\t\t\t\t\t<td><strong>GEOM</strong></td>\\r\\n\t\t\t\t\t\t<td>{{feature.geometry.coordinates[0]}}, {{feature.geometry.coordinates[1]}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t\t<tr ng-repeat=\\\"(key, value) in feature.properties\\\">\\r\\n\t\t\t\t\t\t<td><strong>{{key}}</strong></td>\\r\\n\t\t\t\t\t\t<td>{{value}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t</tbody>\\r\\n\\r\\n\t\t\t</table>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\">\\r\\n\t\t\t<span>{{clusterInspectorVM.clusterInspectorService.pagingState.count}} of {{clusterInspectorVM.clusterInspectorService.pagingState.total}}</span>\\r\\n\t\t\t<span style=\\\"float:right\\\">\\r\\n\t\t\t\t<button class=\\\"undecorated btn-sm\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t\t</span>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-summary.html\", \"<div id=\\\"clusterSummaryChart\\\" ng-show=\\\"chartState.targetChartId == \\'clusterSummaryChart\\'\\\">\\r\\n\\r\\n\t<div class=\\\"btn-group\\\" style=\\\"position: absolute;right: 10px;top: 10px;\\\">\\r\\n\t\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" title=\\\"Close charts\\\" ng-click=\\\"clusterChartVM.clusterChartService.hideChart(); clusterChartVM.clusterService.clearHighlighted();\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times-circle\\\" role=\\\"presentation\\\" style=\\\"font-size:16px; color:black\\\"></i>\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\\r\\n\t<div id=\\\"cluster-summary-chart-d3\\\"></div>\\r\\n\t<div id=\\\"cluster-summary-chart-loading\\\"></div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/control-panel.html\", \"<div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide cluster features\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.clustersEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.toggleClusters()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<button class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clusterFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clusterFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tCluster Features\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clusterFeatures\\'\\\">\\r\\n\\r\\n\t\t<uib-tabset active=\\\"activeJustified\\\" justified=\\\"true\\\">\\r\\n\t\t\t<uib-tab index=\\\"0\\\" heading=\\\"Inspect\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-inspector-panel></rocks-cluster-inspector-panel>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t\t<uib-tab index=\\\"1\\\" heading=\\\"Filter\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-filters></rocks-cluster-filters>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t</uib-tabset>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.pointsEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.togglePoints()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'pointFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'pointFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tPoint Features (WMS)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'pointFeatures\\'\\\">\\r\\n\t\t<rocks-wms-points-legend></rocks-wms-points-legend>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.wmsInspectorService.inspectorEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.wmsInspectorService.togglePointInspector()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'wmsInspector\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'wmsInspector\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tWMS Inspector (GetFeatureInfo)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'wmsInspector\\'\\\">\\r\\n\t\t<wms-inspector-panel></wms-inspector-panel>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"title w100\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clipShip\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clipShip\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tDownload Rock Property Data\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clipShip\\'\\\">\\r\\n\\r\\n\t\t<rocks-clip-ship></rocks-clip-ship>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-inspector-panel.html\", \"\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'INTRO\\'\\\">\\r\\n\t<div ng-if=\\\"wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Click the map to get feature info.</div>\\r\\n\t<div ng-if=\\\"!wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Enable WMS Inspector to interrogate WMS layers.</div>\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'LAYERSELECT\\'\\\">\\r\\n\\r\\n\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\tSelect a layer to query:\\r\\n\t\t<code>\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t</code>\\r\\n\t</p>\\r\\n\\r\\n\t<a\\r\\n\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t\tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryRocks()\\\"\\r\\n\t\thref=\\\"javascript:;\\\">\\r\\n\t\tRock Properties Data\\r\\n\t</a>\\r\\n\\r\\n\t<a\\r\\n\t\tng-repeat=\\\"feature in wmsInspectorVM.wmsInspectorService.features\\\"\\r\\n\t\tclass=\\\"btn btn-default\\\"\\r\\n\t   \tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t   \tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryFeature(feature)\\\"\\r\\n\t   \thref=\\\"javascript:;\\\">\\r\\n\t\t{{feature.name}}\\r\\n\t</a>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t   style=\\\"width: 100%; margin-top: 20px\\\"\\r\\n\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t   href=\\\"javascript:;\\\">\\r\\n\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\tCancel\\r\\n\t</a>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'FEATUREINFO\\'\\\">\\r\\n\\r\\n\t<div ng-show=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\t\t<div id=\\\"rocks-inspector-loading\\\"></div>\\r\\n\t</div>\\r\\n\\r\\n\t<div ng-hide=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\\r\\n\t\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\t\tFeature Info for:\\r\\n\t\t\t<code>\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t\t</code>\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<!-- put html here.. -->\\r\\n\t\t<div ng-bind-html=\\\"wmsInspectorVM.wmsInspectorService.featureInfo\\\"></div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'LAYERSELECT\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left fa-lg\\\"></i>\\r\\n\t\t\tBack\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\t\tCancel\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-points-panel.html\", \"<div ng-hide=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\tEnable Point Features to view layers.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\\r\\n\t<div style=\\\"padding: 5px 10px; margin-left: -10px; background: #f0f0f0; border-radius: 3px;\\\">\\r\\n\t\t<label>\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"rocksWmsPointsVM.wmsPointsService.masterChecked\\\"\\r\\n\t\t\t\tng-change=\\\"rocksWmsPointsVM.wmsPointsService.toggleChecked()\\\"\\r\\n\t\t\t\tng-disabled=\\\"!rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\"/>\\r\\n\t\t\t{{ rocksWmsPointsVM.wmsPointsService.masterChecked ? \\'Deselect\\' : \\'Select\\' }} all layers\\r\\n\t\t</label>\\r\\n\t</div>\\r\\n\\r\\n\t<div ng-repeat=\\\"legend in rocksWmsPointsVM.wmsPointsService.legendData\\\" class=\\'rocks-points-legend-item\\'>\\r\\n\\r\\n\t\t<label>\\r\\n\t\t\t<input\\r\\n\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\tng-model=\\\"legend.isSelected\\\" />\\r\\n\t\t\t<img ng-src=\\\"{{legend.legendUrl}}\\\" alt=\\\"{{legend}} legend icon\\\" />\\r\\n\t\t</label>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t   style=\\\"width: 100%; margin-top: 20px\\\"\\r\\n\t   ng-click=\\\"rocksWmsPointsVM.wmsPointsService.updatePointsLayer()\\\"\\r\\n\t   href=\\\"javascript:;\\\">\\r\\n\t\t<i class=\\\"fa fa-refresh fa-lg\\\"></i>\\r\\n\t\tUpdate layers\\r\\n\t</a>\\r\\n\\r\\n</div>\");\n    }]);\n",null],"sourceRoot":"/source/"}