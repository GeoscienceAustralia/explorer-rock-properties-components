{"version":3,"sources":["components/config.ts","components/cluster-filters.ts","components/spinner.ts","components/gws-util.ts","components/query-builder-export.ts","components/clipship.ts","leaflet/wms-inspector.ts","leaflet/wms-inspector-state.ts","components/wms-points.ts","components/control-panel.ts","leaflet/cluster-inspector.ts","leaflet/zoom.ts","explorer-rock-properties-components.min.js","leaflet/clusters.ts","components/charts.ts","templates/templates.ts"],"names":["rpComponents","config","config_1","RocksConfigService","$rootScope","this","prototype","setConfig","map","$broadcast","$inject","angular","module","factory","filters","RocksClusterFilterCtrl","$scope","clusterService","rocksPanelService","rocksFiltersService","ClusterFilterState","filterQuery","RocksFiltersService","$http","rocksConfigService","clusterFilterState","_this","clusterFilters","$on","get","filterNamesServiceUrl","then","response","data","i","length","filterType","propertyOptions","copy","filterOptions","j","name","isSelected","properties","exportProperties","console","log","setAllExportSelected","selected","applyFilters","buildFilterQuery","reCluster","ga","query","hasOwnProperty","ClusterOption","push","encodeURIComponent","join","clearFilters","controller","directive","templateUrl","controllerAs","spinnerService","LoadingSpinnerService","addSpinner","spin","selection","duration","transition","ease","attrTween","d3","interpolateString","setTimeout","radius","Math","min","width","height","tau","PI","arc","svg","innerRadius","outerRadius","startAngle","select","container","append","attr","id","datum","endAngle","style","call","gwsUtilService","GwsUtilService","$q","getWfsFeatureTypeNames","deferred","defer","geoserverWfsUrl","geoserverWfsVersion","success","status","headers","layerNames","getFeatureTypeNamesFromWfsCapsJson","xmlToJson","$","parseXML","resolve","error","err","promise","layerData","FeatureTypeList","FeatureType","layers","Name","getWmsLayerNames","geoserverWmsUrl","geoserverWmsVersion","wmsLayerNames","getLayerNamesFromWmsCapsJson","WMS_Capabilities","Capability","Layer","xml","obj","nodeType","attributes","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","queryBuilderExport","QueryBuilder","loadingSpinnerService","rocksClipShipService","propertyQuery","baseUrl","forEach","geoserverWfsExportParams","value","key","slice","wfsLayerNames","startClipShip","features","format","extent","loading","loadingSpinner","targetFeatures","zip","JSZip","support","blob","promises","buildQuery","all","results","numberOfLineBreaks","match","filename","split","file","content","generate","type","saveAs","step","window","open","exportUrl","isEmpty","prop","typeNamesQuery","getTypeNamesQuery","west","getWest","east","getEast","north","getNorth","south","getSouth","bboxQuery","exportFormat","hasFilters","filtersHasProperty","onlyHasPropertyFilter","Object","keys","getFilters","getPropertyQuery","filterString","property","concat","substring","clipShipService","RocksClipShipCtrl","$timeout","rocksQueryBuilderExport","targetFormat","targetExtent","RocksClipShipService","isDrawing","exportFormats","geoserverWfsExportFormats","event","startDraw","openGeoserver","win","geoserverDashboardUrl","focus","updateExportFormat","filter","$filter","wmsInspectorService","wmsInspectorService_1","WmsInspectorCtrl","wmsInspectorState","WmsInspectorService","mapService","assetsService","configService","mapOn","self","inspectorEnabled","degrees","lat","latlng","lon","lng","linked","isActive","targetGeom","view","isLoading","URL_EXCLUDE","SURFACE_GEO","getReferenceFeatureClasses","rocksFeature","wmsUrl","getMap","on","togglePointInspector","queryRocks","geoserverWmsLayerPrefix","queryFeature","feature","toggleLoading","targetUrl","targetLayers","indexOf","queryString","featureInfo","WmsInspectorState","pointsService","RocksWmsPointsCtrl","wmsPointsService","WmsPointsService","masterChecked","legendParamString","init","wmsServiceUrl","defaultWmsLayers","restrictedBounds","geoserverWmsLegendParams","getLegendData","togglePoints","pointsVisible","wmsLayer","addLayer","removeLayer","updatePointsLayer","someChecked","checked","legendData","layer","deselectLayers","toggleLayer","findIn","legendUrl","legend","L","tileLayer","wms","transparent","toString","layerGroup","controlPanel","RocksPanelCtrl","targetPanel","setTargetPanel","RocksPanelService","clustersEnabled","pointsEnabled","showClustersOnStart","toggleClusters","clusterInspector","ClusterInspectorCtrl","clusterInspectorService","PagingState","count","total","more","ClusterInspectorService","zoomLevelService","clusterChartService","inspectMode","listReady","maxListStep","serviceUrl","rocksServiceUrl","useClusterPicking","targetPos","chartClusterQuery","listIndex","listClusterQuery","summarySpinner","document","getElementById","display","args","zoom","x","y","method","url","buildChart","loadNextListStep","listSpinner","listFeatures","totalFeatures","pagingState","setPickEnabled","enabled","setClusterPrimitive","primitive","clusterPrimitive","setHighlighted","highlight","getGeometryInstanceAttributes","prevColor","color","clearHighlighted","targetId","chartSpinnerService","ZoomLevelService","zoomLevels","defaultExtent","moveEndHandler","nextPosition","previousPosition","getIndex","nextIndex","abs","latitude","longitude","defineProperty","enumerable","configurable","setActive","active","getViewExtent","offset","ClusterHeightWeighter","calculateWeighting","pow","ClusterService","sequence","showClusters","clusterFilter","_refreshClusters","instanceSequence","getZoom","bounds","getBounds","parms","max","rootScope","result","maxCount","geoJson","pointToLayer","geojsonMarkerOptions","fillColor","weight","opacity","fillOpacity","marker","circleMarker","bindLabel","noHide","addTo","movePan","chartService","ClusterChartCtrl","ClusterChartService","hideChart","targetChartId","dataset","innerHTML","propertyData","attKey","attributeName","propertyName","padding","donutWidth","minWidth","minHeight","numberOfCharts","body","clientHeight","clientWidth","top","right","bottom","left","panelWidth","drawLegend","legendPerPage","pageNo","totalPages","selectAll","enter","d","legendWidth","legendSpacing","legendRect","legendText","text","charSpace","sum","round","pageText","prevtriangle","prevLegend","nexttriangle","nextLegend","remove","startIndex","endIndex","dataSubset","seriesSubset","scale","category20","pie","layout","sort","tooltip","path","each","_current","percent","html","pageX","pageY","legendCount","netLegendHeight","floor","ceil","run","$templateCache","put"],"mappings":"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","file":"explorer-rock-properties-components.min.js","sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,"/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var config;\n    (function (config_1) {\n        'use strict';\n        var RocksConfigService = (function () {\n            function RocksConfigService($rootScope) {\n                this.$rootScope = $rootScope;\n            }\n            RocksConfigService.prototype.setConfig = function (config, map) {\n                this.config = config;\n                this.map = map;\n                this.$rootScope.$broadcast(\"rocks.config.ready\");\n            };\n            RocksConfigService.$inject = [\n                \"$rootScope\"\n            ];\n            return RocksConfigService;\n        }());\n        config_1.RocksConfigService = RocksConfigService;\n        angular\n            .module('explorer.rockproperties.config', [])\n            .factory(\"rocksConfigService\", [\"$rootScope\",\n            function ($rootScope) {\n                return new rpComponents.config.RocksConfigService($rootScope);\n            }]);\n    })(config = rpComponents.config || (rpComponents.config = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters\" />\nvar rpComponents;\n(function (rpComponents) {\n    var filters;\n    (function (filters) {\n        'use strict';\n        var RocksClusterFilterCtrl = (function () {\n            function RocksClusterFilterCtrl($scope, clusterService, rocksPanelService, rocksFiltersService) {\n                this.$scope = $scope;\n                this.clusterService = clusterService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n            }\n            RocksClusterFilterCtrl.$inject = [\"$scope\", \"clusterService\", \"rocksPanelService\", \"rocksFiltersService\"];\n            return RocksClusterFilterCtrl;\n        }());\n        filters.RocksClusterFilterCtrl = RocksClusterFilterCtrl;\n        var ClusterFilterState = (function () {\n            function ClusterFilterState() {\n                this.filterQuery = '';\n            }\n            return ClusterFilterState;\n        }());\n        filters.ClusterFilterState = ClusterFilterState;\n        var RocksFiltersService = (function () {\n            function RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterService = clusterService;\n                this.clusterFilterState = clusterFilterState;\n                this.clusterFilters = {};\n                this.$inject = [\n                    \"$http\",\n                    \"$rootScope\",\n                    \"rocksConfigService\",\n                    \"clusterService\",\n                    \"clusterFilterState\"\n                ];\n                // load filter data\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    $http.get(_this.rocksConfigService.config.filterNamesServiceUrl).then(function (response) {\n                        _this.filters = response.data;\n                        for (var i = 0; i < _this.filters.length; i++) {\n                            if (_this.filters[i].filterType == \"PROPERTY\") {\n                                // set up properties array with flag for export\n                                var propertyOptions = angular.copy(_this.filters[i].filterOptions);\n                                for (var j = 0; j < propertyOptions.length; j++) {\n                                    propertyOptions[j] = {\n                                        name: propertyOptions[j],\n                                        isSelected: false\n                                    };\n                                }\n                                var properties = angular.copy(_this.filters[i]);\n                                properties.filterOptions = propertyOptions;\n                                _this.exportProperties = properties;\n                            }\n                        }\n                    }), function (response) {\n                        console.log(\"Failed to get rock props filters\");\n                        console.log(response);\n                    };\n                });\n            }\n            RocksFiltersService.prototype.setAllExportSelected = function (selected) {\n                for (var i = 0; i < this.exportProperties.filterOptions.length; i++) {\n                    this.exportProperties.filterOptions[i].isSelected = selected;\n                }\n            };\n            RocksFiltersService.prototype.applyFilters = function () {\n                this.clusterFilterState.filterQuery = this.buildFilterQuery();\n                this.clusterService.reCluster();\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster filters applied');\n            };\n            RocksFiltersService.prototype.buildFilterQuery = function () {\n                var query = [];\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption') && this.filters[i].ClusterOption) {\n                        query.push('filter=' + encodeURIComponent(this.filters[i].filterType + '=' + this.filters[i].ClusterOption));\n                    }\n                }\n                return \"&\" + query.join(\"&\");\n            };\n            RocksFiltersService.prototype.clearFilters = function () {\n                for (var i = 0; i < this.filters.length; i++) {\n                    if (this.filters[i].hasOwnProperty('ClusterOption')) {\n                        this.filters[i].ClusterOption = false;\n                    }\n                }\n                this.clusterFilterState.filterQuery = \"\";\n                this.clusterService.reCluster();\n            };\n            return RocksFiltersService;\n        }());\n        filters.RocksFiltersService = RocksFiltersService;\n        angular\n            .module('explorer.rockproperties.clusterfilters', [])\n            .controller(\"rocksClusterFilterCtrl\", RocksClusterFilterCtrl)\n            .directive(\"rocksClusterFilters\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-filters.html',\n                controller: RocksClusterFilterCtrl,\n                controllerAs: 'rocksClusterFilterVM'\n            };\n        })\n            .factory(\"rocksFiltersService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"rocksConfigService\",\n            \"clusterService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, rocksConfigService, clusterService, clusterFilterState) {\n                return new rpComponents.filters.RocksFiltersService($http, $rootScope, rocksConfigService, clusterService, clusterFilterState);\n            }])\n            .factory(\"clusterFilterState\", [function () { return new rpComponents.filters.ClusterFilterState(); }]);\n    })(filters = rpComponents.filters || (rpComponents.filters = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n * Simple loading spinner so we're not tied to any img/icon font's\n */\nvar rpComponents;\n(function (rpComponents) {\n    var spinnerService;\n    (function (spinnerService) {\n        'use strict';\n        var LoadingSpinnerService = (function () {\n            function LoadingSpinnerService() {\n            }\n            LoadingSpinnerService.prototype.addSpinner = function (config) {\n                return function () {\n                    var radius = Math.min(config.width, config.height) / 2;\n                    var tau = 2 * Math.PI;\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius * 0.5)\n                        .outerRadius(radius * 0.9)\n                        .startAngle(0);\n                    var svg = d3.select(config.container).append(\"svg\")\n                        .attr(\"id\", config.id)\n                        .attr(\"width\", config.width)\n                        .attr(\"height\", config.height)\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(\" + config.width / 2 + \",\" + config.height / 2 + \")\");\n                    svg.append(\"path\")\n                        .datum({ endAngle: 0.33 * tau })\n                        .style(\"fill\", \"#4D4D4D\")\n                        .attr(\"d\", arc)\n                        .call(spin, 1500);\n                    function spin(selection, duration) {\n                        selection.transition()\n                            .ease(\"linear\")\n                            .duration(duration)\n                            .attrTween(\"transform\", function () {\n                            return d3.interpolateString(\"rotate(0)\", \"rotate(360)\");\n                        });\n                        setTimeout(function () { spin(selection, duration); }, duration);\n                    }\n                };\n            };\n            return LoadingSpinnerService;\n        }());\n        spinnerService.LoadingSpinnerService = LoadingSpinnerService;\n        angular\n            .module('explorer.rockproperties.spinner', [])\n            .factory(\"loadingSpinnerService\", [function () { return new rpComponents.spinnerService.LoadingSpinnerService(); }]);\n    })(spinnerService = rpComponents.spinnerService || (rpComponents.spinnerService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n *\n * Geoserver Utils, e.g. get list of layers names from web map service.\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var gwsUtilService;\n    (function (gwsUtilService) {\n        'use strict';\n        var GwsUtilService = (function () {\n            function GwsUtilService($q, $http, rocksConfigService) {\n                this.$q = $q;\n                this.$http = $http;\n                this.rocksConfigService = rocksConfigService;\n            }\n            GwsUtilService.prototype.getWfsFeatureTypeNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWfsUrl\n                    + '?request=GetCapabilities&service=wfs&version='\n                    + this.rocksConfigService.config.geoserverWfsVersion).\n                    success(function (data, status, headers, config) {\n                    var layerNames = _this.getFeatureTypeNamesFromWfsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(layerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getFeatureTypeNamesFromWfsCapsJson = function (data) {\n                var layerData = data[\"wfs:WFS_Capabilities\"].FeatureTypeList.FeatureType;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.getWmsLayerNames = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.get(this.rocksConfigService.config.geoserverWmsUrl\n                    + '?request=GetCapabilities&service=wms&version='\n                    + this.rocksConfigService.config.geoserverWmsVersion).\n                    success(function (data, status, headers, config) {\n                    _this.wmsLayerNames = _this.getLayerNamesFromWmsCapsJson(_this.xmlToJson($.parseXML(data)));\n                    deferred.resolve(_this.wmsLayerNames);\n                }).\n                    error(function (err) {\n                    console.log(\"GetCapabilities request failed\");\n                    console.log(err);\n                    deferred.error();\n                });\n                return deferred.promise;\n            };\n            GwsUtilService.prototype.getLayerNamesFromWmsCapsJson = function (data) {\n                var layerData = data.WMS_Capabilities.Capability.Layer.Layer;\n                var layers = [];\n                for (var i = 0; i < layerData.length; i++) {\n                    layers.push(layerData[i].Name[\"#text\"]);\n                }\n                return layers;\n            };\n            GwsUtilService.prototype.xmlToJson = function (xml) {\n                var obj = {};\n                if (xml.nodeType == 1) {\n                    // do attributes\n                    if (xml.attributes.length > 0) {\n                        obj[\"@attributes\"] = {};\n                        for (var j = 0; j < xml.attributes.length; j++) {\n                            var attribute = xml.attributes.item(j);\n                            obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n                        }\n                    }\n                }\n                else if (xml.nodeType == 3) {\n                    obj = xml.nodeValue;\n                }\n                // do children\n                if (xml.hasChildNodes()) {\n                    for (var i = 0; i < xml.childNodes.length; i++) {\n                        var item = xml.childNodes.item(i);\n                        var nodeName = item.nodeName;\n                        if (typeof (obj[nodeName]) == \"undefined\") {\n                            obj[nodeName] = this.xmlToJson(item);\n                        }\n                        else {\n                            if (typeof (obj[nodeName].push) == \"undefined\") {\n                                var old = obj[nodeName];\n                                obj[nodeName] = [];\n                                obj[nodeName].push(old);\n                            }\n                            obj[nodeName].push(this.xmlToJson(item));\n                        }\n                    }\n                }\n                return obj;\n            };\n            GwsUtilService.$inject = [\n                \"$q\",\n                \"$http\",\n                \"rocksConfigService\"\n            ];\n            return GwsUtilService;\n        }());\n        gwsUtilService.GwsUtilService = GwsUtilService;\n        angular\n            .module('explorer.rockproperties.gwsutil', [])\n            .factory(\"gwsUtilService\", [\"$q\", \"$http\", \"rocksConfigService\",\n            function ($q, $http, rocksConfigService) {\n                return new rpComponents.gwsUtilService.GwsUtilService($q, $http, rocksConfigService);\n            }]);\n    })(gwsUtilService = rpComponents.gwsUtilService || (rpComponents.gwsUtilService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"clipship\" />\n/// <reference path=\"config\" />\n/// <reference path=\"spinner\" />\n/// <reference path=\"gws-util\" />\nvar rpComponents;\n(function (rpComponents) {\n    var queryBuilderExport;\n    (function (queryBuilderExport) {\n        'use strict';\n        var QueryBuilder = (function () {\n            function QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                var _this = this;\n                this.$q = $q;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksConfigService = rocksConfigService;\n                this.gwsUtilService = gwsUtilService;\n                this.propertyQuery = \"\";\n                this.$inject = [\n                    \"$q\",\n                    \"$http\",\n                    \"$rootScope\",\n                    \"loadingSpinnerService\",\n                    \"rocksClipShipService\",\n                    \"rocksConfigService\",\n                    \"gwsUtilService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    // build base query URL from config\n                    _this.baseUrl = _this.rocksConfigService.config.geoserverWfsUrl + \"?\";\n                    angular.forEach(_this.rocksConfigService.config.geoserverWfsExportParams, function (value, key) {\n                        _this.baseUrl += key + \"=\" + value + \"&\";\n                    });\n                    // lose trailing &\n                    _this.baseUrl = _this.baseUrl.slice(0, -1);\n                    // get WFS layer names\n                    _this.gwsUtilService.getWfsFeatureTypeNames().then(function (layerNames) {\n                        _this.wfsLayerNames = layerNames;\n                    });\n                });\n            }\n            QueryBuilder.prototype.startClipShip = function (features, format, extent) {\n                var _this = this;\n                // TODO fire flasher event for UI?\n                this.loading = true;\n                // init spinner\n                if (!this.loadingSpinner) {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 80,\n                        height: 80,\n                        container: \"#rock-clip-ship-loading\",\n                        id: \"clip-ship-spinner\"\n                    });\n                    this.loadingSpinner();\n                }\n                var targetFeatures = [];\n                for (var i = 0; i < features.length; i++) {\n                    if (features[i].isSelected)\n                        targetFeatures.push(features[i].name);\n                }\n                if (format === \"csv\") {\n                    var zip = new JSZip();\n                    // give zip file to decent browsers\n                    if (JSZip.support.blob) {\n                        var promises = [];\n                        // create a Get query for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            var query = this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]);\n                            var promise = this.$http.get(query);\n                            promises.push(promise);\n                        }\n                        this.$q.all(promises).then(function (results) {\n                            for (var i = 0; i < results.length; i++) {\n                                // we'll assume that if there's more than one line we've got data to write\n                                var numberOfLineBreaks = (results[i]['data'].match(/\\n/g) || []).length;\n                                if (numberOfLineBreaks > 1) {\n                                    var filename = _this.wfsLayerNames[i].split(' ').join('-');\n                                    zip.file(filename + \".csv\", results[i]['data'] + \"\\n\");\n                                }\n                            }\n                            // FileSaver.js\n                            var content = zip.generate({ type: \"blob\" });\n                            saveAs(content, \"rocks-export.zip\");\n                            _this.loading = false;\n                            _this.rocksClipShipService.step = 'startDraw';\n                        });\n                    }\n                    else {\n                        // just give separate file for each layer\n                        for (var i = 0; i < this.wfsLayerNames.length; i++) {\n                            window.open(this.buildQuery(targetFeatures, extent, format, [this.wfsLayerNames[i]]));\n                        }\n                        this.loading = false;\n                    }\n                }\n                else {\n                    // give the user the query url directly\n                    this.exportUrl = this.buildQuery(targetFeatures, extent, format, this.wfsLayerNames);\n                    this.loading = false;\n                }\n            };\n            QueryBuilder.prototype.buildQuery = function (properties, extent, format, layerNames) {\n                var typeNamesQuery = this.getTypeNamesQuery(layerNames);\n                var west = extent.getWest();\n                var east = extent.getEast();\n                var north = extent.getNorth();\n                var south = extent.getSouth();\n                // BBOX and FILTER queries are mutually exclusive, so must use CQL\n                var bboxQuery = \"&CQL_FILTER=BBOX(GEOM,\" + west + \",\" + south + \",\" + east + \",\" + north + \")\";\n                var filterQuery = \"\";\n                var filters = {}; // filterState.filters;\n                var exportFormat = \"&outputFormat=\" + format;\n                var query;\n                var hasFilters = !isEmpty(filters);\n                var filtersHasProperty = filters.hasOwnProperty(\"PROPERTY\");\n                var onlyHasPropertyFilter = (filtersHasProperty && (Object.keys(filters).length === 1)) ? true : false;\n                function isEmpty(obj) {\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop))\n                            return false;\n                    }\n                    return true;\n                }\n                // single feature/layer query with filters\n                if (hasFilters && filtersHasProperty) {\n                    this.propertyQuery = \"%20AND%20PROPERTY='\" + filters['PROPERTY'] + \"'\";\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else if (hasFilters) {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                    if (!onlyHasPropertyFilter) {\n                        filterQuery = this.getFilters(filters);\n                    }\n                }\n                else {\n                    this.propertyQuery = this.getPropertyQuery(properties);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'clipship data export: ' + format);\n                query = this.baseUrl + typeNamesQuery + exportFormat + bboxQuery + filterQuery + this.propertyQuery;\n                return query;\n            };\n            // create filter query for each of the selected attribute values\n            // don't include PROPERTY here as we want to apply OR logic\n            QueryBuilder.prototype.getFilters = function (filters) {\n                var filterString = \"%20AND%20\";\n                // create filters string\n                for (var property in filters) {\n                    if (property !== \"PROPERTY\") {\n                        filterString = filterString.concat(property + \"='\" + filters[property] + \"'%20AND%20\");\n                    }\n                }\n                // trim tailing AND\n                filterString = filterString.substring(0, filterString.length - 9);\n                return filterString;\n            };\n            // build CQL query for properties\n            QueryBuilder.prototype.getPropertyQuery = function (properties) {\n                var query = \"%20AND%20(\";\n                for (var i = 0; i < properties.length; i++) {\n                    query = query.concat(\"PROPERTY='\" + properties[i] + \"'%20OR%20\");\n                }\n                // trim trailing OR, close bracket\n                query = query.substring(0, query.length - 8);\n                query = query.concat(\")\");\n                return query;\n            };\n            QueryBuilder.prototype.getTypeNamesQuery = function (layers) {\n                var query = \"&typeName=\";\n                for (var i = 0; i < layers.length; i++) {\n                    query = query.concat(layers[i] + \",\");\n                }\n                query = query.substring(0, query.length - 1);\n                return query;\n            };\n            return QueryBuilder;\n        }());\n        queryBuilderExport.QueryBuilder = QueryBuilder;\n        angular\n            .module('explorer.rockproperties.queryexport', [])\n            .factory(\"rocksQueryBuilderExport\", [\n            \"$q\",\n            \"$http\",\n            \"$rootScope\",\n            \"loadingSpinnerService\",\n            \"rocksClipShipService\",\n            \"rocksConfigService\",\n            \"gwsUtilService\",\n            function ($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService) {\n                return new rpComponents.queryBuilderExport.QueryBuilder($q, $http, $rootScope, loadingSpinnerService, rocksClipShipService, rocksConfigService, gwsUtilService);\n            }]);\n    })(queryBuilderExport = rpComponents.queryBuilderExport || (rpComponents.queryBuilderExport = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"query-builder-export\" />\n/// <reference path=\"cluster-filters\" />\n/// <reference path=\"control-panel\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clipShipService;\n    (function (clipShipService) {\n        'use strict';\n        var RocksClipShipCtrl = (function () {\n            function RocksClipShipCtrl($scope, $timeout, rocksClipShipService, rocksPanelService, rocksFiltersService, rocksQueryBuilderExport) {\n                this.$scope = $scope;\n                this.$timeout = $timeout;\n                this.rocksClipShipService = rocksClipShipService;\n                this.rocksPanelService = rocksPanelService;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksQueryBuilderExport = rocksQueryBuilderExport;\n            }\n            RocksClipShipCtrl.prototype.startClipShip = function () {\n                var _this = this;\n                this.$timeout(function () {\n                    _this.rocksClipShipService.step = 'download';\n                    _this.rocksQueryBuilderExport.startClipShip(_this.rocksFiltersService.exportProperties.filterOptions, _this.rocksClipShipService.targetFormat, _this.rocksClipShipService.targetExtent);\n                });\n            };\n            RocksClipShipCtrl.$inject = [\n                \"$scope\",\n                \"$timeout\",\n                \"rocksClipShipService\",\n                \"rocksPanelService\",\n                \"rocksFiltersService\",\n                \"rocksQueryBuilderExport\"\n            ];\n            return RocksClipShipCtrl;\n        }());\n        clipShipService.RocksClipShipCtrl = RocksClipShipCtrl;\n        var RocksClipShipService = (function () {\n            function RocksClipShipService($timeout, $rootScope, rocksFiltersService, rocksConfigService) {\n                var _this = this;\n                this.$timeout = $timeout;\n                this.$rootScope = $rootScope;\n                this.rocksFiltersService = rocksFiltersService;\n                this.rocksConfigService = rocksConfigService;\n                this.step = \"startDraw\";\n                this.isDrawing = false;\n                this.$inject = [\n                    \"$timeout\",\n                    \"$rootScope\",\n                    \"rocksFiltersService\",\n                    \"rocksConfigService\"\n                ];\n                this.$rootScope.$on(\"rocks.config.ready\", function () {\n                    _this.exportFormats = _this.rocksConfigService.config.geoserverWfsExportFormats;\n                });\n                this.$rootScope.$on(\"rocks.extent.ready\", function (event, data) {\n                    _this.$timeout(function () {\n                        _this.step = \"selectFeatures\";\n                        _this.targetExtent = data;\n                    });\n                });\n            }\n            /**\n             * broadcast event to trigger draw, and return extent\n             */\n            RocksClipShipService.prototype.startDraw = function () {\n                this.isDrawing = true;\n                this.$rootScope.$broadcast(\"draw.extent.start\", \"rocks.extent.ready\");\n            };\n            RocksClipShipService.prototype.openGeoserver = function () {\n                var win = window.open(this.rocksConfigService.config.geoserverDashboardUrl, '_blank');\n                if (win) {\n                    win.focus();\n                }\n            };\n            RocksClipShipService.prototype.updateExportFormat = function (format) {\n                this.targetFormat = format;\n            };\n            return RocksClipShipService;\n        }());\n        clipShipService.RocksClipShipService = RocksClipShipService;\n        angular\n            .module('explorer.rockproperties.clipship', [])\n            .factory(\"rocksClipShipService\", [\"$timeout\", \"$rootScope\", \"rocksFiltersService\", \"rocksConfigService\",\n            function ($timeout, $rootScope, rocksFiltersService, rocksConfigService) {\n                return new rpComponents.clipShipService.RocksClipShipService($timeout, $rootScope, rocksFiltersService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksClipShipCtrl\", RocksClipShipCtrl)\n            .directive(\"rocksClipShip\", function () {\n            return {\n                templateUrl: 'rockprops/clip-ship.html',\n                controller: RocksClipShipCtrl,\n                controllerAs: 'rocksClipShipVM'\n            };\n        })\n            .filter('noClipSelected', [function ($filter) {\n                return function (features) {\n                    if (!features)\n                        return;\n                    for (var i = 0; i < features.length; i++) {\n                        if (features[i].isSelected)\n                            return false;\n                    }\n                    return true;\n                };\n            }]);\n    })(clipShipService = rpComponents.clipShipService || (rpComponents.clipShipService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/spinner\" />\n/// <reference path=\"../components/clipship\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorService;\n    (function (wmsInspectorService_1) {\n        'use strict';\n        var WmsInspectorCtrl = (function () {\n            function WmsInspectorCtrl($scope, wmsInspectorState, wmsInspectorService) {\n                this.$scope = $scope;\n                this.wmsInspectorState = wmsInspectorState;\n                this.wmsInspectorService = wmsInspectorService;\n            }\n            WmsInspectorCtrl.$inject = [\"$scope\", \"wmsInspectorState\", \"wmsInspectorService\"];\n            return WmsInspectorCtrl;\n        }());\n        wmsInspectorService_1.WmsInspectorCtrl = WmsInspectorCtrl;\n        var WmsInspectorService = (function () {\n            function WmsInspectorService($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                var _this = this;\n                this.$timeout = $timeout;\n                this.$rootScope = $rootScope;\n                this.$http = $http;\n                this.mapService = mapService;\n                this.wmsInspectorState = wmsInspectorState;\n                this.assetsService = assetsService;\n                this.configService = configService;\n                this.rocksConfigService = rocksConfigService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksClipShipService = rocksClipShipService;\n                this.isLoading = false;\n                this.URL_EXCLUDE = \"?SERVICE=WMS&\";\n                this.SURFACE_GEO = \"GA_Surface_Geology_of_Australia\";\n                this.$inject = [\n                    \"$timeout\",\n                    \"$rootScope\",\n                    \"$http\",\n                    'mapService',\n                    \"wmsInspectorState\",\n                    \"assetsService\",\n                    \"configService\",\n                    \"rocksConfigService\",\n                    \"loadingSpinnerService\",\n                    \"gwsUtilService\",\n                    \"rocksClipShipService\"\n                ];\n                var self = this;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    // load feature classes\n                    assetsService.getReferenceFeatureClasses().then(function (features) {\n                        _this.features = features;\n                    });\n                    // init rocks feature\n                    _this.rocksFeature = {\n                        wmsUrl: _this.rocksConfigService.config.geoserverWmsUrl,\n                        name: 'Rock Properties Layer'\n                    };\n                });\n                mapService.getMap().then(function (map) {\n                    map.on('click', mapOn);\n                });\n                function mapOn(data) {\n                    if (!self.inspectorEnabled) {\n                        return;\n                    }\n                    self.$timeout(function () {\n                        data.degrees = {\n                            lat: data.latlng.lat,\n                            lon: data.latlng.lng\n                        };\n                        // TODO should flasher for this so user knows why\n                        // (we don't want inspector interuppting clipship drawing)\n                        if (self.rocksClipShipService.isDrawing) {\n                            return;\n                        }\n                        if (data.latlng) {\n                            // make sure panel is visible\n                            self.$rootScope.$broadcast(\"rocks.accordion.update\", \"wmsInspector\");\n                            self.$rootScope.$broadcast(\"toolbar.toggle.update\", { linked: false, key: \"rocksClusters\", isActive: true });\n                            self.wmsInspectorState.targetGeom = data;\n                            self.wmsInspectorState.view = \"LAYERSELECT\";\n                        }\n                    });\n                }\n            }\n            WmsInspectorService.prototype.togglePointInspector = function () {\n                this.inspectorEnabled = !this.inspectorEnabled;\n            };\n            // TODO we should restrict the query to visible layers\n            WmsInspectorService.prototype.queryRocks = function () {\n                if (!this.rocksFeature.hasOwnProperty('layers') && this.gwsUtilService.wmsLayerNames) {\n                    this.rocksFeature.layers = [];\n                    for (var i = 0; i < this.gwsUtilService.wmsLayerNames.length; i++) {\n                        this.rocksFeature.layers.push(this.rocksConfigService.config.geoserverWmsLayerPrefix +\n                            this.gwsUtilService.wmsLayerNames[i]);\n                    }\n                }\n                this.queryFeature(this.rocksFeature);\n            };\n            WmsInspectorService.prototype.queryFeature = function (feature) {\n                var _this = this;\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'wms inspector query: ' + feature.name);\n                // set view\n                this.wmsInspectorState.view = \"FEATUREINFO\";\n                this.toggleLoading();\n                var targetUrl = feature.wmsUrl;\n                var targetLayers = feature.layers;\n                // clean any endpoints already containing '?'\n                if (targetUrl.indexOf(this.URL_EXCLUDE) > -1) {\n                    targetUrl = targetUrl.substring(0, (targetUrl.length - this.URL_EXCLUDE.length));\n                }\n                var queryString = '?SERVICE=WMS' +\n                    '&REQUEST=GetFeatureInfo' +\n                    '&VERSION=1.1.1' +\n                    '&LAYERS=' + targetLayers +\n                    '&STYLES=' +\n                    '&SRS=EPSG%3A4326' +\n                    '&FORMAT=image%2Fpng' +\n                    // we use the click pos as the bottom left corner\n                    // and offset the top right by ~30 meters\n                    // (can be hard to click on a point if res is too fine)\n                    '&BBOX=' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lon + 0.003) + ',' +\n                    (this.wmsInspectorState.targetGeom.degrees.lat + 0.003) +\n                    '&QUERY_LAYERS=' + targetLayers +\n                    '&INFO_FORMAT=text%2Fhtml' +\n                    '&FEATURE_COUNT=100' +\n                    '&WIDTH=2' +\n                    '&HEIGHT=2' +\n                    '&X=1' +\n                    '&Y=1' +\n                    '&TRANSPARENT=true' +\n                    '&EXCEPTIONS=application%2Fvnd.ogc.se_xml';\n                // send the query\n                this.$http.get(targetUrl + queryString).success(function (data) {\n                    _this.featureInfo = data;\n                    _this.toggleLoading();\n                })\n                    .error(function (data, status, headers, config) {\n                    console.log(\"Couldn't load WMS GetFeatureInfo\");\n                    this.featureInfo = \"<h5>Couldn't load WMS GetFeatureInfo for this layer.</h5><p>You may not be able to access this function for some layers.</p>\";\n                    this.toggleLoading();\n                });\n            };\n            WmsInspectorService.prototype.toggleLoading = function () {\n                if (this.loadingSpinner) {\n                    this.isLoading = !this.isLoading;\n                }\n                else {\n                    this.loadingSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 60,\n                        height: 60,\n                        container: \"#rocks-inspector-loading\",\n                        id: \"rocks-inspector-spinner\"\n                    });\n                    this.loadingSpinner();\n                    this.isLoading = true;\n                }\n            };\n            return WmsInspectorService;\n        }());\n        wmsInspectorService_1.WmsInspectorService = WmsInspectorService;\n        angular\n            .module('explorer.rockproperties.inspector', [])\n            .factory(\"wmsInspectorService\", [\n            \"$timeout\",\n            \"$rootScope\",\n            \"$http\",\n            \"mapService\",\n            \"wmsInspectorState\",\n            \"assetsService\",\n            \"configService\",\n            \"rocksConfigService\",\n            \"loadingSpinnerService\",\n            \"gwsUtilService\",\n            \"rocksClipShipService\",\n            function ($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService) {\n                return new rpComponents.wmsInspectorService.WmsInspectorService($timeout, $rootScope, $http, mapService, wmsInspectorState, assetsService, configService, rocksConfigService, loadingSpinnerService, gwsUtilService, rocksClipShipService);\n            }])\n            .controller(\"wmsInspectorCtrl\", rpComponents.wmsInspectorService.WmsInspectorCtrl)\n            .directive(\"wmsInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/wms-inspector-panel.html',\n                controller: WmsInspectorCtrl,\n                controllerAs: 'wmsInspectorVM'\n            };\n        });\n    })(wmsInspectorService = rpComponents.wmsInspectorService || (rpComponents.wmsInspectorService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var wmsInspectorState;\n    (function (wmsInspectorState) {\n        'use strict';\n        /*\n            The WMS inspector panel can be in 1 of 3 view states:\n            1. INTRO - the default/home shows prompt\n            2. LAYERSELECT - user presented with layers to interrogate with GetFeatureInfo when\n            they have clicked a point on the map\n            3. FEATUREINFO - view to present raw html returned by GetFeatureInfo\n         */\n        var WmsInspectorState = (function () {\n            function WmsInspectorState() {\n                this.view = \"INTRO\";\n            }\n            return WmsInspectorState;\n        }());\n        wmsInspectorState.WmsInspectorState = WmsInspectorState;\n        angular\n            .module('explorer.rockproperties.inspectorstate', [])\n            .factory(\"wmsInspectorState\", [function () { return new rpComponents.wmsInspectorState.WmsInspectorState(); }]);\n    })(wmsInspectorState = rpComponents.wmsInspectorState || (rpComponents.wmsInspectorState = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"config\" />\n/// <reference path=\"../components/control-panel\" />\n/// <reference path=\"../leaflet/wms-inspector\" />\n/// <reference path=\"../leaflet/wms-inspector-state\" />\n/// <reference path=\"gws-util\" />\nvar rpComponents;\n(function (rpComponents) {\n    var pointsService;\n    (function (pointsService) {\n        'use strict';\n        var RocksWmsPointsCtrl = (function () {\n            function RocksWmsPointsCtrl($scope, wmsPointsService, rocksPanelService, wmsInspectorState) {\n                this.$scope = $scope;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorState = wmsInspectorState;\n            }\n            RocksWmsPointsCtrl.$inject = [\"$scope\", \"wmsPointsService\", \"rocksPanelService\", \"wmsInspectorState\"];\n            return RocksWmsPointsCtrl;\n        }());\n        pointsService.RocksWmsPointsCtrl = RocksWmsPointsCtrl;\n        var WmsPointsService = (function () {\n            function WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.gwsUtilService = gwsUtilService;\n                this.rocksConfigService = rocksConfigService;\n                this.wmsInspectorState = wmsInspectorState;\n                this.inspectorEnabled = true;\n                this.masterChecked = true;\n                this.legendParamString = \"\";\n                this.$inject = [\n                    \"$rootScope\",\n                    \"gwsUtilService\",\n                    \"rocksConfigService\",\n                    \"wmsInspectorState\"\n                ];\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            WmsPointsService.prototype.init = function () {\n                var _this = this;\n                this.wmsServiceUrl = this.rocksConfigService.config.geoserverWmsUrl;\n                this.defaultWmsLayers = this.rocksConfigService.config.defaultWmsLayers ? this.rocksConfigService.config.defaultWmsLayers : [];\n                this.map = this.rocksConfigService.map;\n                this.restrictedBounds = [109, -45, 158, -8];\n                // build our legend param string from config\n                this.legendParamString = \"?\";\n                angular.forEach(this.rocksConfigService.config.geoserverWmsLegendParams, function (value, key) {\n                    _this.legendParamString += key + \"=\" + value + \"&\";\n                });\n                // lose trailing &\n                this.legendParamString = this.legendParamString.slice(0, -1) + \"&LAYER=\";\n                this.gwsUtilService.getWmsLayerNames().then(function (layers) {\n                    _this.layers = layers;\n                    _this.getLegendData();\n                });\n            };\n            WmsPointsService.prototype.togglePoints = function () {\n                this.pointsVisible = !this.pointsVisible;\n                if (this.wmsLayer) {\n                    if (this.pointsVisible) {\n                        this.map.addLayer(this.wmsLayer);\n                    }\n                    else {\n                        this.map.removeLayer(this.wmsLayer);\n                    }\n                }\n                else {\n                    this.updatePointsLayer();\n                }\n                return this.pointsVisible;\n            };\n            WmsPointsService.prototype.someChecked = function () {\n                var checked = false;\n                angular.forEach(this.legendData, function (layer) {\n                    checked = layer.isSelected || checked;\n                });\n                return checked;\n            };\n            WmsPointsService.prototype.deselectLayers = function () {\n                angular.forEach(this.legendData, function (layer) {\n                    layer.isSelected = false;\n                });\n                this.updatePointsLayer();\n            };\n            WmsPointsService.prototype.toggleLayer = function (name) {\n                this.updatePointsLayer();\n            };\n            WmsPointsService.prototype.getLegendData = function () {\n                this.legendData = {};\n                for (var i = 0; i < this.layers.length; i++) {\n                    this.legendData[this.layers[i]] = {\n                        legendUrl: this.wmsServiceUrl + this.legendParamString + this.layers[i],\n                        isSelected: isSelected(this.layers[i], this.defaultWmsLayers)\n                    };\n                }\n                function isSelected(name, layers) {\n                    if (layers.length) {\n                        // Tempted to use array indexOf but got scared someone may try port this to something really old.\n                        var findIn = layers.join(\",\");\n                        return findIn.indexOf(name) > -1;\n                    }\n                    else {\n                        return true;\n                    }\n                }\n            };\n            WmsPointsService.prototype.updatePointsLayer = function () {\n                var targetLayers = [];\n                for (var legend in this.legendData) {\n                    if (this.legendData[legend] && this.legendData[legend]['isSelected'] === true) {\n                        targetLayers.push(L.tileLayer.wms(this.wmsServiceUrl, {\n                            layers: legend,\n                            transparent: true,\n                            format: 'image/png'\n                        }));\n                    }\n                }\n                if (this.wmsLayer) {\n                    this.map.removeLayer(this.wmsLayer);\n                }\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'update wms points layer: ' + targetLayers.toString());\n                this.wmsLayer = L.layerGroup(targetLayers);\n                this.map.addLayer(this.wmsLayer);\n            };\n            return WmsPointsService;\n        }());\n        pointsService.WmsPointsService = WmsPointsService;\n        angular\n            .module('explorer.rockproperties.wmspoints', [])\n            .factory(\"wmsPointsService\", [\"$rootScope\", \"gwsUtilService\", \"rocksConfigService\", \"wmsInspectorState\",\n            function ($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState) {\n                return new rpComponents.pointsService.WmsPointsService($rootScope, gwsUtilService, rocksConfigService, wmsInspectorState);\n            }])\n            .controller(\"rocksWmsPointsCtrl\", RocksWmsPointsCtrl)\n            .directive(\"rocksWmsPointsLegend\", function () {\n            return {\n                templateUrl: 'rockprops/wms-points-panel.html',\n                controller: RocksWmsPointsCtrl,\n                controllerAs: 'rocksWmsPointsVM'\n            };\n        });\n    })(pointsService = rpComponents.pointsService || (rpComponents.pointsService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters\" />\n/// <reference path=\"../leaflet/wms-inspector\" />\n/// <reference path=\"wms-points\" />\nvar rpComponents;\n(function (rpComponents) {\n    var controlPanel;\n    (function (controlPanel) {\n        'use strict';\n        var RocksPanelCtrl = (function () {\n            function RocksPanelCtrl($scope, rocksPanelService, wmsInspectorService) {\n                var _this = this;\n                this.$scope = $scope;\n                this.rocksPanelService = rocksPanelService;\n                this.wmsInspectorService = wmsInspectorService;\n                this.targetPanel = '';\n                this.$scope.$on(\"rocks.accordion.update\", function (event, data) {\n                    _this.targetPanel = data;\n                });\n            }\n            RocksPanelCtrl.prototype.setTargetPanel = function (targetPanel) {\n                this.targetPanel = (this.targetPanel != targetPanel) ? targetPanel : \"\";\n            };\n            RocksPanelCtrl.$inject = [\"$scope\", \"rocksPanelService\", \"wmsInspectorService\"];\n            return RocksPanelCtrl;\n        }());\n        controlPanel.RocksPanelCtrl = RocksPanelCtrl;\n        var RocksPanelService = (function () {\n            function RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                this.$rootScope = $rootScope;\n                this.clusterService = clusterService;\n                this.wmsPointsService = wmsPointsService;\n                this.rocksConfigService = rocksConfigService;\n                this.clustersEnabled = false;\n                this.pointsEnabled = false;\n            }\n            /**\n             *\n             * The entry point for the component.\n             *\n             * @param map\n             * @param clusterServiceUrl\n             * @param wmsServiceUrl\n             * @param pickEnabled\n             */\n            RocksPanelService.prototype.init = function (map, config) {\n                this.map = map;\n                this.rocksConfigService.setConfig(config, map);\n                if (config && config.showClustersOnStart && !this.clustersEnabled) {\n                    this.toggleClusters();\n                }\n            };\n            RocksPanelService.prototype.toggleClusters = function () {\n                this.clustersEnabled = this.clusterService.toggleClusters();\n            };\n            RocksPanelService.prototype.togglePoints = function () {\n                this.pointsEnabled = this.wmsPointsService.togglePoints();\n            };\n            RocksPanelService.$inject = [\n                \"$rootScope\",\n                \"clusterService\",\n                \"wmsPointsService\",\n                \"rocksConfigService\"\n            ];\n            return RocksPanelService;\n        }());\n        controlPanel.RocksPanelService = RocksPanelService;\n        angular\n            .module('explorer.rockproperties.controlpanel', [])\n            .factory(\"rocksPanelService\", [\n            \"$rootScope\", \"clusterService\", \"wmsPointsService\", \"rocksConfigService\",\n            function ($rootScope, clusterService, wmsPointsService, rocksConfigService) {\n                return new rpComponents.controlPanel.RocksPanelService($rootScope, clusterService, wmsPointsService, rocksConfigService);\n            }\n        ])\n            .controller(\"rocksPanelCtrl\", RocksPanelCtrl)\n            .directive(\"rocksControlPanel\", function () {\n            return {\n                templateUrl: 'rockprops/control-panel.html',\n                controller: RocksPanelCtrl,\n                controllerAs: 'controlPanelVM'\n            };\n        });\n    })(controlPanel = rpComponents.controlPanel || (rpComponents.controlPanel = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/control-panel\" />\n/// <reference path=\"../components/charts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterInspector;\n    (function (clusterInspector) {\n        'use strict';\n        var ClusterInspectorCtrl = (function () {\n            function ClusterInspectorCtrl($scope, clusterInspectorService, rocksPanelService) {\n                this.$scope = $scope;\n                this.clusterInspectorService = clusterInspectorService;\n                this.rocksPanelService = rocksPanelService;\n            }\n            ClusterInspectorCtrl.$inject = [\"$scope\", \"clusterInspectorService\", \"rocksPanelService\"];\n            return ClusterInspectorCtrl;\n        }());\n        clusterInspector.ClusterInspectorCtrl = ClusterInspectorCtrl;\n        var PagingState = (function () {\n            function PagingState(count, total) {\n                this.count = count;\n                this.total = total;\n            }\n            PagingState.prototype.more = function () {\n                return this.total > this.count;\n            };\n            return PagingState;\n        }());\n        clusterInspector.PagingState = PagingState;\n        var ClusterInspectorService = (function () {\n            function ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, loadingSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.$timeout = $timeout;\n                this.zoomLevelService = zoomLevelService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterChartService = clusterChartService;\n                this.clusterFilterState = clusterFilterState;\n                this.inspectMode = \"CHART\";\n                this.listReady = false;\n                // TODO decide reasonable step size when plugged into real service\n                this.maxListStep = 100;\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.init();\n                });\n            }\n            /**\n             *\n             \n             * @param map\n             * @param summaryService\n             * @param usePicking\n             */\n            ClusterInspectorService.prototype.init = function () {\n                var _this = this;\n                this.map = this.rocksConfigService.map;\n                this.serviceUrl = this.rocksConfigService.config.rocksServiceUrl;\n                // setup our pick handler\n                if (this.rocksConfigService.config.useClusterPicking) {\n                    this.$rootScope.$on('rocks.cluster.selected', function (event, data) {\n                        _this.targetPos = data;\n                        _this.listReady = false;\n                        if (_this.inspectMode == \"CHART\") {\n                            _this.chartClusterQuery();\n                        }\n                        else {\n                            _this.listIndex = 0;\n                            _this.listClusterQuery();\n                        }\n                    });\n                }\n            };\n            /**\n             *\n             * Gets a summary of cluster data to pass to chartService.\n             *\n             * @param cluster\n             */\n            ClusterInspectorService.prototype.chartClusterQuery = function () {\n                var _this = this;\n                //  spinner for summary chart load\n                if (this.summarySpinner) {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'block';\n                }\n                else {\n                    this.summarySpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-summary-chart-loading\",\n                        id: \"chart-spinner\"\n                    });\n                    this.summarySpinner();\n                }\n                var args = '/' + this.targetPos.zoom +\n                    '/' + this.targetPos.x +\n                    '/' + this.targetPos.y +\n                    '?v=1' +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'query' + args;\n                console.log(\"query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.clusterChartService.buildChart(response.data);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector summary charts');\n            };\n            ClusterInspectorService.prototype.loadNextListStep = function () {\n                this.listIndex += this.maxListStep;\n                console.log(\"loadNextListStep \" + this.listIndex);\n                this.listClusterQuery();\n            };\n            ClusterInspectorService.prototype.listClusterQuery = function () {\n                var _this = this;\n                console.log(\"listClusterQuery\");\n                //  spinner for summary chart load\n                if (this.listSpinner) {\n                    document.getElementById(\"cluster-result-list-loading\").style.display = 'block';\n                }\n                else {\n                    this.listSpinner = this.loadingSpinnerService.addSpinner({\n                        width: 100,\n                        height: 100,\n                        container: \"#cluster-result-list-loading\",\n                        id: \"cluster-result-list-spinner\"\n                    });\n                    this.listSpinner();\n                }\n                var args = '/' + this.targetPos.zoom +\n                    '/' + this.targetPos.x +\n                    '/' + this.targetPos.y +\n                    '?maxCount=' + this.maxListStep +\n                    '&startIndex=' + this.listIndex +\n                    this.clusterFilterState.filterQuery;\n                var query = this.serviceUrl + 'features' + args;\n                console.log(\"features query\");\n                console.log(query);\n                this.$http({\n                    method: 'GET',\n                    url: query\n                }).then(function (response) {\n                    if (response.hasOwnProperty('data')) {\n                        _this.$timeout(function () {\n                            document.getElementById(\"cluster-result-list-loading\").style.display = 'none';\n                            _this.listReady = true;\n                            // step, merge features\n                            if (_this.listIndex != 0) {\n                                _this.listFeatures.features = _this.listFeatures.features.concat(response.data.features);\n                            }\n                            else {\n                                _this.listFeatures = response.data;\n                            }\n                            var morePages = _this.listFeatures.features.length < _this.listFeatures.totalFeatures;\n                            _this.pagingState = new PagingState(_this.listFeatures.features.length, _this.listFeatures.totalFeatures);\n                        }, 1000);\n                    }\n                });\n                ga('send', 'event', 'explorer-rock-properties', 'click', 'cluster inspector feature list (startIndex: ' + this.listIndex + ')');\n            };\n            ClusterInspectorService.prototype.setPickEnabled = function (enabled) {\n                if (enabled) {\n                }\n                else {\n                }\n            };\n            ClusterInspectorService.prototype.setClusterPrimitive = function (primitive) {\n                this.clusterPrimitive = primitive;\n            };\n            ClusterInspectorService.prototype.setHighlighted = function (id, highlight) {\n                var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(id);\n                if (attributes && highlight) {\n                    attributes.prevColor = attributes.color;\n                    attributes.color = '#ff00ff';\n                }\n            };\n            ClusterInspectorService.prototype.clearHighlighted = function () {\n                if (this.targetId) {\n                    var attributes = this.clusterPrimitive.getGeometryInstanceAttributes(this.targetId);\n                    if (attributes && attributes.hasOwnProperty('prevColor')) {\n                        attributes.color = attributes.prevColor;\n                    }\n                }\n            };\n            ClusterInspectorService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"$timeout\",\n                \"zoomLevelService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterChartService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterInspectorService;\n        }());\n        clusterInspector.ClusterInspectorService = ClusterInspectorService;\n        angular\n            .module('explorer.rockproperties.clusterinspector', [])\n            .controller(\"clusterInspectorCtrl\", ClusterInspectorCtrl)\n            .directive(\"rocksClusterInspectorPanel\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-inspector.html',\n                controller: ClusterInspectorCtrl,\n                controllerAs: 'clusterInspectorVM'\n            };\n        })\n            .factory(\"clusterInspectorService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"$timeout\",\n            \"zoomLevelService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterChartService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState) {\n                return new rpComponents.clusterInspector.ClusterInspectorService($http, $rootScope, $timeout, zoomLevelService, chartSpinnerService, rocksConfigService, clusterChartService, clusterFilterState);\n            }]);\n    })(clusterInspector = rpComponents.clusterInspector || (rpComponents.clusterInspector = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/**\n *\n * Handles the arbitrary 'zoom' levels/ranges that we will display different cluster granularities.\n *\n *\n */\nvar rpComponents;\n(function (rpComponents) {\n    var zoom;\n    (function (zoom) {\n        'use strict';\n        var ZoomLevelService = (function () {\n            function ZoomLevelService($rootScope, rocksConfigService) {\n                var _this = this;\n                this.$rootScope = $rootScope;\n                this.rocksConfigService = rocksConfigService;\n                this.zoomLevels = [\n                    5000,\n                    10000,\n                    20000,\n                    30000,\n                    50000,\n                    80000,\n                    200000,\n                    1000000,\n                    1500000,\n                    2000000,\n                    4000000,\n                    6500000,\n                    // these's tiles are pretty broad\n                    8500000,\n                    10000000,\n                    15000000,\n                    100000000\n                ];\n                this.defaultExtent = {\n                    \"west\": 109,\n                    \"south\": -45,\n                    \"east\": 158,\n                    \"north\": -8\n                };\n                this.moveEndHandler = function () {\n                    _this.nextPosition = _this.map;\n                    // changed indexes or exceed threshold for pan, trigger recluster\n                    if ((_this.previousPosition.height > -1 && _this.getIndex(_this.previousPosition.height) != _this.nextIndex) ||\n                        (Math.abs(_this.nextPosition.latitude - _this.previousPosition.latitude) > 0.01 / _this.nextIndex ||\n                            Math.abs(_this.nextPosition.longitude - _this.previousPosition.longitude) > 0.01 / _this.nextIndex) ||\n                        _this.nextIndex == 16) {\n                        _this.$rootScope.$broadcast('rocks.clusters.update', _this.nextIndex);\n                    }\n                    console.log(\"INDEX = \" + _this.nextIndex);\n                    _this.previousPosition = _this.nextPosition;\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.map = _this.rocksConfigService.map;\n                });\n            }\n            Object.defineProperty(ZoomLevelService.prototype, \"nextIndex\", {\n                get: function () {\n                    return this.getIndex(this.nextPosition.height);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             *\n             * Get the lowest index the height fits into\n             *\n             * @param height\n             * @returns {number}\n             */\n            ZoomLevelService.prototype.getIndex = function (height) {\n                for (var i = 0; i < this.zoomLevels.length; i++) {\n                    if (height < this.zoomLevels[i]) {\n                        return this.zoomLevels.length - i;\n                    }\n                }\n                return this.zoomLevels.length - 1;\n            };\n            ZoomLevelService.prototype.setActive = function (active) {\n                console.log(\"setActive called\");\n            };\n            /**\n             *\n             * WKT? GeoJSON? - leave until approach is clearer.\n             * TODO this is here temporarily, more thought needed re managing the buffered extent currently handled by minimap.\n             *\n             * @param offset\n             * @returns {any}\n             */\n            ZoomLevelService.prototype.getViewExtent = function (offset) {\n                return 0;\n            };\n            ZoomLevelService.$inject = [\n                \"$rootScope\",\n                \"rocksConfigService\"\n            ];\n            return ZoomLevelService;\n        }());\n        zoom.ZoomLevelService = ZoomLevelService;\n        angular\n            .module('explorer.rockproperties.zoom', [])\n            .factory(\"zoomLevelService\", [\"$rootScope\", \"rocksConfigService\",\n            function ($rootScope, rocksConfigService) {\n                return new rpComponents.zoom.ZoomLevelService($rootScope, rocksConfigService);\n            }]);\n    })(zoom = rpComponents.zoom || (rpComponents.zoom = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../components/charts\" />\n/// <reference path=\"../components/config\" />\n/// <reference path=\"../components/cluster-filters\" />\n/// <reference path=\"../components/spinner\" />\n/// <reference path=\"cluster-inspector\" />\n/// <reference path=\"zoom\" />\nvar rpComponents;\n(function (rpComponents) {\n    var clusterService;\n    (function (clusterService) {\n        'use strict';\n        var ClusterHeightWeighter = (function () {\n            function ClusterHeightWeighter() {\n            }\n            ClusterHeightWeighter.prototype.calculateWeighting = function (zoom) {\n                return Math.pow(1.43, zoom);\n            };\n            return ClusterHeightWeighter;\n        }());\n        clusterService.ClusterHeightWeighter = ClusterHeightWeighter;\n        var ClusterService = (function () {\n            function ClusterService($http, $rootScope, zoomLevelService, clusterChartService, loadingSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                var _this = this;\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n                this.zoomLevelService = zoomLevelService;\n                this.clusterChartService = clusterChartService;\n                this.loadingSpinnerService = loadingSpinnerService;\n                this.rocksConfigService = rocksConfigService;\n                this.clusterInspectorService = clusterInspectorService;\n                this.clusterFilterState = clusterFilterState;\n                this.sequence = 0;\n                this.showClusters = false;\n                this.clusterFilter = '';\n                /**\n                 *\n                 * We get a performance benefit when we use fewer\n                 * primitives/collections to draw multiple static geometries.\n                 *\n                 */\n                this.reCluster = function () {\n                    _this._refreshClusters();\n                };\n                this.$rootScope.$on('rocks.config.ready', function () {\n                    _this.map = _this.rocksConfigService.map;\n                    _this.serviceUrl = _this.rocksConfigService.config.rocksServiceUrl;\n                    _this.init();\n                });\n            }\n            ClusterService.prototype._refreshClusters = function () {\n                var _this = this;\n                if (this.layer) {\n                    this.map.removeLayer(this.layer);\n                    this.layer = null;\n                }\n                var instanceSequence = ++this.sequence;\n                var zoom = this.map.getZoom();\n                var bounds = this.map.getBounds();\n                var parms = [];\n                parms.push(\"xmin=\" + Math.max(bounds.getWest() - 20 / Math.pow(zoom, 1.2), 40));\n                +parms.push(\"xmax=\" + Math.min(bounds.getEast() + 20 / Math.pow(zoom, 1.2), 179));\n                parms.push(\"ymin=\" + Math.max(bounds.getSouth() - 10 / Math.pow(zoom, 1.2), -85));\n                parms.push(\"ymax=\" + Math.min(bounds.getNorth() + 10 / Math.pow(zoom, 1.2), 10));\n                parms.push(\"zoom=\" + (Math.max(zoom, 5)));\n                var geojsonMarkerOptions = {\n                    radius: 8,\n                    fillColor: \"#ff0000\",\n                    color: \"#000\",\n                    weight: 1,\n                    opacity: 1,\n                    fillOpacity: 0.8\n                };\n                var rootScope = this.$rootScope;\n                this.$http.get(this.serviceUrl + \"summary?\" + parms.join(\"&\") + this.clusterFilterState.filterQuery).then(function (result) {\n                    if (instanceSequence < _this.sequence) {\n                        return;\n                    }\n                    var maxCount = d3.max(result.data.features, function (item) {\n                        return item.properties.count;\n                    });\n                    _this.layer = null;\n                    _this.layer = L.geoJson(result.data, {\n                        pointToLayer: function (feature, latlng) {\n                            var geojsonMarkerOptions = {\n                                radius: 4 + 20 * Math.pow(feature.properties.count / maxCount, 0.2),\n                                fillColor: \"#ff0000\",\n                                color: \"#000\",\n                                weight: 1,\n                                opacity: 1,\n                                fillOpacity: 0.8\n                            };\n                            var marker = L.circleMarker(latlng, geojsonMarkerOptions)\n                                .bindLabel(\"\" + feature.properties.count, { noHide: zoom > 4 });\n                            marker.on(\"click\", function () {\n                                var id = this.feature.id.split(\"/\");\n                                rootScope.$broadcast('rocks.cluster.selected', {\n                                    zoom: id[0],\n                                    x: id[1],\n                                    y: id[2]\n                                });\n                            });\n                            return marker;\n                        }\n                    });\n                    _this.layer.addTo(_this.map);\n                });\n            };\n            ClusterService.prototype.init = function () {\n                var self = this;\n                this.map.on('zoomend', movePan);\n                this.map.on('dragend', movePan);\n                function movePan(event) {\n                    if (!self.showClusters) {\n                        return;\n                    }\n                    self._refreshClusters();\n                }\n            };\n            ClusterService.prototype.toggleClusters = function () {\n                if (this.showClusters = !this.showClusters) {\n                    this._refreshClusters();\n                }\n                else if (this.layer) {\n                    this.map.removeLayer(this.layer);\n                    this.layer = null;\n                }\n                return this.showClusters;\n            };\n            ClusterService.$inject = [\n                \"$http\",\n                \"$rootScope\",\n                \"zoomLevelService\",\n                \"clusterChartService\",\n                \"loadingSpinnerService\",\n                \"rocksConfigService\",\n                \"clusterInspectorService\",\n                \"clusterFilterState\"\n            ];\n            return ClusterService;\n        }());\n        clusterService.ClusterService = ClusterService;\n        angular\n            .module('explorer.rockproperties.clusters', [])\n            .factory(\"clusterService\", [\n            \"$http\",\n            \"$rootScope\",\n            \"zoomLevelService\",\n            \"clusterChartService\",\n            \"loadingSpinnerService\",\n            \"rocksConfigService\",\n            \"clusterInspectorService\",\n            \"clusterFilterState\",\n            function ($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState) {\n                return new rpComponents.clusterService.ClusterService($http, $rootScope, zoomLevelService, clusterChartService, chartSpinnerService, rocksConfigService, clusterInspectorService, clusterFilterState);\n            }]);\n    })(clusterService = rpComponents.clusterService || (rpComponents.clusterService = {}));\n})(rpComponents || (rpComponents = {}));\n/// <reference path=\"../../typings/browser.d.ts\" />\n/// <reference path=\"../leaflet/clusters.ts\" />\nvar rpComponents;\n(function (rpComponents) {\n    var chartService;\n    (function (chartService) {\n        'use strict';\n        var ClusterChartCtrl = (function () {\n            function ClusterChartCtrl($scope, clusterChartService, clusterService) {\n                this.$scope = $scope;\n                this.clusterChartService = clusterChartService;\n                this.clusterService = clusterService;\n            }\n            ClusterChartCtrl.$inject = [\"$scope\", \"clusterChartService\", \"clusterService\"];\n            return ClusterChartCtrl;\n        }());\n        chartService.ClusterChartCtrl = ClusterChartCtrl;\n        var ClusterChartService = (function () {\n            function ClusterChartService($http, $rootScope) {\n                this.$http = $http;\n                this.$rootScope = $rootScope;\n            }\n            ClusterChartService.prototype.hideChart = function () {\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: false\n                });\n            };\n            ClusterChartService.prototype.buildChart = function (dataset) {\n                document.getElementById(\"cluster-summary-chart-d3\").innerHTML = \"\";\n                // trigger open/display a chart div\n                this.$rootScope.$broadcast(\"chart.update\", {\n                    targetChartId: \"clusterSummaryChart\"\n                });\n                // push data into array for d3 charting\n                var properties = [];\n                angular.forEach(dataset.properties, function (property, key) {\n                    var propertyData = [];\n                    angular.forEach(property, function (attribute, attKey) {\n                        propertyData.push({ attributeName: attKey, count: attribute });\n                    });\n                    properties.push({ propertyName: key, data: propertyData });\n                });\n                /*---------------------------------------- D3 -----------------------------------------*/\n                // LAYOUT\n                var minWidth = 1250;\n                var minHeight = 255;\n                var numberOfCharts = (properties.length < 7) ? properties.length : 4; // use two rows if we get too many properties\n                var width;\n                var height;\n                var padding;\n                var donutWidth;\n                if (document.body.clientHeight * 0.35 > minHeight && document.body.clientWidth > minWidth) {\n                    padding = { top: 0, right: 10, bottom: 0, left: 10 };\n                    width = document.body.clientWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = document.body.clientHeight * 0.35;\n                    donutWidth = 20;\n                }\n                else {\n                    padding = { top: 0, right: 5, bottom: 0, left: 5 };\n                    width = minWidth / numberOfCharts - (2 * padding.left + padding.right);\n                    height = minHeight;\n                    donutWidth = 15;\n                }\n                var panelWidth = document.body.clientWidth - (2 * padding.left + padding.right);\n                var radius = Math.min(width, height) / 2;\n                // DATA\n                // build a chart for each property\n                properties.forEach(function (property) {\n                    var color = d3.scale.category20();\n                    var svg = d3.select('#cluster-summary-chart-d3')\n                        .append('svg')\n                        .attr('width', width)\n                        .attr('height', height)\n                        .style('margin-left', padding.left + 'px')\n                        .style('margin-right', padding.right + 'px')\n                        .append('g')\n                        .attr('transform', 'translate(' + (width / 2) +\n                        ',' + ((height / 2) + 10) + ')');\n                    var arc = d3.svg.arc()\n                        .innerRadius(radius - donutWidth)\n                        .outerRadius(radius);\n                    var pie = d3.layout.pie()\n                        .value(function (d) { return d.count; })\n                        .sort(null);\n                    var tooltip = d3.select('#cluster-summary-chart-d3')\n                        .append('div')\n                        .attr('class', 'cluster-summary-tooltip');\n                    tooltip.append('div')\n                        .attr('class', 'attribute');\n                    tooltip.append('div')\n                        .attr('class', 'count');\n                    tooltip.append('div')\n                        .attr('class', 'percent');\n                    var path = svg.selectAll('path')\n                        .data(pie(property.data))\n                        .enter()\n                        .append('path')\n                        .attr('d', arc)\n                        .attr('fill', function (d, i) {\n                        return color(d.data.attributeName);\n                    })\n                        .each(function (d) { this._current = d; });\n                    path.on('mouseover', function (d) {\n                        var total = d3.sum(property.data.map(function (d) {\n                            return d.count;\n                        }));\n                        var percent = Math.round(1000 * d.data.count / total) / 10;\n                        tooltip.select('.attribute').html(d.data.attributeName);\n                        tooltip.select('.count').html(\"Count: \" + d.data.count);\n                        tooltip.select('.percent').html(\"Percent: \" + percent + '%');\n                        tooltip.style('display', 'block');\n                    });\n                    path.on('mouseout', function () {\n                        tooltip.style('display', 'none');\n                    });\n                    path.on('mousemove', function (d) {\n                        var x = (d3.event.pageX > panelWidth - 180) ? d3.event.pageX - 180 : d3.event.pageX;\n                        var y = (d3.event.pageY > document.body.clientHeight - 120) ? d3.event.pageY - 100 : d3.event.pageY + 10;\n                        tooltip\n                            .style('top', y + 'px')\n                            .style('left', x + 'px');\n                    });\n                    // title\n                    svg.append(\"g\")\n                        .attr(\"class\", \"cluster-summary-chart-title\")\n                        .append(\"text\")\n                        .attr(\"x\", 0)\n                        .attr(\"y\", -((height / 2) + 7))\n                        .attr(\"dy\", \".71em\")\n                        .style(\"text-anchor\", \"middle\")\n                        .style(\"fill\", \"#000\")\n                        .style(\"font-weight\", \"bold\")\n                        .text(property.propertyName);\n                    // PAGINATED LEGEND\n                    var legendCount = property.data.length;\n                    var legendWidth = 15;\n                    var legendSpacing = 6;\n                    var netLegendHeight = (legendWidth + legendSpacing) * legendCount;\n                    var legendPerPage;\n                    var totalPages;\n                    var pageNo;\n                    if ((netLegendHeight / radius) > 1) {\n                        legendPerPage = Math.floor(radius / (legendWidth + legendSpacing));\n                        totalPages = Math.ceil(legendCount / legendPerPage);\n                        pageNo = 1;\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    else {\n                        drawLegend(property.data, Math.floor(radius / (legendWidth + legendSpacing)), 1, 1);\n                    }\n                    /**\n                     *\n                     * Draws paginated legend if we need multiple pages\n                     *\n                     * @param data\n                     * @param legendPerPage\n                     * @param pageNo\n                     * @param totalPages\n                     */\n                    function drawLegend(data, legendPerPage, pageNo, totalPages) {\n                        var legend = svg.selectAll(\"g.legendg\")\n                            .data(data)\n                            .enter().append(\"g\")\n                            .attr('class', 'legendg')\n                            .attr(\"transform\", function (d, i) { return \"translate(\" + -(width / 2.3) + \",\" + ((i * (legendWidth + legendSpacing)) - (height / 4)) + \")\"; });\n                        var legendRect = legend.append(\"rect\")\n                            .attr(\"x\", 45)\n                            .attr(\"width\", legendWidth)\n                            .attr(\"height\", legendWidth)\n                            .attr(\"class\", \"legend\")\n                            .style('fill', function (d, i) { return color(d.attributeName); });\n                        var legendText = legend.append(\"text\")\n                            .attr(\"x\", 65)\n                            .attr(\"y\", 6)\n                            .attr(\"dy\", \".35em\")\n                            .style(\"text-anchor\", \"start\")\n                            .text(function (d) {\n                            // truncate long labels\n                            var charSpace = (radius - 20) / 5;\n                            if (d.attributeName.length > charSpace)\n                                return d.attributeName.substring(0, charSpace) + '...';\n                            else\n                                return d.attributeName;\n                        });\n                        // title tooltips\n                        legendRect.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        legendText.append(\"svg:title\").text(function (d) {\n                            var total = d3.sum(property.data.map(function (d) { return d.count; }));\n                            return d.attributeName + \" (\" + Math.round(1000 * d.count / total) / 10 + \"%)\";\n                        });\n                        if (totalPages > 1) {\n                            var pageText = svg.append(\"g\")\n                                .attr('class', 'pageNo')\n                                .attr(\"transform\", \"translate(\" + (-10) + \",\" + ((legendPerPage + 1) * (legendWidth + legendSpacing) - (height / 4)) + \")\");\n                            pageText.append('text').text(pageNo + '/' + totalPages)\n                                .attr('dx', '.25em');\n                            var prevtriangle = svg.append(\"g\")\n                                .attr('class', 'prev')\n                                .attr(\"transform\", \"translate(\" + (-20) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', prevLegend)\n                                .style('cursor', 'pointer');\n                            var nexttriangle = svg.append(\"g\")\n                                .attr('class', 'next')\n                                .attr(\"transform\", \"translate(\" + (0) + \",\" + ((legendPerPage + 1.5) * (legendWidth + legendSpacing) - (height / 4)) + \")\")\n                                .on('click', nextLegend)\n                                .style('cursor', 'pointer');\n                            nexttriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,0, 20,0, 10,10');\n                            prevtriangle.append('polygon')\n                                .style('stroke', '#000')\n                                .style('fill', '#000')\n                                .attr('points', '0,10, 20,10, 10,0');\n                            if (pageNo == totalPages) {\n                                nexttriangle.style('opacity', '0.3');\n                                nexttriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                            else if (pageNo == 1) {\n                                prevtriangle.style('opacity', '0.3');\n                                prevtriangle.on('click', '')\n                                    .style('cursor', '');\n                            }\n                        }\n                    }\n                    function prevLegend() {\n                        pageNo--;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var dataSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                dataSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(dataSubset, legendPerPage, pageNo, totalPages);\n                    }\n                    function nextLegend() {\n                        pageNo++;\n                        svg.selectAll(\"g.legendg\").remove();\n                        svg.select('.pageNo').remove();\n                        svg.select('.prev').remove();\n                        svg.select('.next').remove();\n                        var startIndex = (pageNo - 1) * legendPerPage;\n                        var endIndex = startIndex + legendPerPage;\n                        var seriesSubset = [];\n                        for (var i = 0; i < property.data.length; i++) {\n                            if (i >= startIndex && i < endIndex) {\n                                seriesSubset.push(property.data[i]);\n                            }\n                        }\n                        drawLegend(seriesSubset, legendPerPage, pageNo, totalPages);\n                    }\n                });\n                /*---------------------------------------- /D3 -----------------------------------------*/\n                // DEBUG emulate loading..\n                document.getElementById(\"cluster-summary-chart-d3\").style.display = 'none';\n                // chart ready to go\n                setTimeout(function () {\n                    document.getElementById(\"cluster-summary-chart-loading\").style.display = 'none';\n                    document.getElementById(\"cluster-summary-chart-d3\").style.display = 'block';\n                }, 1500);\n                return;\n            };\n            ClusterChartService.$inject = [\n                \"$http\",\n                \"$rootScope\"\n            ];\n            return ClusterChartService;\n        }());\n        chartService.ClusterChartService = ClusterChartService;\n        angular\n            .module('explorer.rockproperties.charts', [])\n            .factory(\"clusterChartService\", [\"$http\", \"$rootScope\",\n            function ($http, $rootScope) {\n                return new rpComponents.chartService.ClusterChartService($http, $rootScope);\n            }])\n            .controller(\"clusterChartCtrl\", ClusterChartCtrl)\n            .directive(\"clusterChartSummary\", function () {\n            return {\n                templateUrl: 'rockprops/cluster-summary.html',\n                controller: ClusterChartCtrl,\n                controllerAs: 'clusterChartVM'\n            };\n        });\n    })(chartService = rpComponents.chartService || (rpComponents.chartService = {}));\n})(rpComponents || (rpComponents = {}));\nangular.module(\"explorer.rockproperties.templates\", []).run([\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"rockprops/clip-ship.html\", \"\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'startDraw\\'\\\">\\r\\n\t<h6 class=\\\"dis-inline\\\">\\r\\n\t\t1.\\r\\n\t\t<button ng-click=\\\"rocksClipShipVM.rocksClipShipService.startDraw()\\\" style=\\\"padding: 5px 10px;border-radius: 3px;border: none;\\\">\\r\\n\t\t\tClick here\\r\\n\t\t</button>\\r\\n\t\tto select an area on the map <i class=\\\"fa fa-scissors\\\" style=\\\"font-size: 16px;\\\"></i></h6>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'selectFeatures\\'\\\">\\r\\n\\r\\n\t<h6 class=\\\"dis-inline\\\">2. Select features to download:</h6>\\r\\n\\r\\n\t<div>\\r\\n\\r\\n\t\t<!-- if we have active property filters, use them instead -->\\r\\n\t\t<p ng-show=\\\"hasAnyFilter\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Current filters will be applied to the exported data.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<div ng-hide=\\\"hasAnyFilter\\\">\\r\\n\\r\\n\t\t\t<div style=\\\"padding: 5px; margin-top: 10px; background: #f0f0f0; border-radius: 3px;\\\">\\r\\n\t\t\t\t<label>\\r\\n\t\t\t\t\t<input\\r\\n\t\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\t\tng-model=\\\"masterCheck\\\"\\r\\n\t\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\"\\r\\n\t\t\t\t\t\tng-change=\\\"rocksClipShipVM.rocksFiltersService.setAllExportSelected(masterCheck)\\\" />\\r\\n\t\t\t\t\t{{ masterCheck ? \\'Deselect\\' : \\'Select\\' }} All\\r\\n\t\t\t\t</label>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<label style=\\\"margin-left: 25px;\\\" class=\\\"checkbox\\\" ng-repeat=\\\"property in rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions\\\">\\r\\n\t\t\t\t<input\\r\\n\t\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\t\tvalue=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-model=\\\"property.isSelected\\\"\\r\\n\t\t\t\t\tng-checked=\\\"masterCheck\\\"\\r\\n\t\t\t\t\tng-disabled=\\\"hasPropertyFilter\\\">\\r\\n\t\t\t\t{{ property.name }}\\r\\n\t\t\t</label>\\r\\n\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div style=\\\"margin: 20px 0px 20px 0px;\\\">\\r\\n\t\t\t<label title=\\\"Export Format\\\">Export Format</label>\\r\\n\t\t\t<select ng-change=\\\"rocksClipShipVM.rocksClipShipService.updateExportFormat(exportFormats.SelectedOption)\\\"\\r\\n\t\t\t\t\tng-model=\\\"exportFormats.SelectedOption\\\"\\r\\n\t\t\t\t\tname=\\\"format\\\"\\r\\n\t\t\t\t\tng-options=\\\"option for option in rocksClipShipVM.rocksClipShipService.exportFormats\\\"\\r\\n\t\t\t\t\tng-class=\\\"form-control\\\"\\r\\n\t\t\t\t\tclass=\\\"filter-input\\\"\\r\\n\t\t\t\t\tstyle=\\\"float: right; width: 160px;\\\">\\r\\n\t\t\t\t<option value=\\\"\\\" class=\\\"\\\">--select--</option>\\r\\n\t\t\t</select>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<a ng-click=\\\"rocksClipShipVM.rocksClipShipService.openGeoserver()\\\" style=\\\"font-size: 11px; margin-top: 20px; color: blue; text-decoration: underline;\\\">\\r\\n\t\t\tMore Options via GeoServer Dashboard\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<div style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\t\ttitle=\\\"Cancel Download\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: left;\\\">Cancel</button>\\r\\n\t\t\t<button\\r\\n\t\t\t\ttype=\\\"button\\\"\\r\\n\t\t\t\tclass=\\\"btn btn-default focusMe\\\"\\r\\n\t\t\t\tng-click=\\\"rocksClipShipVM.startClipShip()\\\"\\r\\n\t\t\t\tstyle=\\\"width: 40%; float: right\\\"\\r\\n\t\t\t\ttitle=\\\"Select one or more reference feature classes before continuing.\\\"\\r\\n\t\t\t\tng-disabled=\\\"(rocksClipShipVM.rocksFiltersService.exportProperties.filterOptions | noClipSelected) || (!rocksClipShipVM.rocksClipShipService.targetFormat)\\\">Next</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksClipShipVM.rocksClipShipService.step == \\'download\\'\\\">\\r\\n\\r\\n\t<h6>3. Data Export:</h6>\\r\\n\\r\\n\t<div ng-hide=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\\r\\n\t\t<p ng-show=\\\"rocksClipShipVM.rocksClipShipService.targetFormat === \\'application/json\\'\\\" style=\\\"margin-top: 40px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Once json has loaded, save page as a .json file.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<p class=\\\"warning-block\\\" style=\\\"margin-top: 20px;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-info-circle\\\"></i> Large data sets may take several minutes to export.\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\ttarget=\\\"_blank\\\"\\r\\n\t\t\thref=\\\"{{rocksClipShipVM.rocksQueryBuilderExport.exportUrl}}\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'startDraw\\'; rocksClipShipVM.rocksClipShipService.isDrawing = false\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 30px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-download\\\"></i> Download {{ rocksClipShipVM.rocksClipShipService.targetFormat }}\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a\\r\\n\t\t\tclass=\\\"btn btn-default\\\"\\r\\n\t\t\thref=\\\"javascript:;\\\"\\r\\n\t\t\tng-click=\\\"rocksClipShipVM.rocksClipShipService.step = \\'selectFeatures\\'\\\"\\r\\n\t\t\tstyle=\\\"width: 100%; margin-top: 10px;\\\"\\r\\n\t\t\trole=\\\"button\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left\\\"></i> Back\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div id=\\\"rock-clip-ship-loading\\\" ng-show=\\\"rocksClipShipVM.rocksQueryBuilderExport.loading\\\">\\r\\n\t<p>Preparing Data..</p>\\r\\n</div>\");\n        $templateCache.put(\"rockprops/cluster-filters.html\", \"\\r\\n<!-- TODO plug into rock props filter service -->\\r\\n\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to apply filters.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\\r\\n\t<div ng-repeat=\\\"filter in rocksClusterFilterVM.rocksFiltersService.filters\\\" style=\\\"padding-top:7px;position:relative; overflow-x: hidden;overflow-y: auto;\\\">\\r\\n\\r\\n\t\t<label style=\\\"font-size: 11px;\\\" title=\\\"{{filter.filterLabel}}\\\">{{filter.filterLabel}}</label>\\r\\n\t\t<select\\r\\n\t\t\t\tng-model=\\\"filter.ClusterOption\\\"\\r\\n\t\t\t\tname=\\\"filter.filterType\\\"\\r\\n\t\t\t\tng-options=\\\"option as option for option in filter.filterOptions\\\"\\r\\n\t\t\t\tng-class=\\'form-control\\'\\r\\n\t\t\t\tclass=\\'filter-input\\'\\r\\n\t\t\t\tstyle=\\\"float:left;width:100%;position:relative;\\\">\\r\\n\t\t\t<option value=\\\"\\\" selected>--select--</option>\\r\\n\t\t</select>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div style=\\\"text-align: center;\\\">\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.applyFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-filter fa-lg\\\"></i>\\r\\n\t\t\tApply\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\" style=\\\"margin: 10px;\\\" ng-click=\\\"rocksClusterFilterVM.rocksFiltersService.clearFilters()\\\" href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-remove fa-lg\\\"></i>\\r\\n\t\t\tClear\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<p ng-show=\\\"filterResultCount()\\\" style=\\\"text-align: left; margin: 10px; font-size: 14px;\\\">\\r\\n\t\t\t<strong>Record Count: </strong>\\r\\n\t\t\t14320\\r\\n\t\t</p>\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-inspector.html\", \"\\r\\n<div ng-hide=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\tEnable Cluster Features to use the inspector tool.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"clusterInspectorVM.rocksPanelService.clustersEnabled\\\">\\r\\n\\r\\n\t<p>Click on a cluster to see:</p>\\r\\n\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"CHART\\\"> Summary charts\\r\\n\t</label>\\r\\n\t<label class=\\\"radio-inline\\\">\\r\\n\t\t<input\\r\\n\t\t\ttype=\\\"radio\\\"\\r\\n\t\t\tng-model=\\\"clusterInspectorVM.clusterInspectorService.inspectMode\\\"\\r\\n\t\t\tvalue=\\\"LIST\\\"> Results list\\r\\n\t</label>\\r\\n\\r\\n\t<div id=\\\"cluster-result-list-loading\\\" style=\\\"padding-top: 10px; text-align: center;\\\"></div>\\r\\n\\r\\n\\r\\n\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.listReady\\\">\\r\\n\\r\\n\t\t<div ng-if=\\\"clusterInspectorVM.clusterInspectorService.listFeatures.totalFeatures > 0\\\" class=\\\"alert alert-success\\\" style=\\\"margin-top: 30px;\\\">\\r\\n\t\t\tFeatures loaded: {{clusterInspectorVM.clusterInspectorService.pagingState.count}} of \\r\\n\t\t\t\t\t\t\t{{clusterInspectorVM.clusterInspectorService.pagingState.total}}\\r\\n\t\t\t<button ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\"  class=\\\"undecorated btn-sm\\\"\\r\\n\t\t\t\t\tstyle=\\\"float:right\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-repeat=\\\"feature in clusterInspectorVM.clusterInspectorService.listFeatures.features\\\" class=\\\"rocks-result-list-feature\\\">\\r\\n\\r\\n\t\t\t<table class=\\\"table table-hover table-striped\\\">\\r\\n\\r\\n\t\t\t\t<h5>ID: {{feature.id}}</h5>\\r\\n\t\t\t\t<tbody>\\r\\n\t\t\t\t\t<tr>\\r\\n\t\t\t\t\t\t<td><strong>GEOM</strong></td>\\r\\n\t\t\t\t\t\t<td>{{feature.geometry.coordinates[0]}}, {{feature.geometry.coordinates[1]}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t\t<tr ng-repeat=\\\"(key, value) in feature.properties\\\">\\r\\n\t\t\t\t\t\t<td><strong>{{key}}</strong></td>\\r\\n\t\t\t\t\t\t<td>{{value}}</td>\\r\\n\t\t\t\t\t</tr>\\r\\n\t\t\t\t</tbody>\\r\\n\\r\\n\t\t\t</table>\\r\\n\t\t</div>\\r\\n\\r\\n\t\t<div ng-show=\\\"clusterInspectorVM.clusterInspectorService.pagingState.more()\\\">\\r\\n\t\t\t<span>{{clusterInspectorVM.clusterInspectorService.pagingState.count}} of {{clusterInspectorVM.clusterInspectorService.pagingState.total}}</span>\\r\\n\t\t\t<span style=\\\"float:right\\\">\\r\\n\t\t\t\t<button class=\\\"undecorated btn-sm\\\" ng-click=\\\"clusterInspectorVM.clusterInspectorService.loadNextListStep()\\\">-More-</button>\\r\\n\t\t\t</span>\\r\\n\t\t</div>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\\r\\n\");\n        $templateCache.put(\"rockprops/cluster-summary.html\", \"<div id=\\\"clusterSummaryChart\\\" ng-show=\\\"chartState.targetChartId == \\'clusterSummaryChart\\'\\\">\\r\\n\\r\\n\t<div class=\\\"btn-group\\\" style=\\\"position: absolute;right: 10px;top: 10px;\\\">\\r\\n\t\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" title=\\\"Close charts\\\" ng-click=\\\"clusterChartVM.clusterChartService.hideChart(); clusterChartVM.clusterService.clearHighlighted();\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times-circle\\\" role=\\\"presentation\\\" style=\\\"font-size:16px; color:black\\\"></i>\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\\r\\n\t<div id=\\\"cluster-summary-chart-d3\\\"></div>\\r\\n\t<div id=\\\"cluster-summary-chart-loading\\\"></div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/control-panel.html\", \"<div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide cluster features\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.clustersEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.toggleClusters()\\\" />\\r\\n\t\t</div>\\r\\n\t\t<button class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clusterFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clusterFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tCluster Features\\r\\n\t\t</button>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clusterFeatures\\'\\\">\\r\\n\\r\\n\t\t<uib-tabset active=\\\"activeJustified\\\" justified=\\\"true\\\">\\r\\n\t\t\t<uib-tab index=\\\"0\\\" heading=\\\"Inspect\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-inspector-panel></rocks-cluster-inspector-panel>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t\t<uib-tab index=\\\"1\\\" heading=\\\"Filter\\\" style=\\\"padding: 0px 0px 20px 0px;\\\">\\r\\n\t\t\t\t<rocks-cluster-filters></rocks-cluster-filters>\\r\\n\t\t\t</uib-tab>\\r\\n\t\t</uib-tabset>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.rocksPanelService.pointsEnabled\\\"\\r\\n\t\t\t\tng-change=\\\"controlPanelVM.rocksPanelService.togglePoints(); controlPanelVM.rocksPanelService.pointsEnabled && controlPanelVM.setTargetPanel(\\'pointFeatures\\')\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'pointFeatures\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'pointFeatures\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tPoint Features (WMS)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'pointFeatures\\'\\\">\\r\\n\t\t<rocks-wms-points-legend></rocks-wms-points-legend>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"rocks-toggle-button\\\" title=\\\"Show/hide point features WMS layer\\\">\\r\\n\t\t\t<input\\r\\n\t\t\t\ttype=\\\"checkbox\\\"\\r\\n\t\t\t\tng-model=\\\"controlPanelVM.wmsInspectorService.inspectorEnabled\\\" />\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"title\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'wmsInspector\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'wmsInspector\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tWMS Inspector (GetFeatureInfo)\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'wmsInspector\\'\\\">\\r\\n\t\t<wms-inspector-panel></wms-inspector-panel>\\r\\n\t</div>\\r\\n\\r\\n\\r\\n\t<div class=\\\"rocks-accordion\\\">\\r\\n\t\t<div class=\\\"title w100\\\" ng-click=\\\"controlPanelVM.setTargetPanel(\\'clipShip\\')\\\">\\r\\n\t\t\t<i class=\\\"fa fa-{{ controlPanelVM.targetPanel == \\'clipShip\\' ? \\'minus\\' : \\'plus\\' }}\\\"></i>\\r\\n\t\t\tDownload Rock Property Data\\r\\n\t\t</div>\\r\\n\t</div>\\r\\n\\r\\n\t<div class=\\\"rocks-accordion-content\\\" ng-show=\\\"controlPanelVM.targetPanel == \\'clipShip\\'\\\">\\r\\n\\r\\n\t\t<rocks-clip-ship></rocks-clip-ship>\\r\\n\\r\\n\t</div>\\r\\n\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-inspector-panel.html\", \"<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'INTRO\\'\\\">\\r\\n\t<div ng-if=\\\"wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Click the map to get feature info.</div>\\r\\n\t<div ng-if=\\\"!wmsInspectorVM.wmsInspectorService.inspectorEnabled\\\">Enable WMS Inspector to interrogate WMS layers.</div>\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'LAYERSELECT\\'\\\">\\r\\n\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\tSelect a layer to query:\\r\\n\t\t<code>\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t</code>\\r\\n\t</p>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t\tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t\tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryRocks()\\\"\\r\\n\t\thref=\\\"javascript:;\\\">\\r\\n\t\tRock Properties Data\\r\\n\t</a>\\r\\n\\r\\n\t<a ng-repeat=\\\"feature in wmsInspectorVM.wmsInspectorService.features\\\"\\r\\n\t\tclass=\\\"btn btn-default\\\"\\r\\n\t   \tstyle=\\\"width: 100%; margin: 2px 0px\\\"\\r\\n\t   \tng-click=\\\"wmsInspectorVM.wmsInspectorService.queryFeature(feature)\\\"\\r\\n\t   \thref=\\\"javascript:;\\\">\\r\\n\t\t{{feature.name}}\\r\\n\t</a>\\r\\n\\r\\n\t<a class=\\\"btn btn-default\\\"\\r\\n\t   style=\\\"width: 100%; margin-top: 20px\\\"\\r\\n\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t   href=\\\"javascript:;\\\">\\r\\n\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\tCancel\\r\\n\t</a>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div ng-show=\\\"wmsInspectorVM.wmsInspectorState.view == \\'FEATUREINFO\\'\\\">\\r\\n\t<div ng-show=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\t\t<div id=\\\"rocks-inspector-loading\\\"></div>\\r\\n\t</div>\\r\\n\\r\\n\t<div ng-hide=\\\"wmsInspectorVM.wmsInspectorService.isLoading\\\">\\r\\n\t\t<p style=\\\"margin: 10px 0px;\\\" tooltip=\\\"Approx 30m accuracy\\\">\\r\\n\t\t\tFeature Info for:\\r\\n\t\t\t<code>\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lat | number : 2}},\\r\\n\t\t\t\t{{wmsInspectorVM.wmsInspectorState.targetGeom.degrees.lon | number : 2}}\\r\\n\t\t\t</code>\\r\\n\t\t</p>\\r\\n\\r\\n\t\t<!-- put html here.. -->\\r\\n\t\t<div ng-bind-html=\\\"wmsInspectorVM.wmsInspectorService.featureInfo\\\"></div>\\r\\n\t</div>\\r\\n\\r\\n\t<div>\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'LAYERSELECT\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-arrow-left fa-lg\\\"></i>\\r\\n\t\t\tBack\\r\\n\t\t</a>\\r\\n\\r\\n\t\t<a class=\\\"btn btn-default\\\"\\r\\n\t\t   style=\\\"width: 49%; margin-top: 20px\\\"\\r\\n\t\t   ng-click=\\\"wmsInspectorVM.wmsInspectorState.view = \\'INTRO\\'\\\"\\r\\n\t\t   href=\\\"javascript:;\\\">\\r\\n\t\t\t<i class=\\\"fa fa-times fa-lg\\\"></i>\\r\\n\t\t\tCancel\\r\\n\t\t</a>\\r\\n\\r\\n\t</div>\\r\\n</div>\");\n        $templateCache.put(\"rockprops/wms-points-panel.html\", \"<div ng-hide=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\tEnable Point Features to view layers.\\r\\n</div>\\r\\n\\r\\n<div ng-show=\\\"rocksWmsPointsVM.rocksPanelService.pointsEnabled\\\">\\r\\n\t<label>\\r\\n\t\t<button class=\\\"btn btn-default btn-xs\\\"\\r\\n            ng-click=\\\"rocksWmsPointsVM.wmsPointsService.deselectLayers()\\\"\\r\\n\t\t\t   ng-disabled=\\\"!rocksWmsPointsVM.wmsPointsService.someChecked()\\\">\\r\\n\t\t    Deselect all layers\\r\\n\t    </button>\\r\\n\t</label>\\r\\n\\r\\n\t<div ng-repeat=\\\"(key, legend) in rocksWmsPointsVM.wmsPointsService.legendData\\\" class=\\'rocks-points-legend-item\\'>\\r\\n\\r\\n\t\t<label>\\r\\n\t\t\t<input type=\\\"checkbox\\\"\\r\\n               ng-click=\\\"rocksWmsPointsVM.wmsPointsService.toggleLayer(key)\\\"\\r\\n\t\t\t      ng-model=\\\"legend.isSelected\\\" />\\r\\n\t\t\t<img ng-src=\\\"{{legend.legendUrl}}\\\" alt=\\\"{{legend}} legend icon\\\" />\\r\\n\t\t</label>\\r\\n\\r\\n\t</div>\\r\\n</div>\");\n    }]);\n",null,null,null],"sourceRoot":"/source/"}